import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as a,f as n}from"./app-0mkQjek1.js";const s={},o=n(`<h1 id="钉钉一面" tabindex="-1"><a class="header-anchor" href="#钉钉一面" aria-hidden="true">#</a> 钉钉一面</h1><h2 id="_1-react和vue的数据监听" tabindex="-1"><a class="header-anchor" href="#_1-react和vue的数据监听" aria-hidden="true">#</a> 1. react和vue的数据监听</h2><p><strong>react：</strong> 16之前使用 <code>componentWillReveiveProps</code>来监听 <code>props</code>的变换，16之后使用新出的 <code>getDerivedStateFromProps</code>进行props的监听。</p><p>React默认是通过<strong>比较引用的方式（diff）进行的</strong>，如果不优化可能导致大量不必要的VDOM的重新渲染。为什么React不精确监听数据变化呢？这是因为Vue和React设计理念上的区别，Vue使用的是可变数据，而React更强调数据的不可变，<strong>React 本身只解决视图层</strong>。React 的状态都是<strong>手动 setState 变化的，React 不监听数据变化。</strong> 两者没有好坏之分，Vue更加简单，而React构建大型应用的时候更加鲁棒。</p><p><strong>vue：</strong> 依靠的是 <code>watch</code>。Vue通过 getter/setter以及一些函数的劫持，能精确知道数据变化。</p><h2 id="_2-rn" tabindex="-1"><a class="header-anchor" href="#_2-rn" aria-hidden="true">#</a> 2. RN</h2><p>它被设计为用<strong>可重复使用的组件</strong>构建本地移动应用程序。它使用了大量的ReactJS组件，但<strong>在不同的设备上以原生方式实现它们</strong>。它调用Objective-C（用于iOS）和Java（用于Android）中的本地渲染API。</p><ul><li><strong>语法</strong>。React Native和ReactJS都使用JSX，但ReactJS使用HTML标签，而React Native不使用。</li><li><strong>导航</strong>。React Native使用自己的内置导航库，而ReactJS使用react-router。</li><li><strong>动画</strong>。ReactJS使用CSS动画。React Native使用其动画API（animated）</li><li><strong>DOM</strong>。ReactJS使用部分刷新的虚拟DOM。React Native在渲染UI组件时需要使用其本地API。</li><li><strong>用法</strong>。ReactJS主要用于Web应用开发，而React Native则专注于移动应用。</li></ul><h3 id="_2-1-rn常用组件" tabindex="-1"><a class="header-anchor" href="#_2-1-rn常用组件" aria-hidden="true">#</a> 2.1 rn常用组件</h3><table><thead><tr><th style="text-align:left;">REACT NATIVE UI 组件</th><th style="text-align:left;">说明</th><th style="text-align:left;">ANDROID 原生视图</th><th style="text-align:left;">IOS 原生视图</th><th style="text-align:left;">WEB 标签</th></tr></thead><tbody><tr><td style="text-align:left;"><code>&lt;View&gt;</code></td><td style="text-align:left;">一个支持使用flexbox布局、样式、一些触摸处理和无障碍性控件的容器</td><td style="text-align:left;"><code>&lt;ViewGroup&gt;</code></td><td style="text-align:left;"><code>&lt;UIView&gt;</code></td><td style="text-align:left;">A non-scrolling <code>&lt;div&gt;</code></td></tr><tr><td style="text-align:left;"><code>&lt;Text&gt;</code></td><td style="text-align:left;">显示、样式和嵌套文本字符串，甚至处理触摸事件</td><td style="text-align:left;"><code>&lt;TextView&gt;</code></td><td style="text-align:left;"><code>&lt;UITextView&gt;</code></td><td style="text-align:left;"><code>&lt;p&gt;</code></td></tr><tr><td style="text-align:left;"><code>&lt;Image&gt;</code></td><td style="text-align:left;">显示不同类型的图片</td><td style="text-align:left;"><code>&lt;ImageView&gt;</code></td><td style="text-align:left;"><code>&lt;UIImageView&gt;</code></td><td style="text-align:left;"><code>&lt;img&gt;</code></td></tr><tr><td style="text-align:left;"><code>&lt;ScrollView&gt;</code></td><td style="text-align:left;">一个通用的滚动容器，可以包含多个组件和视图</td><td style="text-align:left;"><code>&lt;ScrollView&gt;</code></td><td style="text-align:left;"><code>&lt;UIScrollView&gt;</code></td><td style="text-align:left;"><code>&lt;div&gt;</code></td></tr><tr><td style="text-align:left;"><code>&lt;TextInput&gt;</code></td><td style="text-align:left;">使用户可以输入文本</td><td style="text-align:left;"><code>&lt;EditText&gt;</code></td><td style="text-align:left;"><code>&lt;UITextField&gt;</code></td><td style="text-align:left;"><code>&lt;input type=&quot;text&quot;&gt;</code></td></tr><tr><td style="text-align:left;"><code>&lt;FlatList&gt;</code></td><td style="text-align:left;">显示一个垂直的滚动列表，其中的元素之间结构近似而仅数据不同</td><td style="text-align:left;">将extraData={this.state}传递给FlatList时，我们确保当所选状态发生变化时，它将重新渲染自己。</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"><code>&lt;SectionList&gt;</code></td><td style="text-align:left;">渲染的是一组需要分组的数据，也许还带有分组标签的</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr></tbody></table><h3 id="_2-2-rn检测平台" tabindex="-1"><a class="header-anchor" href="#_2-2-rn检测平台" aria-hidden="true">#</a> 2.2 RN检测平台</h3><p><code>Platform.OS</code>在 iOS 上会返回 <code>ios</code>，而在 Android 设备或模拟器上则会返回 <code>android</code>。</p><p>Platform.select()，它可以以 Platform.OS 为 key，从传入的对象中返回对应平台的值</p><p>当不同平台的代码逻辑较为复杂时，最好是放到不同的文件里，这时候我们可以使用<strong>特定平台后缀</strong>。去掉平台后缀直接引用</p><h3 id="_2-3-rn优点和缺点" tabindex="-1"><a class="header-anchor" href="#_2-3-rn优点和缺点" aria-hidden="true">#</a> 2.3 RN优点和缺点</h3><p>优点：</p><p>1：性能方面媲美原生App。</p><p>2：绝大部分代码同时适用IOS/Android，一套代码两系统适用。</p><p>3：使用Javascript编码，上手容易。</p><p>4：组件式开发，易于管理维护，代码复用率高。</p><p>5：代码更改后会自动刷新，节省等待时间。</p><p>6：支持热更新，更新无需重新安装App。</p><p>缺点：</p><p>1：编程方面， <code>ios</code>和 <code>android</code>代码并非通用，有可能需要维护两套代码或者在代码中做一些条件判断或编译；</p><p>2：开发复杂应用必须精通原生开发，开发效率并不比原生开发的熟手快</p><p>3：性能方面也无法媲美原生。</p><h3 id="_2-4-调用setstate之后发生了什么" tabindex="-1"><a class="header-anchor" href="#_2-4-调用setstate之后发生了什么" aria-hidden="true">#</a> 2.4 调用setState之后发生了什么？</h3><p>1：将传入的参数对象与当前的状态合并，然后触发调和过程。</p><p>2：在调和过程中react会根据新的状态以相对高效的方式构建react元素树。</p><p>3：react会对新旧元素树进行diff算法计算出差异，然后根据差异进行最小化渲染。</p><h3 id="_2-5-js如何与原生相互调用" tabindex="-1"><a class="header-anchor" href="#_2-5-js如何与原生相互调用" aria-hidden="true">#</a> 2.5 JS如何与原生相互调用</h3><p>JS调用原生方法：</p><ul><li><p>第一种：和原生约定好，通过原生劫持JS发出的请求进行原生调用。</p></li><li><p>第二种：webView添加要调用的原生方法接口，直接调用。（使用 <strong><code>注入 API</code></strong> 的方式）</p><p><img src="https://upload-images.jianshu.io/upload_images/16021827-735ac5d1a2b442db.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" loading="lazy"></p></li><li><p>第三种：利用第三方库实现，如Andriod第三方库 JSBridge。安全便捷。</p></li></ul><p>原生调用js</p><ul><li><p>第一种：直接使用webView.evaluateJavacript()实现。（直接执行拼接好的 <code>JavaScript</code> 代码即可。）</p><p><img src="https://upload-images.jianshu.io/upload_images/16021827-e1957f6297e0b0e0.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" loading="lazy"></p></li><li><p>第二种：利用三方库，如JSBridge来实现。</p></li></ul><h3 id="_2-6-rn缓存用的是什么" tabindex="-1"><a class="header-anchor" href="#_2-6-rn缓存用的是什么" aria-hidden="true">#</a> 2.6 RN缓存用的是什么</h3><p>AsyncStorage 它是一个简单的、<strong>异步的</strong>、持久化的键值对存储系统，它对于App来说是全局的。可以用来<strong>替代LocalStorage</strong>。</p><p>在IOS上，AsyncStorage 在原生端的实现是把较小值存放在<strong>序列化的字典中</strong>，而把较大值写入单独的<strong>文件</strong>。</p><p>在Android上，AsyncStorage会尝试使用<strong>RocksDB,或退而选择SQLite</strong>。</p><h3 id="_2-7-bundle-加载机制" tabindex="-1"><a class="header-anchor" href="#_2-7-bundle-加载机制" aria-hidden="true">#</a> 2.7 bundle 加载机制</h3><p>在编写业务逻辑的时候，我们会有许多个js文件，打包的时候RN会将这些个js文件打包成一个叫index.android.bundle(ios的是index.ios.bundle)的文件，所有的js代码(包括rn源代码、第三方库、业务逻辑代码)都在这一个文件里，启动App时会第一时间加载bundle文件，所以脚本热更新要做的事情就是替换掉这个bundle文件。</p><h3 id="_2-8-webview" tabindex="-1"><a class="header-anchor" href="#_2-8-webview" aria-hidden="true">#</a> 2.8 webview</h3><p><strong>Webview 是一个基于webkit的引擎，可以解析DOM 元素，展示html页面。</strong> 手机系统层面，如果没有webview支持，是无法展示html页面。</p><p><strong>执行过程：</strong> 一个原生应用调用html页面过程中使用webview进行渲染展示。有时候可能还需要交互，比如html界面的按钮需要调用系统原生的api（比如：拍照，系统的文件，相册之类的）。原生端就负责维护html调用的接口，然后按照需要返回（原生端充当一个server的角色，html充当一个client角色）。</p><p><strong>好处：</strong> 促使RN、flutter等跨端技术的发展。通过webview方式的页面则只需要修改html代码或者js文件（如果是从服务器端获取，只要新的文件部署完成），用户重新刷新就可以使用更新后的，<strong>无需通过下载安装</strong>的方式完成升级。</p><h2 id="_3-微前端沙箱-见微前端专题" tabindex="-1"><a class="header-anchor" href="#_3-微前端沙箱-见微前端专题" aria-hidden="true">#</a> 3. 微前端沙箱（见微前端专题）</h2><h2 id="_4-栈内存比堆快" tabindex="-1"><a class="header-anchor" href="#_4-栈内存比堆快" aria-hidden="true">#</a> 4. 栈内存比堆快</h2><ul><li><strong>申请速度快</strong>：栈是程序运行前就已经分配好的空间（编译时分配空间），所以运行时分配几乎不需要时间。堆是运行时<strong>malloc动态分配的</strong>，<strong>动态分配的速度不仅与分配算法有关，还与机器运行速度有关</strong>。 且malloc还需要动态的回收垃圾空间，一定程度上影响运行速度</li><li><strong>存储寻址速度快</strong>：栈的<strong>物理地址空间是连续的</strong>，而堆未必，查找堆的链表也会耗费较多时间，所以存储寻址速度慢。</li><li><strong>CPU硬件操作速度快</strong>：cpu有专门的寄存器(<strong>rsp</strong>，<strong>rbp</strong>）来操作栈，堆是使用间接寻址的，所以栈快。</li></ul><p><strong>栈的地址空间必须连续</strong>，如果任其任意成长，会给内存管理带来困难。对于<strong>多线程程序</strong>来说，<strong>每个线程都必须分配一个栈，因此没办法让默认值太大。</strong></p><h2 id="_5-java和js类继承的区别" tabindex="-1"><a class="header-anchor" href="#_5-java和js类继承的区别" aria-hidden="true">#</a> 5. Java和JS类继承的区别</h2><p>继承是面向对象软件技术的一个概念</p><h3 id="_5-1-java继承机制" tabindex="-1"><a class="header-anchor" href="#_5-1-java继承机制" aria-hidden="true">#</a> 5.1 java继承机制</h3><p>java里的类不能多重继承，如果一个类一旦继承了它的父类，那么它就别想再继承别的类。</p><p>使用 Java 或 c#等面向对象编程语言开发时 ，实现类的继承都通过关键字 extends 实现继承关系。</p><h3 id="_5-2-js继承" tabindex="-1"><a class="header-anchor" href="#_5-2-js继承" aria-hidden="true">#</a> 5.2 js继承</h3><p>JavaScript 发生继承关系后，我们访问一个对象属性时，它会在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依次层层向上搜索，直到搜索到名字匹配的属性。</p><p>通过extends 对子构造函数.prototype = new 父构造函数，这样进行底层封装处理了</p><h2 id="_6-框架中对ssr渲染的实现" tabindex="-1"><a class="header-anchor" href="#_6-框架中对ssr渲染的实现" aria-hidden="true">#</a> 6. 框架中对SSR渲染的实现</h2><p>针对于多页面应用，MPA。</p><ul><li>每个页面都有head，SEO好；</li><li>每个页面都是服务器渲染，稳定性好，首屏渲染好。不像spa，需要加载js脚本，阻塞渲染。</li><li>浏览器直接解析css来绘制ui，不是通过js。渲染快。</li><li>但是每一次跳转都要重新请求服务器，刷新ui，可能会有一瞬间的白屏。服务器压力也大。</li><li>React: Next.js</li><li>Vue: Nuxt.js</li></ul><h3 id="_6-1-ssr优劣与应用场景" tabindex="-1"><a class="header-anchor" href="#_6-1-ssr优劣与应用场景" aria-hidden="true">#</a> 6.1 SSR优劣与应用场景</h3><p>使用的应用场景：</p><ul><li><strong>SEO</strong> 对应用程序至关重要，但你的页面又是异步请求数据时（数据同步的）</li><li><strong>首屏渲染</strong>时间转化率对应用程序至关重要时（传统 SPA 需完整的 JS 下载完成才可执行，而SSR 服务器渲染标记在服务端渲染 html 后即可显示）</li></ul><p>不适用的场景：</p><p>结合 Vue 的钩子来说，能在 SSR 中调用的生命周期只有 <strong>beforeCreate</strong> 和 <strong>created</strong>。在三方库的引用时需要特殊处理使其支持服务端和客户端都可运行。</p><p>劣势在于运行环境单一。程序需处于 <strong>node.js server</strong> 运行环境</p><p>高流量场景需服务端进行采取缓存策略。应用<strong>代码需在双端运行解析</strong>，cpu 性能消耗更大，<strong>负载均衡和多场景缓存处理比 SPA 做更多准备</strong>。</p><h3 id="_6-2-vuessr" tabindex="-1"><a class="header-anchor" href="#_6-2-vuessr" aria-hidden="true">#</a> 6.2 VueSSR</h3><h3 id="_6-3-reactssr" tabindex="-1"><a class="header-anchor" href="#_6-3-reactssr" aria-hidden="true">#</a> 6.3 ReactSSR</h3><p>简单的 <code>SSR</code> 其实实现很简单，只需要在服务端导入要渲染的组件，然后调用 <code>react-dom/server</code> 包中提供的 <code>renderToString</code> 方法将该组件的渲染内容输出为字符串后返回客户端即可。</p><ul><li><p><code>React</code> 中的 <code>SSR</code> 可以通过 <strong>renderToString</strong>来实现，但是只能<strong>输出静态内容</strong>，要让页面<strong>支持交互</strong>需要搭配 <strong>hydrate</strong>使用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 服务端输出</span>
<span class="token keyword">const</span> ServerApp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../../dist/ServerApp.js&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> AppString <span class="token operator">=</span> ReactDOMServer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>ServerApp<span class="token punctuation">)</span>

<span class="token comment">// 客户端接入,在服务端写的：</span>
<span class="token keyword">const</span> htmlTemplate <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;客户端模板地址&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> newHtml <span class="token operator">=</span> htmlTemplate<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;!--app--&gt;&#39;</span><span class="token punctuation">,</span>AppString<span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">&#39;../../dist/bundle.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 托管静态文件</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>newHtml<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>实现 <code>SSR</code> 时服务端需要支持 <code>jsx</code> 语法的解析，因为服务端也需要读取组件。</p></li><li><p><code>hydrate</code> 会检查服务端与客户端的内容是否匹配。</p></li><li><p>要实现<strong>动态数据</strong>需要在客户端与服务端之间做好如何使用<strong>初始 props 的约定</strong>。</p></li></ul><h2 id="_7-service-worker-离线存储" tabindex="-1"><a class="header-anchor" href="#_7-service-worker-离线存储" aria-hidden="true">#</a> 7. service worker（离线存储）</h2><p>一个介于客户端和服务器之间的一个代理服务器。在 Service Worker 中我们可以拦截客户端的请求、向客户端发送消息、向服务器发起请求等等，其中最重要的作用之一就是离线资源缓存。Service Worker 可以使你的应用先访问本地缓存资源，包括js、css、png、json等多种静态资源。</p><ul><li>独立于主JavaScript线程（这就意味着它的运行丝毫不会影响我们主进程的加载性能），基于webworker，增加了离线缓存。</li><li>cacheStorage 接口表示 Cache 对象的储存，配合 service worker 来实现资源的缓存</li><li>设计完全异步,大量使用Promise（因为通常Service Worker通常会等待响应后继续，Promise再合适不过了）</li><li>不能访问DOM，不能使用XHR和localStorage，但能访问indexDB</li><li>Service Worker只能由HTTPS承载(出于安全考虑)</li></ul><h2 id="_8-渐进式pwa-通过某种方式达到离线使用" tabindex="-1"><a class="header-anchor" href="#_8-渐进式pwa-通过某种方式达到离线使用" aria-hidden="true">#</a> 8. 渐进式pwa（通过某种方式达到离线使用）</h2><p>它只是一个运行在浏览器上且使用了一些增强特性的普通网站</p><ul><li>安装到你的手机桌面上（manifest.json中配置标题，图表等）</li><li>离线访问（service worker）</li><li>使用摄像头</li><li>通知推送</li><li>后台同步</li></ul><h2 id="_9-canvas绘图和dom绘图" tabindex="-1"><a class="header-anchor" href="#_9-canvas绘图和dom绘图" aria-hidden="true">#</a> 9. canvas绘图和dom绘图</h2><ul><li>dom采用的是<strong>驻留模式</strong>，所谓驻留模式可以简单理解为，将一系列的简单（因而dom的布局）的api(html, css, js)等转化为存储在内存中的复杂的模型，这个模型指导绘图指令进行绘制。当使用的DOM元素越多，对内存的消耗也就越大，性能越差。</li><li>canvas采用<strong>快速模式</strong>，程序员需要使用API直接调用绘图指令，并且需要关心绘图模型，刷新频率等。快速模式很快速，并且灵活，但是相对于驻留模式需要关注的更多。canvas在操作方面比dom要差，只能给整个dom添加事件，并且只能通过脚本来操作。适合像素处理，动态渲染和大数据量，小面积的绘制。canvas绘制的图形都是一个一个像素点构成的。</li><li>SVG是一套独立的矢量图形语言，相比canvas 更方便做动态交互，因为svg是基于矢量的，因此放大缩小不会产生锯齿或者模糊，适合用来做高保真的图。与canvas相反，svg可以使用脚本和css来控制，适合少数量，大面积的图形绘制。相对于canvas， svg的技术更加成熟。</li></ul><h2 id="_10-垃圾回收" tabindex="-1"><a class="header-anchor" href="#_10-垃圾回收" aria-hidden="true">#</a> 10. 垃圾回收</h2><p>v8引擎内存限制：</p><p>在Javascript中，当我们创建变量时，系统会给对象进行<strong>自动分配</strong>对应的内存空间以及闲置资源回收。</p><p>简单数据类型内存在栈内存中，引用数据类型内存在堆内存中。</p><p>回收策略（2种）：</p><ol><li><p><strong>标记清除</strong></p><p>遍历堆内存上所有对象，打上标记。代码执行后，所有使用过的变量取消标记。在清除阶段清空所有还有标记的变量。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cae628622e794fcdaba8012668c44385~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="未命名文件 (5).png" loading="lazy"></p><p>优点：简单；缺点：未清理的变量位置不变，会导致内存碎片化，影响存储较大内存的变量。可进行<strong>标记整理算法</strong>解决碎片化问题</p></li><li><p><strong>引用计数</strong>（不常用）</p><p>对每个值都记录其的引用次数。变量声明并赋值+1；变量被其他变量引用+1；其他变量的引用换成其他-1；变量为null-1；引用次数为0则被清空。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 	<span class="token comment">// 此对象的引用计数为 1（a引用）</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> a 		<span class="token comment">// 此对象的引用计数是 2（a,b引用）</span>
a <span class="token operator">=</span> <span class="token keyword">null</span>  		<span class="token comment">// 此对象的引用计数为 1（b引用）</span>
b <span class="token operator">=</span> <span class="token keyword">null</span> 	 	<span class="token comment">// 此对象的引用计数为 0（无引用）</span>
<span class="token operator">...</span>			<span class="token comment">// GC 回收此对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>分代式垃圾回收</p><p>大多数浏览器都是基于标记清除算法，频率具有差异。V8 中对垃圾回收机制的优化。V8 的垃圾回收策略主要基于分代式垃圾回收机制，<strong>V8 中将堆内存分为新生代和老生代两区域，</strong> 采用不同的垃圾回收器也就是不同的策略管理垃圾回收。</p></li></ol><p><strong>新生代内存回收</strong></p><p>新生代的对象为存活时间较短的对象，简单来说就是新产生的对象，通常只支持 1～8M 的容量。</p><p>在64操作系统下分配为32MB。Scavenge 算法：将新生代内存进行一分为二，正在被使用的内存空间称为使用区，而限制状态的内存空间称为空闲区。</p><ul><li>新加入的对象都会存放在使用区，当使用区快写满时就进行一次垃圾清理操作。</li><li>在开始进行垃圾回收时，新生代回收器会对使用区内的对象进行标记</li><li>标记完成后，需要对<strong>使用区内的活动对象拷贝到空闲区</strong>进行排序</li><li>而后进入垃圾清理阶段，将<strong>非活动对象</strong>占用的内存空间进行清理</li><li>最后对<strong>使用区和空闲区进行交换</strong>，使用区-&gt;空闲区，空闲区-&gt;使用区</li><li>新生代中的变量如果经过回收之后依然一直存在（经历过一次Scavenge算法回收），那么会放入到老生代内存中。</li></ul><p><strong>老生代内存回收</strong></p><p>老生代的对象为存活事件较长或常驻内存的对象，简单来说就是经历过新生代垃圾回收后还存活下来的对象，容量通常比较大。</p><p>大内存的老生代：Mark-Sweep（标记清除）和Mark-Compact（标记整理）的策略</p><p>标记阶段：递归遍历这组根元素，遍历过程中能到达的元素称为活动对象，没有到达的元素就可以判断为非活动对象。</p><p>清除阶段：直接将非活动对象，也就是数据清理掉</p><p>整理阶段：标记整理策略进行优化内存碎片</p>`,95),r=[o];function l(i,p){return e(),a("div",null,r)}const g=t(s,[["render",l],["__file","DingDing1.html.vue"]]);export{g as default};
