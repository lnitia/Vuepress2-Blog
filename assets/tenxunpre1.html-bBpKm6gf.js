import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as p}from"./app-0mkQjek1.js";const e="/assets/1722851291285-nSlRVd88.png",t={},o=p(`<h1 id="腾讯一面" tabindex="-1"><a class="header-anchor" href="#腾讯一面" aria-hidden="true">#</a> 腾讯一面</h1><h2 id="手写代码题" tabindex="-1"><a class="header-anchor" href="#手写代码题" aria-hidden="true">#</a> 手写代码题</h2><ol><li>实现下面的字符串格式化函数format(String, Object)，避免出现XSS</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innnerHTML <span class="token operator">=</span> <span class="token function">format</span><span class="token punctuation">(</span>
    <span class="token string">&#39;&lt;div&gt;I am {name}, my website is &lt;a herf={&quot;website&quot;}&gt;{website}&lt;/a&gt;!&lt;/div&gt;&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;jams&#39;</span>
    <span class="token literal-property property">website</span><span class="token operator">:</span><span class="token string">&#39;[http://www.qq.com](http://www.qq.com/)&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//HTML转义防止XSS攻击</span>
<span class="token keyword">function</span> <span class="token function">escapeHTML</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[&amp;&lt;&gt;&quot;&#39;\`=\\/]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;&amp;&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&amp;&#39;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;&lt;&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&lt;&#39;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;&gt;&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&gt;&#39;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;&quot;&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&quot;&#39;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;&#39;&quot;</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>&#39;<span class="token punctuation">,</span>
      <span class="token string-property property">&#39;/&#39;</span><span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;\`&#39;</span><span class="token operator">:</span> <span class="token string">&#39;\`&#39;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;=&#39;</span><span class="token operator">:</span> <span class="token string">&#39;=&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//回调函数，在每次匹配到字符时调用，s为匹配到的字符</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token parameter">template<span class="token punctuation">,</span> replacements</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\[(.*?)\\]\\((.*?)\\)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> match <span class="token operator">=</span> regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>replacements<span class="token punctuation">.</span>website<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>match<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> firstPart <span class="token operator">=</span> match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> secondPart <span class="token operator">=</span> match<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> result <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">{(\\w+)}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;website&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        counter<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> counter <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> firstPart <span class="token operator">:</span> secondPart<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> replacements<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">||</span> match<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">escapeHTML</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">escapeHTML</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>函数柯里化</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">num:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span> <span class="token comment">//num:15</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 初始总和</span>
  <span class="token keyword">let</span> sum <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> curr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">+</span> curr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">innerFunction</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>innerArgs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 每次调用innerFunction都增加sum</span>
    sum <span class="token operator">+=</span> innerArgs<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> curr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">+</span> curr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> innerFunction<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 重写innerFunction的toString方法，console.log 在最终需要字符串时，会调用 innerFunction.toString，从而返回当前的总和</span>
  innerFunction<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> innerFunction<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">num:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>编写一个方法实现以下输入输出</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//输入：</span>
arr<span class="token punctuation">{</span>
<span class="token punctuation">[</span>id<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span>教师<span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">pid</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span>id<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span>教师<span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">pid</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span>id<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span>教师<span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">pid</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span>id<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span>教师<span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">pid</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span>id<span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span>教师<span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">pid</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token comment">//输出：</span>
<span class="token punctuation">{</span>
<span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">1</span>
<span class="token literal-property property">name</span><span class="token operator">:</span>教师<span class="token number">1</span>
<span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">{</span>
<span class="token punctuation">{</span>
<span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">2</span>
<span class="token literal-property property">name</span><span class="token operator">:</span>教师<span class="token number">2</span>
<span class="token punctuation">}</span>
<span class="token punctuation">{</span>
<span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">3</span>
<span class="token literal-property property">name</span><span class="token operator">:</span>教师<span class="token number">3</span>
<span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">{</span>
<span class="token punctuation">{</span>
<span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">4</span>
<span class="token literal-property property">name</span><span class="token operator">:</span>教师<span class="token number">4</span>
<span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">{</span>
<span class="token punctuation">{</span>
<span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">5</span>
<span class="token literal-property property">name</span><span class="token operator">:</span>教师<span class="token number">5</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="cors跨域" tabindex="-1"><a class="header-anchor" href="#cors跨域" aria-hidden="true">#</a> cors跨域</h2><p>原因：同源策略，必须要协议、域名、端口都相同才能进行资源存取</p><p>CORS解决跨域方法：后端工程师在服务器端做 CORS 请求头的设定</p><p>分为简单请求（get、post、head）和非简单请求（除简单请求以外的其他请求先发送预检请求OPTIONS，满足条件后再发送CORS请求）</p><ol><li><code>Access-control-allow-origin</code>：设置允许跨域请求的源，要么是请求时 <code>Origin</code>字段的值，要么是*</li><li><code>Access-control-allow-credentials：true</code> // 允许跨域发送cookie，此时origin不能设置为*</li><li><code>Access-Control-Allow-Methods: GET, POST, PUT </code> // 服务器支持的所有跨域请求的方法，对应 <code>Access-Control-Request-Method</code></li><li><code>Access-Control-Allow-Headers: X-Custom-Header</code> // 服务器所支持的所有头信息字段，对应 <code>Access-Control-Request-Headers</code>对应 <code>Access-Control-Request-Header</code></li><li><code>Access-Control-Max-Age</code> // 指定本次预检请求的有效期，单位为秒</li></ol><h2 id="unity和网页端视频流如何传输" tabindex="-1"><a class="header-anchor" href="#unity和网页端视频流如何传输" aria-hidden="true">#</a> unity和网页端视频流如何传输</h2><p>视频流获取：Unity 使用VideoStreamSender组件来获取视频流的源，即 camera 中渲染的画面，并进行编解码、分辨率等的设置</p><p>webRTC连接：通过 Signaling 信令服务器(基于websocket，可选其他方式)与网页端进行连接和通信。</p><ol><li>为通话的每一端创建一个 <code> RTCPeerConnection</code>对象(对等体)，并在每一端添加各自的本地流。</li><li>交换网络信息：寻找候选者，即使用ICE框架寻找网络接口和端口，潜在的连接端点被称为 <code>ICECandidate</code>，当收到候选消息时，调用 <code>addIceCandidate()</code>，将候选添加到远程对等方描述</li><li>交换本地和远程描述：通过RTCPeerConnection <code>createOffer()</code>、<code>createAnswer()</code>方法交换数据。包括 SDP（Session Description Protocol，会话描述协议）交换，用于协商视频编解码器、数据通道等参数。</li></ol><p>视频流传输：通过 RTCPeerConnection 的 <code>DataChannel</code>进行视频流传输</p><p>网页端渲染：将视频流嵌入在 HTML 的 <code>video</code> 标签中进行实时展示</p><p>交互：网页端通过 <code>RTCDataChannel (api)</code> 传输数据，反向发送控制指令回到 Unity 端</p><p>webRTC特点：</p><ol><li>实时通信</li><li>点对点连接，通过最直接的路径进行连接。WebRTC API 使用 STUN 服务器获取计算机的 IP 地址，并使用 TURN 服务器在点对点通信失败时充当中继服务器。</li><li>安全：所有 WebRTC 组件都必须加密，并且其 JavaScript API 只能从安全来源（HTTPS 或本地主机）使用</li></ol><p><img src="`+e+'" alt="1722851291285" loading="lazy"></p><h2 id="介绍最近的项目具体内容" tabindex="-1"><a class="header-anchor" href="#介绍最近的项目具体内容" aria-hidden="true">#</a> 介绍最近的项目具体内容</h2>',26),c=[o];function l(i,r){return s(),a("div",null,c)}const d=n(t,[["render",l],["__file","tenxunpre1.html.vue"]]);export{d as default};
