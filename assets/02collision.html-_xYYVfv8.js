import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as p,c as o,a as n,b as s,d as c,f as i}from"./app-0mkQjek1.js";const l={},u=n("h1",{id:"解决mesh-collider导致的hololens卡顿问题方法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#解决mesh-collider导致的hololens卡顿问题方法","aria-hidden":"true"},"#"),s(),n("strong",null,"解决mesh collider导致的hololens卡顿问题方法")],-1),r=n("h3",{id:"碰撞体分离",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#碰撞体分离","aria-hidden":"true"},"#"),s(" 碰撞体分离")],-1),d=n("p",null,"方法",-1),k={href:"https://github.com/Unity-Technologies/VHACD",target:"_blank",rel:"noopener noreferrer"},m=i(`<p>插件Easy Collider Editor内含VHACD功能</p><p>测试结果</p><p>使用该功能可以将物体自动分成多个凸面体，可以用于不追求碰撞精度的场合，但在检测两零部件是否发生碰撞上不适用</p><h2 id="使用物理层级" tabindex="-1"><a class="header-anchor" href="#使用物理层级" aria-hidden="true">#</a> 使用物理层级</h2><p>通过使用物理层级（Physics Layer）和物理层级过滤器，可以控制哪些物体之间进行碰撞检测。通过将不必要的物体排除在碰撞检测之外，可以减少计算量并提高性能。</p><p>（即将部件放在不同的layer中，用代码控制两layer间是否要发生碰撞）</p><h2 id="使用异步计算" tabindex="-1"><a class="header-anchor" href="#使用异步计算" aria-hidden="true">#</a> 使用异步计算</h2><p>将复杂的碰撞检测操作放在异步线程中进行计算，以充分利用HoloLens的多线程处理能力，避免阻塞主线程。（使用Task.Run方法）</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">//异步检测碰撞示例代码</span>
<span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CollisionDetection</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 在异步线程中执行碰撞检测操作</span>
        Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 执行复杂的碰撞检测操作</span>
            <span class="token function">PerformComplexCollisionDetection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ContinueWith</span><span class="token punctuation">(</span>task <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 异步线程完成后的回调</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">.</span>IsFaulted<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                Debug<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span><span class="token string">&quot;碰撞检测操作出现错误：&quot;</span> <span class="token operator">+</span> task<span class="token punctuation">.</span>Exception<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">.</span>IsCompleted<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">&quot;碰撞检测操作已完成&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 处理异步线程的计算结果</span>
                <span class="token function">ProcessCollisionResults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PerformComplexCollisionDetection</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 在这里执行复杂的碰撞检测操作</span>
        <span class="token comment">// 例如，使用迭代、算法或数学计算进行高级碰撞检测</span>
    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ProcessCollisionResults</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 处理碰撞检测操作的结果</span>
        <span class="token comment">// 例如，根据检测到的碰撞进行相应的逻辑处理或触发事件</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="分层级" tabindex="-1"><a class="header-anchor" href="#分层级" aria-hidden="true">#</a> 分层级</h2><p>broad phase（粗筛可能产生碰撞的碰撞对）→narrow phase（检测粗筛的碰撞对是否有真实的碰撞）</p><p>1）八叉树（物体会移动的情况下，有一种对八叉树结点进行编码的方法可以高效的进行结点调整）</p><p>2）层次包围盒BVH</p>`,13);function v(h,b){const a=t("ExternalLinkIcon");return p(),o("div",null,[u,r,d,n("p",null,[s("unity官方提供VHACD以将复杂物体分成一组凸面体，参见"),n("a",k,[s("https://github.com/Unity-Technologies/VHACD"),c(a)])]),m])}const _=e(l,[["render",v],["__file","02collision.html.vue"]]);export{_ as default};
