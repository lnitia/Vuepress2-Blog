import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as c,c as i,a as n,b as s,d as e,f as t}from"./app-0SoiKzJB.js";const l="/assets/1724063251262-srgmJbbq.png",r={},u=t(`<h1 id="蔚来一面" tabindex="-1"><a class="header-anchor" href="#蔚来一面" aria-hidden="true">#</a> 蔚来一面</h1><h2 id="_1-自我介绍" tabindex="-1"><a class="header-anchor" href="#_1-自我介绍" aria-hidden="true">#</a> 1 自我介绍</h2><h2 id="_2-描述青岛项目创建、开发、部署全过程" tabindex="-1"><a class="header-anchor" href="#_2-描述青岛项目创建、开发、部署全过程" aria-hidden="true">#</a> 2 描述青岛项目创建、开发、部署全过程</h2><p>项目创建：</p><ul><li>确定技术栈：react（对js要求更高）+umi（多终端自适应）+ant-design（适配react）</li><li>环境准备：node，yarn管理npm依赖</li><li>创建项目：yarn create @umijs/umi-app</li><li>配置文件：config.ts基于umi官方文档配置，配置路由（根据src/pages目录下的文件结构自动生成路由配置）、baseurl、publicPath等</li></ul><p>内容开发：</p><ul><li>组件：antd</li><li>数据管理：dva(基于 Redux 的轻量级状态管理框架)</li><li>请求：useRequest(基于axios和ahooks(react的hooks库))，在请求拦截器中添加 <code>authorization</code> 头部，从 <code>sessionStorage</code> 中获取token。</li><li>二维轨道：fabric.js</li><li>三维模型：three.js</li><li>unity画面：unity render streaming</li></ul><p>打包部署：</p><ul><li>umi build（基于webpack）输出dist文件夹</li></ul><h2 id="_3-二维轨道展示开发过程" tabindex="-1"><a class="header-anchor" href="#_3-二维轨道展示开发过程" aria-hidden="true">#</a> 3 二维轨道展示开发过程</h2><ol><li><code>data.d.ts</code>：轨道数据结构、类型定义</li><li><code>models/track.ts</code>：全局数据管理：useTrack中通过useState声明全局状态track，定义saveTrack方法</li><li><code>index.tsx</code>：PageContainer 和 ProCard 进行页面布局，useEffect 实现项目ID变化时获取新的轨道数据</li><li><code>components/</code>：平断面、纵断面的参数设置表组件设置：EditableProTable组件中，rowKey定义每行数据的key；columns属性进行表格列配置，title定义表头，dataIndex对应数据，以及一些表格列属性，包括对齐方式、值类型和表单项的验证规则；value属性为表格数据源；onChange属性设定数据源变化时的回调函数，即将更新的数据存入全局变量</li><li><code>components/</code>：轨道预览组件设置：fabric.Canvas创建画布，fabric.line画线</li><li><code>@/utils/canvas</code>：图像自动缩放居中，<code>objects[i].getBoundingRect()</code>获取图像边界，<code>canvas.absolutePan({ x:panX, y:panY })</code>平移，<code>canvas.zoomToPoint(zoomPoint, zoom)</code>缩放</li><li><code>service.ts</code>：获取数据请求</li></ol><h2 id="_4-二维轨道展示页面布局" tabindex="-1"><a class="header-anchor" href="#_4-二维轨道展示页面布局" aria-hidden="true">#</a> 4 二维轨道展示页面布局</h2><p>flex布局</p><p>父ProCard组件设置拆分卡片方式： <code>split={&#39;vertical&#39;}</code>，套两个子ProCard</p><h2 id="_5-简述flex的使用方法" tabindex="-1"><a class="header-anchor" href="#_5-简述flex的使用方法" aria-hidden="true">#</a> 5 简述flex的使用方法</h2><p>父元素：</p><ul><li><code>display: flex</code></li><li>换行：<code>flex-wrap: wrap</code></li><li>主轴方向：<code>flex-direction: row/column</code></li><li>简写：<code>flex-flow: row wrap</code></li><li>对齐设置：<code>align-items</code>、<code>justify-content</code></li></ul><p>子元素：</p><ul><li><code>flex: flex-grow flex-shrink flex-basis</code></li><li><code>flex: 1</code> 相当于 <code>flex: 1 1 0</code></li><li><code>flex: auto</code> 相当于 <code>flex: 1 1 auto</code></li><li><code>flex: none</code> 相当于 <code>flex: 0 0 auto</code>，元素不可伸缩</li><li>位置调整：<code>align-self</code>，默认继承父元素的<code>align-items</code></li></ul><h2 id="_6-用fabric如何绘制直线和曲线" tabindex="-1"><a class="header-anchor" href="#_6-用fabric如何绘制直线和曲线" aria-hidden="true">#</a> 6 用fabric如何绘制直线和曲线</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token comment">//画线段</span>
<span class="token keyword">const</span> <span class="token function-variable function">drawLine</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">startPoint</span><span class="token operator">:</span> Vector2<span class="token punctuation">,</span>
  <span class="token literal-property property">endPoint</span><span class="token operator">:</span> Vector2<span class="token punctuation">,</span>
  <span class="token literal-property property">canvas</span><span class="token operator">:</span> fabric<span class="token punctuation">.</span>Canvas</span>
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> line <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">fabric<span class="token punctuation">.</span>Line</span><span class="token punctuation">(</span>
    <span class="token punctuation">[</span>startPoint<span class="token punctuation">.</span>x<span class="token punctuation">,</span> startPoint<span class="token punctuation">.</span>y<span class="token punctuation">,</span> endPoint<span class="token punctuation">.</span>x<span class="token punctuation">,</span> endPoint<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">fill</span><span class="token operator">:</span> <span class="token string">&#39;black&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">stroke</span><span class="token operator">:</span> <span class="token string">&#39;black&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">strokeWidth</span><span class="token operator">:</span> <span class="token constant">STROKE_WIDTH</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  canvas<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
 <span class="token comment">//画圆形</span>
  <span class="token keyword">const</span> circle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">fabric<span class="token punctuation">.</span>Circle</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
    <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
    <span class="token literal-property property">radius</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token comment">// 圆的半径 50</span>
    <span class="token literal-property property">fill</span><span class="token operator">:</span> <span class="token string">&#39;green&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-如何从左侧获取输入数据给fabric对象" tabindex="-1"><a class="header-anchor" href="#_7-如何从左侧获取输入数据给fabric对象" aria-hidden="true">#</a> 7 如何从左侧获取输入数据给fabric对象</h2><p>useModel获取全局状态，EditableProTable组件中输入数据，onChange事件将数据存入全局变量，触发全局状态更新，通过useEffect函数使相关组件重新渲染</p><p>umi数据管理：</p><ul><li>通过 dva 进行数据管理和状态共享，它是一个基于 Redux 的轻量级状态管理框架</li><li>它约定在src/model文件夹中的文件为model文件。每个文件需要默认导出一个 function，该 function 定义了一个 Hook。就是自定义 <code>hooks</code> 模块。</li><li><code>@umijs/plugin-model</code> 把自定义hook里的状态变成了『全局状态』，多个组件中使用该 <code>model</code>文件时，拿到同一份状态，从而实现全局数据的管理。</li></ul><h2 id="_8-数据有做校验吗-怎么校验的" tabindex="-1"><a class="header-anchor" href="#_8-数据有做校验吗-怎么校验的" aria-hidden="true">#</a> 8 数据有做校验吗，怎么校验的</h2><ol><li>正则表达式，校验数字：/d</li><li>表单组件自带的验证规则定义：<code>type: &#39;number&#39;</code></li></ol><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">const</span> commonProps<span class="token operator">:</span> ProColumns <span class="token operator">=</span> <span class="token punctuation">{</span>
  align<span class="token operator">:</span> <span class="token string">&#39;center&#39;</span><span class="token punctuation">,</span>
  valueType<span class="token operator">:</span> <span class="token string">&#39;digit&#39;</span><span class="token punctuation">,</span>
  formItemProps<span class="token operator">:</span> <span class="token punctuation">{</span>
    rules<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        required<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        message<span class="token operator">:</span> <span class="token string">&#39;必填项&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        type<span class="token operator">:</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">,</span>
        message<span class="token operator">:</span> <span class="token string">&#39;请输入数字&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-正则的基本使用方法-match的返回值" tabindex="-1"><a class="header-anchor" href="#_9-正则的基本使用方法-match的返回值" aria-hidden="true">#</a> 9 正则的基本使用方法，match的返回值</h2>`,29),d=n("code",null,"RegExp",-1),k={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"exec",-1),v={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"test",-1),h={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"String",-1),g={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/match",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"match",-1),y={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"matchAll",-1),w={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"replace",-1),C={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/search",target:"_blank",rel:"noopener noreferrer"},T=n("code",null,"search",-1),S={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split",target:"_blank",rel:"noopener noreferrer"},P=n("code",null,"split",-1),z=t('<p><img src="'+l+`" alt="1724063251262" loading="lazy"></p><h2 id="_10-js基本数据类型" tabindex="-1"><a class="header-anchor" href="#_10-js基本数据类型" aria-hidden="true">#</a> 10 js基本数据类型</h2><h2 id="_11-遍历数组的方法" tabindex="-1"><a class="header-anchor" href="#_11-遍历数组的方法" aria-hidden="true">#</a> 11 遍历数组的方法</h2><p>基本方法：for、forEach、for...of(值)、for...in(键，不一定按顺序)</p><p>高阶函数：map、filter、find/findIndex、every/some、reduce</p><h2 id="_12-三维模型展示实现流程-threejs如何加载模型的object对象-拖拽旋转如何实现" tabindex="-1"><a class="header-anchor" href="#_12-三维模型展示实现流程-threejs如何加载模型的object对象-拖拽旋转如何实现" aria-hidden="true">#</a> 12 三维模型展示实现流程，threejs如何加载模型的object对象，拖拽旋转如何实现</h2><p>设置相机、光源和渲染器</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> scene <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Three<span class="token punctuation">.</span>Scene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//设置摄像机可视范围（为锥体），PerspectiveCamera（fov, aspect, near, far）:摄像机视锥体垂直视野j角度，长宽比，近端面，远端面</span>
<span class="token keyword">const</span> camera <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Three<span class="token punctuation">.</span>PerspectiveCamera</span><span class="token punctuation">(</span>
  <span class="token number">25</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerWidth <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span> <span class="token operator">/</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerHeight <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token number">0.1</span><span class="token punctuation">,</span>
  <span class="token number">1000</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
camera<span class="token punctuation">.</span>position<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
scene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>camera<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> light <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Three<span class="token punctuation">.</span>SpotLight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
scene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>light<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ambient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Three<span class="token punctuation">.</span>AmbientLight</span><span class="token punctuation">(</span><span class="token number">0xffffff</span><span class="token punctuation">,</span> <span class="token number">0.4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
scene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ambient<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> renderer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Three<span class="token punctuation">.</span>WebGLRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
renderer<span class="token punctuation">.</span><span class="token function">setClearColor</span><span class="token punctuation">(</span><span class="token number">0xffffff</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>模型加载：借助插件STLLoader</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">loadSTL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> objLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">STLLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      objLoader<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>stlurl<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">geometry</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> material <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Three<span class="token punctuation">.</span>MeshPhongMaterial</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token number">0xa0a0a0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mesh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Three<span class="token punctuation">.</span>Mesh</span><span class="token punctuation">(</span>geometry<span class="token punctuation">,</span> material<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mesh<span class="token punctuation">.</span>scale<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>scale<span class="token punctuation">,</span> props<span class="token punctuation">.</span>scale<span class="token punctuation">,</span> props<span class="token punctuation">.</span>scale<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mesh<span class="token punctuation">.</span><span class="token function">rotateY</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>rotateY<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mesh<span class="token punctuation">.</span><span class="token function">rotateX</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>rotateX<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mesh<span class="token punctuation">.</span><span class="token function">rotateZ</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>rotateZ<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mesh<span class="token punctuation">.</span>position<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>positionX<span class="token punctuation">,</span> props<span class="token punctuation">.</span>positionY<span class="token punctuation">,</span> props<span class="token punctuation">.</span>positionZ<span class="token punctuation">)</span><span class="token punctuation">;</span>
        scene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mesh<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>拖拽旋转功能：轨道控制插件OrbitControls</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//控制视角</span>
<span class="token keyword">const</span> controls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrbitControls</span><span class="token punctuation">(</span>camera<span class="token punctuation">,</span> renderer<span class="token punctuation">.</span>domElement<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//传入要控制的相机和监视的对象</span>
controls<span class="token punctuation">.</span>enableDamping <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//给控制器增加阻尼感,配合动画render()中加update（）</span>

<span class="token comment">// 每一帧都渲染，适用于改变视角后，重新渲染内容</span>
<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  controls<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  renderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>scene<span class="token punctuation">,</span> camera<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//渲染下一帧执行</span>
  <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>render<span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;12&#39;</span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>renderer<span class="token punctuation">.</span>domElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_13-antd基础组件中form组件、table组件如何使用-table表头如何声明" tabindex="-1"><a class="header-anchor" href="#_13-antd基础组件中form组件、table组件如何使用-table表头如何声明" aria-hidden="true">#</a> 13 antd基础组件中form组件、table组件如何使用，table表头如何声明</h2><ul><li>在使用Form组件时，需要使用 <code>Form.Item</code>来包裹每个表单项，并设置 <code>name</code>属性，以便在提交表单时获取表单数据。</li><li>在使用Table组件时，需要设置 <code>columns</code>和 <code>dataSource</code>属性，分别表示表格的列和数据。</li><li>可以使用 <code>Form.Item</code>的 <code>rules</code>属性来设置表单项的验证规则</li></ul><h2 id="_14-前端如何向后端发送网络通信" tabindex="-1"><a class="header-anchor" href="#_14-前端如何向后端发送网络通信" aria-hidden="true">#</a> 14 前端如何向后端发送网络通信</h2><p>axios</p><p>umi：<code>useRequest</code> 基于axios和ahooks(React的hooks库)，提供了一套统一的网络请求和错误处理方案</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">//获取轨道数据</span>
<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchTrackById</span><span class="token punctuation">(</span>
  id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  options<span class="token operator">?</span><span class="token operator">:</span> RequestOptionsInit
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>TrackDto<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/api/cttsim/tracks/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>options<span class="token punctuation">,</span>
    method<span class="token operator">:</span> <span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//上传轨道数据</span>
<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">updateTrack</span><span class="token punctuation">(</span>
  id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  data<span class="token operator">:</span> TrackCreateDto<span class="token punctuation">,</span>
  options<span class="token operator">?</span><span class="token operator">:</span> RequestOptionsInit
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/api/cttsim/tracks/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>options<span class="token punctuation">,</span>
    method<span class="token operator">:</span> <span class="token string">&#39;PUT&#39;</span><span class="token punctuation">,</span>
    data<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_15-git的基本用法有哪些" tabindex="-1"><a class="header-anchor" href="#_15-git的基本用法有哪些" aria-hidden="true">#</a> 15 git的基本用法有哪些</h2><h2 id="_16-typescript有什么用法-如何声明一个union-types-联合类型" tabindex="-1"><a class="header-anchor" href="#_16-typescript有什么用法-如何声明一个union-types-联合类型" aria-hidden="true">#</a> 16 typescript有什么用法，如何声明一个Union Types(联合类型)</h2><ol><li>类型声明</li><li>类型推断</li></ol><p>联合类型： <code>var val:string|number</code></p><p>交叉类型：<code>type B = A &amp; { bar: number }</code>，用于合成对象</p><h2 id="_17-手撕" tabindex="-1"><a class="header-anchor" href="#_17-手撕" aria-hidden="true">#</a> 17 手撕</h2><p>力扣 695.岛屿的最大面积 - 递归</p><h2 id="_18-js可以获取到鼠标哪些点击事件" tabindex="-1"><a class="header-anchor" href="#_18-js可以获取到鼠标哪些点击事件" aria-hidden="true">#</a> 18 js可以获取到鼠标哪些点击事件</h2><p>点击/双击：<code>click/dblclick</code></p><p>按下/释放：<code>mousedown/mouseup</code></p><p>移入/移出：<code>mouseover/mouseout</code></p><p>元素上移动：<code>mousemove</code></p><h2 id="_19-反问" tabindex="-1"><a class="header-anchor" href="#_19-反问" aria-hidden="true">#</a> 19 反问</h2><p>技术栈：react+ts+antd+threejs+高德地图</p><p>个人发展：10年，技术只是赚取劳务费</p><p>前端页面展示方向：web页面，汽车上的页面用unity或安卓原生等</p><p>建议：多具体实现项目</p>`,35);function R(E,L){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[s("正则表达式可以被用于 "),d,s(" 的 "),n("a",k,[m,e(a)]),s(" 和 "),n("a",v,[b,e(a)]),s(" 方法，以及 "),n("a",h,[f,e(a)]),s(" 的 "),n("a",g,[_,e(a)]),s("、"),n("a",y,[x,e(a)]),s("、"),n("a",w,[j,e(a)]),s("、"),n("a",C,[T,e(a)]),s(" 和 "),n("a",S,[P,e(a)]),s(" 方法")]),z])}const N=p(r,[["render",R],["__file","weilai.html.vue"]]);export{N as default};
