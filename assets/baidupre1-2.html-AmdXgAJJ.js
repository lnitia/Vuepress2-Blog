import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as t}from"./app-0mkQjek1.js";const e={},o=t(`<h1 id="百度一面-第二次" tabindex="-1"><a class="header-anchor" href="#百度一面-第二次" aria-hidden="true">#</a> 百度一面-第二次</h1><h2 id="_1-自我介绍" tabindex="-1"><a class="header-anchor" href="#_1-自我介绍" aria-hidden="true">#</a> 1 自我介绍</h2><h2 id="_2-介绍青岛项目" tabindex="-1"><a class="header-anchor" href="#_2-介绍青岛项目" aria-hidden="true">#</a> 2 介绍青岛项目</h2><h2 id="_3-threejs如何进行三维模型展示-有哪几种图形" tabindex="-1"><a class="header-anchor" href="#_3-threejs如何进行三维模型展示-有哪几种图形" aria-hidden="true">#</a> 3 threejs如何进行三维模型展示，有哪几种图形</h2><p><strong>three.js</strong> 是一个基于WebGL的JavaScript库，用于在网页中创建和展示三维图形。展示三维模型的基本步骤如下：</p><ol><li><strong>场景（Scene）</strong> : 创建一个场景对象（<code>THREE.Scene()</code>），这是所有三维元素的容器。</li><li><strong>相机（Camera）</strong> : 设置一个相机（通常使用 <code>THREE.PerspectiveCamera</code>），确定观察点、视角和可视范围。</li><li><strong>渲染器（Renderer）</strong> : 创建渲染器（<code>THREE.WebGLRenderer</code>），将场景和相机的组合渲染到屏幕上。</li><li><strong>灯光（Light）</strong> : 添加灯光，模拟现实世界中的光照效果（如 <code>THREE.AmbientLight</code>，<code>THREE.DirectionalLight</code>）。</li><li><strong>几何体（Geometry）</strong> : 使用内置的几何体（如立方体、球体、平面等），或加载外部3D模型文件（如 <code>.obj</code>，<code>.fbx</code>）。</li><li><strong>材质（Material）</strong> : 为几何体指定材质，控制表面外观（如颜色、纹理等）。</li><li><strong>动画（Animation）</strong> : 使用 <code>THREE.Clock</code>或 <code>requestAnimationFrame</code>来更新场景中的物体位置或状态。</li></ol><p><strong>常见的几何图形</strong> ：</p><ul><li><strong>立方体</strong> (<code>THREE.BoxGeometry</code>)</li><li><strong>球体</strong> (<code>THREE.SphereGeometry</code>)</li><li><strong>平面</strong> (<code>THREE.PlaneGeometry</code>)</li><li><strong>圆柱体</strong> (<code>THREE.CylinderGeometry</code>)</li><li><strong>锥体</strong> (<code>THREE.ConeGeometry</code>)</li><li><strong>环形</strong> (<code>THREE.TorusGeometry</code>)</li></ul><h2 id="_4-渲染时有页面卡住吗-如何进行优化的" tabindex="-1"><a class="header-anchor" href="#_4-渲染时有页面卡住吗-如何进行优化的" aria-hidden="true">#</a> 4 渲染时有页面卡住吗，如何进行优化的</h2><h2 id="_5-localstorage、sessionstorage、cookie的区别-什么时候会用cookie-如何设置cookie过期时间" tabindex="-1"><a class="header-anchor" href="#_5-localstorage、sessionstorage、cookie的区别-什么时候会用cookie-如何设置cookie过期时间" aria-hidden="true">#</a> 5 localStorage、sessionStorage、cookie的区别，什么时候会用cookie，如何设置cookie过期时间</h2><ul><li><strong>localStorage</strong> : 存储在浏览器中的键值对，数据持久化，页面关闭后数据仍然存在，没有过期时间限制。</li><li><strong>sessionStorage</strong> : 存储在浏览器中的键值对，仅在当前会话（页面关闭前）有效，关闭页面或浏览器后数据被清除。</li><li><strong>cookie</strong> : 存储在浏览器中的小数据块，可以设置过期时间，会随每次HTTP请求发送到服务器。大小限制为4KB左右。</li></ul><p><strong>什么时候使用cookie</strong> :</p><ul><li>需要在客户端和服务器之间交换少量数据（如用户认证信息）。</li><li>需要设置数据的过期时间。</li></ul><p><strong>设置cookie过期时间</strong> :</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">&quot;username=John; expires=Wed, 13 Sep 2024 12:00:00 UTC; path=/&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>expires</code>或者<code>max-age</code>设置过期时间，<code>path</code>指定cookie的有效路径。</p><h2 id="_6-青岛系统有没有考虑边界问题" tabindex="-1"><a class="header-anchor" href="#_6-青岛系统有没有考虑边界问题" aria-hidden="true">#</a> 6 青岛系统有没有考虑边界问题</h2><p>错误处理：try-catch</p><p>输入验证：限制输入为数字、必填</p><h2 id="_7-websocket是用来接收什么数据-有没有重连机制" tabindex="-1"><a class="header-anchor" href="#_7-websocket是用来接收什么数据-有没有重连机制" aria-hidden="true">#</a> 7 websocket是用来接收什么数据，有没有重连机制</h2><p>SDP（Session Description Protocol，会话描述协议）交换，用于协商视频编解码器、数据通道等参数。</p><p>Signaling 信令服务器自带心跳重连机制</p><h2 id="_8-选择webrtc有考虑兼容性吗-还是只是为了实现功能" tabindex="-1"><a class="header-anchor" href="#_8-选择webrtc有考虑兼容性吗-还是只是为了实现功能" aria-hidden="true">#</a> 8 选择webrtc有考虑兼容性吗，还是只是为了实现功能</h2><h2 id="_9-周报系统富文本是用什么实现的-对底层实现有看过吗-是用dom实现的还是canvas实现的" tabindex="-1"><a class="header-anchor" href="#_9-周报系统富文本是用什么实现的-对底层实现有看过吗-是用dom实现的还是canvas实现的" aria-hidden="true">#</a> 9 周报系统富文本是用什么实现的，对底层实现有看过吗，是用dom实现的还是canvas实现的</h2><p><strong>mavonEditor，<strong>基于Vue.js的Markdown编辑器，主要使用</strong>DOM</strong>进行渲染。</p><ul><li>输入内容时，mavonEditor解析Markdown语法并生成对应的HTML结构。</li><li>Vue.js的响应式系统会实时更新DOM，反映用户输入的内容。</li></ul><h2 id="_10-从0-1实现富文本-有哪几种实现方式" tabindex="-1"><a class="header-anchor" href="#_10-从0-1实现富文本-有哪几种实现方式" aria-hidden="true">#</a> 10 从0-1实现富文本，有哪几种实现方式</h2><ul><li><strong>基于contenteditable属性</strong> : 设置元素的 <code>contenteditable</code>为 <code>true</code>，直接在元素内编辑。适合轻量级实现，操作简单。</li><li><strong>基于iframe</strong> : 在一个iframe内编辑内容，隔离样式和脚本，适用于复杂的富文本编辑器。</li><li><strong>基于Canvas</strong> : 通过绘制来实现复杂的富文本编辑，但实现难度较高，适合对文本样式有特殊需求的应用。</li></ul><h2 id="_11-富文本只是纯文本还是有复杂数据结构" tabindex="-1"><a class="header-anchor" href="#_11-富文本只是纯文本还是有复杂数据结构" aria-hidden="true">#</a> 11 富文本只是纯文本还是有复杂数据结构</h2><h2 id="_12-如果插入了一段不合规则的js脚本或dom会不会被xss攻击" tabindex="-1"><a class="header-anchor" href="#_12-如果插入了一段不合规则的js脚本或dom会不会被xss攻击" aria-hidden="true">#</a> 12 如果插入了一段不合规则的js脚本或dom会不会被xss攻击</h2><p>为防止XSS攻击，mavonEditor或任何富文本编辑器都应该对用户输入的内容进行严格的<strong>过滤</strong>和<strong>转义</strong> 。</p><h2 id="_13-express有了解吗" tabindex="-1"><a class="header-anchor" href="#_13-express有了解吗" aria-hidden="true">#</a> 13 express有了解吗</h2><p><strong>Express</strong>是一个基于Node.js的Web应用框架，简化了服务器和API的构建过程。它提供了：</p><ul><li><strong>中间件系统</strong> : 用于处理HTTP请求、响应、错误、日志等。</li><li><strong>路由系统</strong> : 定义不同URL路径对应的处理逻辑。</li><li><strong>模板引擎支持</strong> : 用于生成动态HTML页面。</li><li><strong>扩展性强</strong> : 通过插件或中间件扩展功能。</li></ul><h2 id="_14-简单说一下jwt-为什么不用cookie" tabindex="-1"><a class="header-anchor" href="#_14-简单说一下jwt-为什么不用cookie" aria-hidden="true">#</a> 14 简单说一下JWT，为什么不用cookie</h2><p><strong>JWT（JSON Web Token）</strong> 是一种用于客户端和服务器之间传递安全信息的标准。它的主要特点是：</p><ul><li><strong>自包含</strong> : JWT中包含了所有必要的信息，服务器无需存储会话状态。</li><li><strong>可扩展性</strong> : 可以根据需求添加自定义数据。</li><li><strong>安全性</strong> : 通过签名确保数据未被篡改。</li></ul><p><strong>为什么不用Cookie</strong> :</p><ul><li><strong>跨域安全</strong> : JWT可以通过HTTP头传递，避免了跨域问题，而Cookie受限于SameSite策略。</li><li><strong>无状态性</strong> : JWT不依赖服务器状态，适合分布式系统，而Cookie通常需要服务器存储会话信息。</li></ul><h2 id="_15-vue和react的区别" tabindex="-1"><a class="header-anchor" href="#_15-vue和react的区别" aria-hidden="true">#</a> 15 vue和react的区别</h2><h2 id="_16-有用过vue3吗-有用过vuex吗-讲一下实现原理" tabindex="-1"><a class="header-anchor" href="#_16-有用过vue3吗-有用过vuex吗-讲一下实现原理" aria-hidden="true">#</a> 16 有用过vue3吗，有用过vuex吗，讲一下实现原理</h2><p><strong>Vuex</strong>是Vue.js的状态管理模式，主要包括以下部分：</p><ul><li><strong>State</strong> : 存储应用的全局状态。</li><li><strong>Mutations</strong> : 修改状态的唯一方法，必须是同步函数。</li><li><strong>Actions</strong> : 处理异步操作，提交mutations以修改状态。</li><li><strong>Getters</strong> : 从state中派生出计算结果，相当于Vue组件中的computed属性。</li><li><strong>Modules</strong> : 组织大型应用的状态管理，将store分割成模块。</li></ul><p><strong>原理</strong> :</p><ul><li>Vuex通过Vue的响应式系统使得state的变化能够自动更新视图。</li><li>Actions和Mutations确保了状态修改的可追溯性和可控性。</li></ul><h2 id="_17-v-if或者是v-show-如何与template绑定-vue语法是怎么编译处理的" tabindex="-1"><a class="header-anchor" href="#_17-v-if或者是v-show-如何与template绑定-vue语法是怎么编译处理的" aria-hidden="true">#</a> 17 v-if或者是v-show，如何与template绑定，vue语法是怎么编译处理的</h2><ul><li><strong>v-if</strong> : 动态地在DOM中添加或删除元素。<code>v-if</code>指令通过条件判断，编译过程中将决定是否渲染该部分的HTML。</li><li><strong>v-show</strong> : 通过CSS的 <code>display</code>属性控制元素的显示与隐藏，渲染过程中并不会真正移除DOM元素。</li></ul><p><strong>编译处理</strong> :</p><ul><li>Vue的模板编译器会将 <code>v-if</code>、<code>v-show</code>等指令解析成渲染函数，最终通过Vue的响应式系统进行更新。</li></ul><h2 id="_18-react的hooks和setstate有什么区别" tabindex="-1"><a class="header-anchor" href="#_18-react的hooks和setstate有什么区别" aria-hidden="true">#</a> 18 react的hooks和setstate有什么区别</h2><ul><li><strong>Hooks</strong> : React提供的一个新的API，允许在函数组件中使用state和生命周期。<code>useState</code>用于声明state变量，<code>useEffect</code>用于处理副作用。</li><li><strong>setState</strong> : 是类组件中更新state的方法，调用后会触发组件重新渲染。</li></ul><p><strong>区别</strong> :</p><ul><li>Hooks使得函数组件可以具有类组件的功能，而不需要使用类的语法。</li><li>setState是类组件的固有方法，hooks则适用于函数组件。</li></ul><h2 id="_19-hooks实现didmount生命周期应该怎么实现" tabindex="-1"><a class="header-anchor" href="#_19-hooks实现didmount生命周期应该怎么实现" aria-hidden="true">#</a> 19 hooks实现didmount生命周期应该怎么实现</h2><p>可以认为 useEffect Hook 为 componentDidMount、componentDidUpdate 和 componentWillUnmount 的组合。</p><h2 id="_20-useeffect第二个参数-返回的回调函数的值的作用-如果监听了一个事件-最后想销毁一个事件要怎么做" tabindex="-1"><a class="header-anchor" href="#_20-useeffect第二个参数-返回的回调函数的值的作用-如果监听了一个事件-最后想销毁一个事件要怎么做" aria-hidden="true">#</a> 20 useEffect第二个参数，返回的回调函数的值的作用，如果监听了一个事件，最后想销毁一个事件要怎么做</h2><p><strong>返回的回调函数</strong> : 用于清理副作用，比如取消订阅、清除定时器等。执行顺序是在组件卸载或下次 <code>useEffect</code>执行之前。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">handleEvent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 事件处理逻辑</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;resize&#39;</span><span class="token punctuation">,</span> handleEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;resize&#39;</span><span class="token punctuation">,</span> handleEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_21-react的diff算法" tabindex="-1"><a class="header-anchor" href="#_21-react的diff算法" aria-hidden="true">#</a> 21 react的diff算法</h2><p><strong>React的diff算法</strong>用于比较虚拟DOM树的不同部分，以便只更新实际DOM中的变化部分。主要原则有：</p><ul><li><strong>同层比较</strong> : 只比较同一层级的元素，不跨层级比较。</li><li><strong>标识不同节点</strong> : 基于节点类型和key属性来判断节点是否相同，若不同则直接替换。</li><li><strong>减少复杂度</strong> : 使用O(n)复杂度来进行比较和更新。</li></ul><h2 id="_22-webpack有哪些loader和plugin-bable-loader的作用" tabindex="-1"><a class="header-anchor" href="#_22-webpack有哪些loader和plugin-bable-loader的作用" aria-hidden="true">#</a> 22 webpack有哪些loader和plugin，bable-loader的作用</h2><p><strong>Loaders</strong> : 用于转换模块的源代码，常见的有：</p><ul><li><code>babel-loader</code>: 转换ES6+代码为兼容旧浏览器的JavaScript代码。</li><li><code>css-loader</code>: 允许你 <code>import</code>或 <code>require</code>CSS文件。</li><li><code>style-loader</code>: 将CSS注入到DOM中。</li><li><code>file-loader</code>: 处理图片、字体等文件，并返回URL。</li></ul><p><strong>Plugins</strong> : 用于执行更复杂的任务，常见的有：</p><ul><li><code>HtmlWebpackPlugin</code>: 自动生成HTML文件并注入打包后的资源。</li><li><code>CleanWebpackPlugin</code>: 在每次构建前清理输出目录。</li><li><code>MiniCssExtractPlugin</code>: 将CSS提取到单独的文件中。</li></ul><h2 id="_23-常用的es6语法" tabindex="-1"><a class="header-anchor" href="#_23-常用的es6语法" aria-hidden="true">#</a> 23 常用的es6语法</h2><h2 id="_24-promise的状态-如果状态改变后为什么不能再改变了" tabindex="-1"><a class="header-anchor" href="#_24-promise的状态-如果状态改变后为什么不能再改变了" aria-hidden="true">#</a> 24 promise的状态，如果状态改变后为什么不能再改变了</h2><p><strong>Promise的状态</strong>包括：<code>pending</code>（等待中）、<code>fulfilled</code>（已完成）、<code>rejected</code>（已拒绝）。</p><ul><li>一旦Promise的状态从 <code>pending</code>变为 <code>fulfilled</code>或 <code>rejected</code>，就会被锁定，无法再改变。</li><li>这是为了保证异步操作结果的一致性，防止不确定性。</li></ul><h2 id="_25-浏览器输入到页面展示的过程-经历了哪些协议" tabindex="-1"><a class="header-anchor" href="#_25-浏览器输入到页面展示的过程-经历了哪些协议" aria-hidden="true">#</a> 25 浏览器输入到页面展示的过程，经历了哪些协议</h2><h2 id="_26-tcp建立连接、断开连接过程" tabindex="-1"><a class="header-anchor" href="#_26-tcp建立连接、断开连接过程" aria-hidden="true">#</a> 26 TCP建立连接、断开连接过程</h2><h2 id="_27-页面的渲染步骤" tabindex="-1"><a class="header-anchor" href="#_27-页面的渲染步骤" aria-hidden="true">#</a> 27 页面的渲染步骤</h2><h2 id="_28-为什么会发生重绘和重排-如何去避免" tabindex="-1"><a class="header-anchor" href="#_28-为什么会发生重绘和重排-如何去避免" aria-hidden="true">#</a> 28 为什么会发生重绘和重排，如何去避免</h2><p><strong>重绘（Repaint）</strong> : 当元素的样式属性（如颜色、背景）发生变化时，会触发重绘，不会影响元素布局。</p><p><strong>重排（Reflow）</strong> : 当元素的几何属性（如大小、位置）变化时，会触发重排，浏览器需要重新计算布局。</p><p><strong>避免</strong> :</p><ul><li>合理使用 <code>transform</code>、<code>opacity</code>等不会引发重排的CSS属性。</li><li>避免频繁修改DOM，使用 <code>DocumentFragment</code>或批量更新。</li><li>使用 <code>requestAnimationFrame</code>来处理频繁的动画和DOM更新。</li></ul><h2 id="_29-用css实现一个图片360度旋转" tabindex="-1"><a class="header-anchor" href="#_29-用css实现一个图片360度旋转" aria-hidden="true">#</a> 29 用css实现一个图片360度旋转</h2><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@keyframes</span> rotate360</span> <span class="token punctuation">{</span>
  <span class="token selector">from</span> <span class="token punctuation">{</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">to</span> <span class="token punctuation">{</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token selector">.image-rotate</span> <span class="token punctuation">{</span>
  <span class="token property">animation</span><span class="token punctuation">:</span> rotate360 2s linear infinite<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>image.jpg<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>image-rotate<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_30-http和https区别-加密过程-什么是对称加密、非对称加密-私钥存在什么位置" tabindex="-1"><a class="header-anchor" href="#_30-http和https区别-加密过程-什么是对称加密、非对称加密-私钥存在什么位置" aria-hidden="true">#</a> 30 http和https区别，加密过程，什么是对称加密、非对称加密，私钥存在什么位置</h2><p><strong>HTTP和HTTPS的区别</strong> :</p><ul><li><strong>HTTP</strong> : 明文传输，数据不加密，易受中间人攻击。</li><li><strong>HTTPS</strong> : 加密传输，使用SSL/TLS协议，提供数据加密和身份验证。</li></ul><p><strong>加密过程</strong> :</p><ol><li><strong>客户端发起请求</strong> ，服务器返回证书（包含公钥）。</li><li><strong>客户端验证证书</strong> ，生成对称密钥，并用服务器公钥加密发送给服务器。</li><li><strong>服务器解密</strong> ，双方开始使用对称密钥进行通信。</li></ol><p><strong>对称加密</strong> : 使用同一个密钥加密和解密，速度快，适合大数据量。 <strong>非对称加密</strong> : 使用公钥加密，私钥解密，安全性高，适合密钥交换。</p><p><strong>私钥位置</strong> : 通常存储在服务器的安全位置（如HSM硬件安全模块）或加密的文件中。</p><h2 id="_31-事件委托有什么好处" tabindex="-1"><a class="header-anchor" href="#_31-事件委托有什么好处" aria-hidden="true">#</a> 31 事件委托有什么好处</h2><ul><li><strong>减少内存消耗</strong> : 通过将事件处理程序绑定到父级元素，而不是每个子元素，减少了事件处理程序的数量。</li><li><strong>动态元素处理</strong> : 方便处理动态添加或删除的元素，无需重新绑定事件。</li><li><strong>提高性能</strong> : 尤其在大量DOM元素存在时，事件委托可以显著提高性能。</li></ul><h2 id="_32-进程和线程的区别-进程间通信的方式" tabindex="-1"><a class="header-anchor" href="#_32-进程和线程的区别-进程间通信的方式" aria-hidden="true">#</a> 32 进程和线程的区别，进程间通信的方式</h2><p><strong>进程</strong> :</p><ul><li>独立的程序执行实例，拥有独立的内存空间。</li><li>进程之间相互独立，切换开销较大。</li></ul><p><strong>线程</strong> :</p><ul><li>进程内的执行单元，线程共享进程的内存空间。</li><li>线程间切换开销较小，但需要注意同步问题。</li></ul><p><strong>进程间通信方式</strong> :</p><ul><li><strong>消息队列</strong> : 通过消息队列传递数据。</li><li><strong>信号</strong> : 用于进程间的简单通知。</li><li><strong>管道（Pipe）</strong> : 通过管道实现数据流的传递。</li><li><strong>共享内存</strong> : 允许多个进程共享相同的内存区域。</li></ul><h2 id="_33-垃圾回收" tabindex="-1"><a class="header-anchor" href="#_33-垃圾回收" aria-hidden="true">#</a> 33 垃圾回收</h2><p>垃圾回收机制（GC）用于自动管理内存，释放不再使用的对象。常见的垃圾回收算法有：</p><ul><li><strong>标记-清除（Mark and Sweep）</strong> : 标记可达对象，然后清除未标记的对象。</li><li><strong>引用计数（Reference Counting）</strong> : 通过维护每个对象的引用计数，引用计数为0时回收。</li><li><strong>分代回收</strong> : 将对象按生命周期分为新生代和老年代，分别处理，优化性能。</li></ul><h2 id="_34-闭包-在什么场景下会用到-有什么优缺点" tabindex="-1"><a class="header-anchor" href="#_34-闭包-在什么场景下会用到-有什么优缺点" aria-hidden="true">#</a> 34 闭包，在什么场景下会用到，有什么优缺点</h2><p><strong>闭包</strong>是指有权访问另一个函数作用域中变量的函数。常用于：</p><ul><li><strong>数据私有化</strong> : 通过闭包创建私有变量，外部无法直接访问。</li><li><strong>回调函数</strong> : 将函数和上下文数据绑定在一起传递。</li><li><strong>模块化编程</strong> : 在JavaScript中使用闭包来实现模块化。</li></ul><p><strong>优点</strong> :</p><ul><li>保持状态，延长变量的生命周期。</li><li>方便创建工厂函数和模块化代码。</li></ul><p><strong>缺点</strong> :</p><ul><li>可能导致内存泄漏，尤其在不正确处理闭包时。</li><li>增加调试复杂度。</li></ul><h2 id="_35-手撕" tabindex="-1"><a class="header-anchor" href="#_35-手撕" aria-hidden="true">#</a> 35 手撕</h2><ol><li>数组forEach方法</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>防抖</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span>delay</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>
   <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
      timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        fn
      <span class="token punctuation">}</span><span class="token punctuation">,</span>delay<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>输入str=&#39;a-b-c-d&#39;，输出&#39;aBCD&#39;</li></ol><p>方法1：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;a-b-c-d&#39;</span>
<span class="token keyword">let</span> st <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> res <span class="token operator">=</span> st<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> st<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><ol><li>用replaceAll才能全部替换</li><li>要用新变量接收</li></ol><p>方法2：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> parts <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> parts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> parts<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  result <span class="token operator">+=</span> parts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>发布订阅</li></ol><p>发布订阅模式（也称为观察者模式）是一种设计模式，允许对象（发布者）向其他对象（订阅者）发送通知，而无需显式知道这些对象是谁</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">EventEmitter</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>events <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 订阅事件</span>
  <span class="token function">on</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> listener</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 发布事件</span>
  <span class="token function">emit</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">listener</span> <span class="token operator">=&gt;</span> <span class="token function">listener</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 取消订阅</span>
  <span class="token function">off</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> listenerToRemove</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">listener</span> <span class="token operator">=&gt;</span> listener <span class="token operator">!==</span> listenerToRemove<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 订阅一次性事件</span>
  <span class="token function">once</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> listener</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token function-variable function">wrapper</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">listener</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行一次后取消订阅</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用示例</span>
<span class="token keyword">const</span> emitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">onMessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Received message: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 订阅事件</span>
emitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> onMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 发布事件</span>
emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Hello, World!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出: Received message: Hello, World!</span>

<span class="token comment">// 取消订阅</span>
emitter<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> onMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 再次发布事件，不会有输出</span>
emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Hello again!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 订阅一次性事件</span>
emitter<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Received one-time message: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;This will be logged&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出: Received one-time message: This will be logged</span>
emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;This will not be logged&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 无输出</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong><code>on(event, listener)</code></strong> : 用于订阅事件，将事件和回调函数关联起来。</li><li><strong><code>emit(event, ...args)</code></strong> : 用于发布事件，触发所有订阅该事件的回调函数，并传递相关参数。</li><li><strong><code>off(event, listenerToRemove)</code></strong> : 用于取消订阅事件，移除指定的回调函数。</li><li><strong><code>once(event, listener)</code></strong> : 用于订阅一次性事件，回调函数只会触发一次。</li></ul><h2 id="_36-反问" tabindex="-1"><a class="header-anchor" href="#_36-反问" aria-hidden="true">#</a> 36 反问</h2>`,124),p=[o];function i(c,l){return s(),a("div",null,p)}const d=n(e,[["render",i],["__file","baidupre1-2.html.vue"]]);export{d as default};
