import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as e}from"./app-0SoiKzJB.js";const t={},p=e(`<h1 id="快手一面" tabindex="-1"><a class="header-anchor" href="#快手一面" aria-hidden="true">#</a> 快手一面</h1><h2 id="_1-三维模型渲染问题-解决方案" tabindex="-1"><a class="header-anchor" href="#_1-三维模型渲染问题-解决方案" aria-hidden="true">#</a> 1. 三维模型渲染问题，解决方案</h2><h3 id="_1-1-三维静态模型" tabindex="-1"><a class="header-anchor" href="#_1-1-三维静态模型" aria-hidden="true">#</a> 1.1 三维静态模型</h3><p>（异步加载模型、前端放模型和后端传模型）</p><p>three.js是以WebGL为基础的库。创建场景=&gt;配置灯光、相机=&gt;导入模型=&gt;设置材质=&gt;渲染</p><ol><li><p>文件本身处理：<strong>gltf格式（gltf和glb）</strong>，<strong>draco压缩</strong></p><p><strong>obj（ascii）=&gt;gltf（json+二进制）会输出两种文件类型</strong> ，ascii在内存中以二进制文件储存</p></li></ol><ul><li>.bin 文件，以<strong>二进制流的方式存储顶点坐标、顶点法线坐标</strong>和贴图纹理坐标、贴图信息等模型基本数据信息；</li><li>.gltf 文件，<strong>本质是 json 文件，记录对bin文件中模型顶点基本数据的索引、材质索引等信息，方便编辑，可读性较好</strong>；</li></ul><p>二进制数据，比如3D对象的几何数据和纹理数据通常不被包含在JSON文件中，它们被存储在外部的文件中。<strong>JSON文件中只包含了到这些外部文件的链接</strong>。这使得<strong>二进制数据可以以非常紧凑的形式进行存储</strong>方便互联网传输，并且可以直接被渲染程序使用，<strong>无需额外的解码、预处理</strong>。</p><p><strong>通过 Draco 压缩（blender、gltf-pipeline）基本上是有损的，有两点表现：</strong></p><ul><li>Draco 通过 Edge breaker 3D 压缩算法<strong>改变了模型的网格数据的索引方法</strong>，缺少了原来的网格顺序；</li><li>Draco 通过<strong>减少顶点坐标、顶点纹理坐标等信息的位数</strong>，以减少数据的存储量。</li></ul><ol><li>模型资源往往比较大，数据内容变动不大，可重复利用率不高。频繁请求比较浪费网络资源，加载到本地可以既可以节约请求，充分利用资源，并且可以节省用户下载时间，提高用户体验。区别不大</li><li>异步加载模型，three.js的api</li><li>文件分块加载（需要将大模型分为小块）</li><li>预加载，放到本地indexDB中</li></ol><ul><li>localforage操作。</li><li>可以直接存储任何 js <strong>数据，包括blob（其实是支持结构化克隆的数据），不像</strong> storage 只能存放字符串</li><li>把图片或者 3D 模型文件转化成 Blob 格式的文件，存在 IndexedDB 中，就可以解决<strong>免去二次加载时网络请求的时间</strong>。</li><li>当 3D 需要进行<strong>复杂计算时</strong>，就可以利用 Service Worker 把一些数据存储在 IndexedDB 中或者<strong>通过 Web Worker 读取 IndexedDB 中的数据进行多线程计算。</strong></li><li>indexdb初始化=&gt;获取连接=&gt;根据请求生成key=&gt;读取/写入数据=&gt;每行加上过期时间=&gt;在axios拦截器中判断有无缓存是否过期。</li></ul><h3 id="_1-2-三维仿真渲染" tabindex="-1"><a class="header-anchor" href="#_1-2-三维仿真渲染" aria-hidden="true">#</a> 1.2 三维仿真渲染</h3><p>基于webGL的三维渲染的不足:</p><p><strong>1、前端浏览体验和数据量有很大关系，需要花费大量的数据进行数据的轻量化以及切片处理;</strong></p><p><strong>2、前端性能的稳定性不高，高负载的情况下容易出现崩溃；</strong></p><p><strong>3、无法支持大分辨率的场景问题；</strong></p><p>导致问题: 仿真场景渲染等待时间过长,100多秒,不符合实时仿真要求;特别是移动端浏览器性能限制,容易崩溃</p><p>解决方案: <strong>三维“云渲染”方案-基于WebRTC的视频流推送技术</strong>,称之为UnityRenderStreaming；</p><p>基本原理: 就是将场景通过后端渲染，然后采用实时视频流推送到网页端，并且能够实现前端到后端的交互同步。前端只要声明一个 <code>&lt;video&gt;&lt;/video&gt;</code>标签就可以实现视频流的加载和交互。</p><p>通信原理: WebRTC建立点对点连接, 流数据传输需要一条信道，而这个信道则是由信令服务器提供的。这个信令服务器由SignalR实现,此外signalR会根据浏览器支持情况选择websocket,服务器推送,客户端轮询,还引入了断开重连机制.</p><h2 id="_2-首屏优化" tabindex="-1"><a class="header-anchor" href="#_2-首屏优化" aria-hidden="true">#</a> 2. 首屏优化</h2><ol><li>合并文件、压缩文件请求，传输压缩gzip</li><li>cdn管理静态大文件</li><li>图片懒加载</li><li>模型异步加载</li><li>SSR服务器渲染</li><li>轻量库，组件尽量不全局引用</li><li>鱼骨屏</li><li>浏览器缓存</li></ol><h2 id="_3-隐藏元素" tabindex="-1"><a class="header-anchor" href="#_3-隐藏元素" aria-hidden="true">#</a> 3. 隐藏元素</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 两者区别</span>
<span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;img&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">.</span>img<span class="token punctuation">{</span>
    <span class="token literal-property property">display</span><span class="token operator">:</span>none
    <span class="token literal-property property">background</span><span class="token operator">:</span><span class="token function">url</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>png<span class="token punctuation">)</span>  <span class="token comment">// 照片不会被请求、渲染</span>
<span class="token punctuation">}</span>

<span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">&quot;img.png&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>img<span class="token operator">&gt;</span>
img<span class="token punctuation">{</span>
    <span class="token literal-property property">display</span><span class="token operator">:</span>none <span class="token comment">// 照片会被请求，不会渲染</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-定位元素" tabindex="-1"><a class="header-anchor" href="#_4-定位元素" aria-hidden="true">#</a> 4. 定位元素</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token number">11111</span> <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token number">22222</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
span<span class="token punctuation">{</span>
    <span class="token literal-property property">display</span><span class="token operator">:</span>relative <span class="token comment">// 1111122222 </span>
<span class="token punctuation">}</span>
span<span class="token punctuation">{</span>
    <span class="token literal-property property">display</span><span class="token operator">:</span>absolute <span class="token comment">// 1111122222</span>
<span class="token punctuation">}</span>
span<span class="token punctuation">{</span>
    <span class="token literal-property property">display</span><span class="token operator">:</span>fixed <span class="token comment">// 1111122222</span>
<span class="token punctuation">}</span>
span<span class="token punctuation">{</span>
    <span class="token literal-property property">display</span><span class="token operator">:</span>relative <span class="token comment">// 1111122222</span>
    <span class="token literal-property property">left</span><span class="token operator">:</span><span class="token number">0</span>
<span class="token punctuation">}</span>
span<span class="token punctuation">{</span>
    <span class="token literal-property property">display</span><span class="token operator">:</span>absolute <span class="token comment">// 重合，脱离文档流，相对于定位父元素，无则相对于html根元素</span>
    <span class="token literal-property property">left</span><span class="token operator">:</span><span class="token number">0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-闭包理解和节流函数" tabindex="-1"><a class="header-anchor" href="#_5-闭包理解和节流函数" aria-hidden="true">#</a> 5. 闭包理解和节流函数</h2><ol><li>形式：函数返回函数、立即执行函数</li><li>作用：防止变量污染（全局变量多了容易冲突=&gt;返回变量的getter和setter=&gt;变量就不会被直接复制修改），变量常驻/泄露</li><li>用途：私有库开发、模块化、节流防抖等</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">tro</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span>delay</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> timeout
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>timeout<span class="token punctuation">)</span><span class="token punctuation">{</span>
            timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
                <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                timeout <span class="token operator">=</span> <span class="token keyword">null</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-正则-电话号码脱敏" tabindex="-1"><a class="header-anchor" href="#_6-正则-电话号码脱敏" aria-hidden="true">#</a> 6. 正则-电话号码脱敏</h2><h3 id="_6-1-正则基础语法" tabindex="-1"><a class="header-anchor" href="#_6-1-正则基础语法" aria-hidden="true">#</a> 6.1 正则基础语法</h3><p>正常情况下，正则表达式采用<strong>贪婪模式</strong>，即，尽可能多的匹配。</p><p>精确个数：</p><ul><li><strong>用 <code>\\d</code>可以匹配一个数字</strong>：&#39;00\\d&#39;可以匹配&#39;007&#39;，但无法匹配&#39;00A&#39;</li><li><strong>用 <code>\\w</code>可以匹配一个字母或数字</strong>：&#39;00\\w&#39;可以匹配&#39;007&#39;和&#39;00A&#39;</li><li><strong>用 <code>.</code>可以匹配任意字符</strong>：&#39;00.&#39;可以匹配&#39;007&#39;，&#39;00A&#39;，&#39;00？&#39;</li></ul><p>多个字符：</p><ul><li><strong>用 <code>\\*</code>表示任意个字符</strong>（包括0个），</li><li><strong>用 <code>+</code>表示至少一个字符</strong>：\\s可以匹配一个空格（也包括Tab等空白符），所以\\s+表示至少有一个空格</li><li><strong>[^abc]表示不是字符a或b或c的内容</strong></li><li><strong>用 <code>?</code>表示0个或1个字符</strong>，</li><li><strong>用 <code>{n}</code>表示n个字符</strong>，</li><li><strong>用 <code>{n,m}</code>表示n-m个字符</strong>：\\d{3,8}表示3-8个数字，例如&#39;1234567&#39;</li></ul><p>例子：匹配 <code>&#39;010-12345&#39;</code>这样的号码呢？由于 <code>&#39;-&#39;</code>是特殊字符，在正则表达式中，<strong>要用 <code>&#39;\\&#39;</code>转义</strong>，所以，上面的正则是 <code>\\d{3}\\-\\d{3,8}</code>。</p><p>范围匹配：</p><ul><li><code>[0-9a-zA-Z\\_]</code>可以匹配一个数字、字母或者下划线；</li><li><code>[0-9a-zA-Z\\_]+</code>可以匹配至少由一个数字、字母或者下划线组成的字符串，比如 <code>&#39;a100&#39;</code>，<code>&#39;0_Z&#39;</code>，<code>&#39;Py3000&#39;</code>等等；</li><li><code>[a-zA-Z\\_][0-9a-zA-Z\\_]*</code>可以匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串，也就是Python合法的变量；</li><li><code>[a-zA-Z\\_][0-9a-zA-Z\\_]{0, 19}</code>更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）。</li><li><code>A|B</code>可以匹配A或B，所以 <code>(P|p)ython</code>可以匹配 <code>&#39;Python&#39;</code>或者 <code>&#39;python&#39;</code>。</li><li><code>^</code>表示行的开头，<code>^\\d</code>表示必须以数字开头。</li><li><code>$</code>表示行的结束，<code>\\d$</code>表示必须以数字结束。</li></ul><p>修饰符：g-全文搜索；i-忽略大小写； m-多行搜索；</p><h3 id="_6-2-创建方法" tabindex="-1"><a class="header-anchor" href="#_6-2-创建方法" aria-hidden="true">#</a> 6.2 创建方法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//字面量方式，其由包含在斜杠之间的模式组成，如下所示：</span>
<span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">ab+c</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token comment">//构造函数方式，调用RegExp对象的构造函数，如下所示：</span>
<span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;ab+c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3-使用方法" tabindex="-1"><a class="header-anchor" href="#_6-3-使用方法" aria-hidden="true">#</a> 6.3 使用方法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 测试字符是否满足正则表达式规则</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[123]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//false</span>

<span class="token comment">// 正则表达式和 String 对象之间的一个搜索匹配</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;abcdefg3sgbh&quot;</span><span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 7</span>

<span class="token comment">// 在一个指定字符串中执行一个搜索匹配</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&quot;abcd456efg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 遇到满足条件的就返回,[4]</span>

<span class="token comment">// 返回一个字符串匹配正则表达式的结果</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;abcd456efg&quot;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [456]</span>

<span class="token comment">// 返回一个由替换值（replacement）替换部分或所有的模式（pattern）匹配项后的新字符串。</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a1B2d3X4Z5&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-zA-Z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token string">&#39;Q&#39;</span><span class="token punctuation">)</span><span class="token comment">// Q1Q3Q4Q5 只要匹配到符合规则的就返回</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-4-应用" tabindex="-1"><a class="header-anchor" href="#_6-4-应用" aria-hidden="true">#</a> 6.4 应用</h3><h4 id="_1-yyyy-mm-dd转为mm-dd-yyyy类型格式字符串" tabindex="-1"><a class="header-anchor" href="#_1-yyyy-mm-dd转为mm-dd-yyyy类型格式字符串" aria-hidden="true">#</a> 1. yyyy-MM-DD转为MM/DD/yyyy类型格式字符串</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> text<span class="token operator">=</span><span class="token string">&#39;2022-02-23&#39;</span>
<span class="token keyword">let</span> reg<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d{4})-(\\d{2})-(\\d{2})</span><span class="token regex-delimiter">/</span></span>
<span class="token keyword">let</span> res<span class="token operator">=</span>text<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span><span class="token string">&#39;$3/$2/$1&#39;</span><span class="token punctuation">)</span><span class="token comment">//将yyyy-MM-DD转换为MM/DD/yyyy</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-电话脱敏" tabindex="-1"><a class="header-anchor" href="#_2-电话脱敏" aria-hidden="true">#</a> 2. 电话脱敏</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">desensitizeText</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 匹配文本中的手机号码，使用正则表达式</span>
  <span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">1\\d{10}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> text<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">match</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 将匹配到的手机号进行脱敏处理</span>
    <span class="token keyword">return</span> match<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\\d{3})\\d{4}(\\d{4})$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;$1****$2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;$1****$2&#39; 是一个替换的模板字符串。其中的 $1 和 $2 分别表示正则表达式中的第一个和第二个分组（即匹配到的3个数字和4个数字），**** 表示替换后的字符串。</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token string">&#39;这是一段文本内容，其中这个可能是手机号码15298750987，这个可能是个QQ号码98578242，这个可能是个普通的数字1532345322。这可能又是个手机号码 15298750988。&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">desensitizeText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出：这是一段文本内容，其中这个可能是手机号码152****0987，这个可能是个QQ号码98578242，这个可能是个普通的数字1532345322。这可能又是个手机号码 152****0988。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-如何学习前端" tabindex="-1"><a class="header-anchor" href="#_7-如何学习前端" aria-hidden="true">#</a> 7. 如何学习前端</h2><h2 id="_8-多人协同更改文件" tabindex="-1"><a class="header-anchor" href="#_8-多人协同更改文件" aria-hidden="true">#</a> 8. 多人协同更改文件</h2><h3 id="_8-1-编辑锁" tabindex="-1"><a class="header-anchor" href="#_8-1-编辑锁" aria-hidden="true">#</a> 8.1 编辑锁</h3><p><strong>当有人在编辑某个文档时，系统会将这个文档锁定，避免其他人同时编辑</strong></p><p>实现：当用户 1 进入某个内容的编辑时，向服务端发送一个请求，服务端校验资源锁定人，为空则将该内容的申请人标记为锁定人1。其他用户访问该内容时，显示锁定人1 正在编辑当前内容而无法编辑，直至锁定人1编辑完毕将该内容解锁。</p><h3 id="_8-2-允许多人编辑-和覆盖" tabindex="-1"><a class="header-anchor" href="#_8-2-允许多人编辑-和覆盖" aria-hidden="true">#</a> 8.2 允许多人编辑，和覆盖</h3><p><strong>当用户编辑内容时，如果在编辑的过程中有其他用户提交了新的版本，则页面给出提示发生了版本变更，是否要覆盖</strong>。</p><p>实现：用户获取内容时，服务端同时返回该内容的当前版本号。当用户保存时，将<strong>修改后内容和拿到的版本号一并提交</strong>，服务端<strong>校验版本号与数据库中的版本号是否一致：</strong></p><ul><li>若一致，表示在该用户编辑的过程中没有版本变更，直接保存成功</li><li>若<strong>不一致</strong>，表示在该用户编辑的过程中发生了新的版本变更，<strong>保存失败并通知用户，用户可选择是否要进行覆盖</strong></li></ul><h3 id="_8-3-允许多人编辑-实时协同" tabindex="-1"><a class="header-anchor" href="#_8-3-允许多人编辑-实时协同" aria-hidden="true">#</a> 8.3 允许多人编辑，实时协同</h3><p>例如各种在线文档，几乎都会采用协同编辑的方案，保证多人在线实时编辑。要实现协同编辑，主要需要实现几个关键技术点：</p><p><strong>用于增量传输的 Diff 算法</strong>：在协同编辑领域，常用的两种技术为 <strong>OT</strong>(Operational Transformation) 和 <strong>CRDT</strong> (Conflict-free Replicated Data Type)</p><p><strong>文档的实时更新</strong>：可以采用 <strong>WebSocket</strong> 或者是轮询的方法，在追求性能和体验的情况下，通常我们会选择 WebSocket</p><p><strong>更新内容的富文本编辑器：</strong> 此项是可选的，通常多人在线编辑的场景需要支持丰富的内容编辑，因此需要一个富文本编辑器，普通的文本编辑场景不需要。</p><p>其中，<strong>OT</strong> 是多用于协同编辑领域的一种技术，正如其英文全称 Operational Transformation 一样，分为两个步骤：首先是<strong>将用户的编辑行为转换成可枚举的操作</strong>(Operational)；如果是有<strong>多人操作同时进行，则对这些操作进行转换</strong>(Transformation)。</p><h2 id="_9-如何计算localstorage的大小" tabindex="-1"><a class="header-anchor" href="#_9-如何计算localstorage的大小" aria-hidden="true">#</a> 9. 如何计算localStorage的大小</h2><h3 id="_9-1-计算总容量" tabindex="-1"><a class="header-anchor" href="#_9-1-计算总容量" aria-hidden="true">#</a> 9.1 计算总容量</h3><p>不断往 <code>localStorage</code>中累加存入 <code>10KB</code>（10240字节，str.length==10240），等到超出最大存储时，会报错，那个时候统计出所有累积的大小，就是总存储量了！</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;0123456789&#39;</span>
<span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
<span class="token comment">// 先做一个 10KB 的字符串</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">10240</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  str <span class="token operator">=</span> str <span class="token operator">+</span> <span class="token string">&#39;0123456789&#39;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 先清空</span>
localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token function-variable function">computedTotal</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 不断往 LocalStorage 中累积存储 10KB</span>
    <span class="token keyword">const</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;temp&#39;</span><span class="token punctuation">,</span> temp<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>
        <span class="token comment">// 报错说明超出最大存储</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">)</span>
        <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
        <span class="token comment">// 统计完记得清空</span>
        localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      temp <span class="token operator">+=</span> str
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> total <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">computedTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">最大容量</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>total<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">KB</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-2-已用容量" tabindex="-1"><a class="header-anchor" href="#_9-2-已用容量" aria-hidden="true">#</a> 9.2 已用容量</h3><p>即计算所有键值对所占空间。通过JSON.stringify将值转换为字符串，获取字符串长度，单位为字节</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getLocalStorageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> localStorage<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> key <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> value <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    total <span class="token operator">+=</span> key<span class="token punctuation">.</span>length <span class="token operator">+</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> total<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getLocalStorageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,72),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","Kuaishou1.html.vue"]]);export{d as default};
