import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as e}from"./app-0SoiKzJB.js";const p={},t=e(`<h1 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript" aria-hidden="true">#</a> TypeScript</h1><h3 id="_1-什么是typescript" tabindex="-1"><a class="header-anchor" href="#_1-什么是typescript" aria-hidden="true">#</a> 1.什么是TypeScript？</h3><p>TypeScript是JavaScript的加强版，它给JavaScript添加了可选的静态类型和基于类的面向对象编程，它拓展了JavaScript的语法。</p><p>而且TypeScript不存在跟浏览器不兼容的问题，因为在编译时，它产生的都是JavaScript代码。</p><h3 id="_2-typescript-和-javascript-的区别是什么" tabindex="-1"><a class="header-anchor" href="#_2-typescript-和-javascript-的区别是什么" aria-hidden="true">#</a> 2.TypeScript 和 JavaScript 的区别是什么？</h3><p>Typescript 是 JavaScript 的超集，可以被编译成 JavaScript 代码。 用 JavaScript 编写的合法代码，在 TypeScript 中依然有效。Typescript 是纯面向对象的编程语言，包含类和接口的概念。 程序员可以用它来编写面向对象的服务端或客户端程序，并将它们编译成 JavaScript 代码。</p><p>TypeScript和 JavaScript的关系: TypeScript 引入了很多面向对象程序设计的特征，包括：</p><p>interfaces 接口 classes 类 enumerated types 枚举类型 generics 泛型 modules 模块</p><p>主要不同点如下： TS 是一种面向对象编程语言，而 JS 是一种脚本语言（尽管 JS 是基于对象的）。 TS 支持可选参数， JS 则不支持该特性。 TS 支持静态类型，JS 不支持。 TS 支持接口，JS 不支持接口。</p><h3 id="_3-为什么要用-typescript" tabindex="-1"><a class="header-anchor" href="#_3-为什么要用-typescript" aria-hidden="true">#</a> 3.为什么要用 TypeScript ？</h3><p>TS 在开发时就能给出编译错误， 而 JS 错误则需要在运行时才能暴露。 作为强类型语言，你可以明确知道数据的类型。代码可读性极强，几乎每个人都能理解。 TS 非常流行，被很多业界大佬使用。像 Asana、Circle CI 和 Slack 这些公司都在用 TS。</p><h3 id="_4-typescript-和-javascript-哪个更好" tabindex="-1"><a class="header-anchor" href="#_4-typescript-和-javascript-哪个更好" aria-hidden="true">#</a> 4.TypeScript 和 JavaScript 哪个更好？</h3><p>由于 TS 的先天优势，TS 越来越受欢迎。但是TS 最终不可能取代 JS，因为 JS 是 TS 的核心。</p><p>选择 TypeScript 还是 JavaScript 要由开发者自己去做决定。如果你喜欢类型安全的语言，那么推荐你选择 TS。 如果你已经用 JS 好久了，你可以选择走出舒适区学习 TS，也可以选择坚持自己的强项，继续使用 JS。</p><h3 id="_5-什么是泛型" tabindex="-1"><a class="header-anchor" href="#_5-什么是泛型" aria-hidden="true">#</a> 5.什么是泛型？</h3><p>泛型是指在定义函数、接口或类的时候，不预先指定具体的类型，使用时再去指定类型的一种特性。 可以把泛型理解为代表类型的参数</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 我们希望传入的值是什么类型，返回的值就是什么类型</span>
<span class="token comment">// 传入的值可以是任意的类型，这时候就可以用到 泛型// 如果使用 any 的话，就失去了类型检查的意义function createArray1(length: any, value: any): Array</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-ts中的类" tabindex="-1"><a class="header-anchor" href="#_6-ts中的类" aria-hidden="true">#</a> 6.TS中的类</h3><p>TypeScript 是面向对象的 JavaScript。而其中的类描述了所创建的对象共同的属性和方法。</p><p>传统的JavaScript程序使用函数和基于原型的继承来创建可重用的组件，但这对于熟悉使用面向对象方式的程序员来说有些棘手，因为他们用的是基于类的继承并且对象是从类构建出来的。</p><p>从ECMAScript 2015，也就是ECMAScript 6，JavaScript程序将可以使用这种基于类的面向对象方法。在TypeScript里允许开发者现在就使用这些特性，并且编译后的JavaScript可以在所有主流浏览器和平台上运行，</p><h3 id="_7-什么是构造函数-构造函数作用是什么" tabindex="-1"><a class="header-anchor" href="#_7-什么是构造函数-构造函数作用是什么" aria-hidden="true">#</a> 7.什么是构造函数，构造函数作用是什么？</h3><p>构造函数 ，是一种特殊的方法。主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中。而TypeScript的构造函数用关键字constructor来实现。可以通过this（和java/C#一样代表对象实例的成员访问）关键字来访问当前类体中的属性和方法。</p><h3 id="_8-实例化是什么" tabindex="-1"><a class="header-anchor" href="#_8-实例化是什么" aria-hidden="true">#</a> 8.实例化是什么？</h3><p>一般情况下，创建一个类后并不能直接的对属性和方法进行引用，必须对类进行实例化，即创建一个对象。TypeScript中用new 关键字创建对象。实例化后通过“.”来访问属性和方法</p><h3 id="_9-方法重写是什么" tabindex="-1"><a class="header-anchor" href="#_9-方法重写是什么" aria-hidden="true">#</a> 9.方法重写是什么？</h3><p>子类可继承父类中的方法，而不需要重新编写相同的方法。但有时子类并不想原封不动地继承父类的方法，而是想作一定的修改，这就需要采用方法的重写</p><p>重写的作用在于子类可以根据需要，定义特定于自己的行为。也就是说子类能够根据需要实现父类的方法。</p><h3 id="_10-什么是可索引类型接口" tabindex="-1"><a class="header-anchor" href="#_10-什么是可索引类型接口" aria-hidden="true">#</a> 10.什么是可索引类型接口？</h3><p>一般用来约束数组和对象</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 数字索引——约束数组</span>
<span class="token comment">// index 是随便取的名字，可以任意取名</span>
<span class="token comment">// 只要 index 的类型是 number，那么值的类型必须是 string</span>
<span class="token keyword">interface</span> <span class="token class-name">StringArray</span> <span class="token punctuation">{</span>
  <span class="token comment">// key 的类型为 number ，一般都代表是数组</span>
  <span class="token comment">// 限制 value 的类型为 string</span>
  <span class="token punctuation">[</span>index<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token builtin">string</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> arr<span class="token operator">:</span>StringArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;bbb&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 字符串索引——约束对象</span>
<span class="token comment">// 只要 index 的类型是 string，那么值的类型必须是 string</span>
<span class="token keyword">interface</span> <span class="token class-name">StringObject</span> <span class="token punctuation">{</span>
  <span class="token comment">// key 的类型为 string ，一般都代表是对象</span>
  <span class="token comment">// 限制 value 的类型为 string</span>
  <span class="token punctuation">[</span>index<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token builtin">string</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> obj<span class="token operator">:</span>StringObject <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">&#39;ccc&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-什么是函数类型接口" tabindex="-1"><a class="header-anchor" href="#_11-什么是函数类型接口" aria-hidden="true">#</a> 11.什么是函数类型接口？</h3><p>对方法传入的参数和返回值进行约束</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 注意区别// 普通的接口</span>
<span class="token keyword">interface</span> <span class="token class-name">discount1</span><span class="token punctuation">{</span>
  <span class="token function-variable function">getNum</span> <span class="token operator">:</span> <span class="token punctuation">(</span>price<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span><span class="token comment">// 函数类型接口</span>
<span class="token keyword">interface</span> <span class="token class-name">discount2</span><span class="token punctuation">{</span>
  <span class="token comment">// 注意:</span>
  <span class="token comment">// “:” 前面的是函数的签名，用来约束函数的参数</span>
  <span class="token comment">// &quot;:&quot; 后面的用来约束函数的返回值</span>
  <span class="token punctuation">(</span>price<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> cost<span class="token operator">:</span><span class="token function-variable function">discount2</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>price<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">{</span>
   <span class="token keyword">return</span> price <span class="token operator">*</span> <span class="token number">.8</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token comment">// 也可以使用类型别名</span>
<span class="token keyword">type</span> <span class="token class-name">Add</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span>
<span class="token keyword">let</span> add<span class="token operator">:</span> <span class="token function-variable function">Add</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-什么是类类型接口" tabindex="-1"><a class="header-anchor" href="#_12-什么是类类型接口" aria-hidden="true">#</a> 12.什么是类类型接口？</h3><p>如果接口用于一个类的话，那么接口会表示“行为的抽象” 对类的约束，让类去实现接口，类可以实现多个接口 接口只能约束类的公有成员（实例属性/方法），无法约束私有成员、构造函数、静态属性/方法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 接口可以在面向对象编程中表示为行为的抽象</span>
<span class="token keyword">interface</span> <span class="token class-name">Speakable</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>     <span class="token comment">// &quot;:&quot; 前面的是函数签名，用来约束函数的参数</span>
    <span class="token comment">// &quot;:&quot; 后面的用来约束函数的返回值</span>
    <span class="token function">speak</span><span class="token punctuation">(</span>words<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
<span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Speakable2</span> <span class="token punctuation">{</span>
    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">Speakable</span><span class="token punctuation">,</span> Speakable2 <span class="token punctuation">{</span>
    name<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>    <span class="token function">speak</span><span class="token punctuation">(</span>words<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token keyword">let</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dog<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token string">&#39;汪汪汪&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_13-什么是混合类型接口" tabindex="-1"><a class="header-anchor" href="#_13-什么是混合类型接口" aria-hidden="true">#</a> 13.什么是混合类型接口？</h3><p>一个对象可以同时做为函数和对象使用</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">FnType</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span>getName<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">MixedType</span> <span class="token keyword">extends</span> <span class="token class-name">FnType</span><span class="token punctuation">{</span>
    name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">;</span>
    age<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Counter</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span>start<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    interval<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Counter <span class="token punctuation">{</span>
    <span class="token keyword">let</span> counter <span class="token operator">=</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_14-never-和-void-的区别" tabindex="-1"><a class="header-anchor" href="#_14-never-和-void-的区别" aria-hidden="true">#</a> 14.never 和 void 的区别？</h3><p>void 表示没有任何类型（可以被赋值为 null 和 undefined）。 never 表示一个不包含值的类型，即表示永远不存在的值。 拥有 void 返回值类型的函数能正常运行。拥有 never 返回值类型的函数无法正常返回，无法终止，或会抛出异常。</p><h3 id="_15-ts的学前基础" tabindex="-1"><a class="header-anchor" href="#_15-ts的学前基础" aria-hidden="true">#</a> 15.TS的学前基础？</h3><p>因为 TypeScript 是对 JavaScript 的扩展，更准确的说是 ECMAScript。所以，学习TypeScript，需要具备 ECMAScript 语言的基础：</p><p>熟悉语法基础（变量、语句、函数等基础概念） 掌握内置对象（Array、Date 等）的使用 面向对象基本概念（构造函数、原型、继承）</p>`,45),c=[t];function i(o,l){return s(),a("div",null,c)}const d=n(p,[["render",i],["__file","05TypeScript.html.vue"]]);export{d as default};
