import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as s,f as e}from"./app-0mkQjek1.js";const t={},i=e(`<h1 id="腾讯二面" tabindex="-1"><a class="header-anchor" href="#腾讯二面" aria-hidden="true">#</a> 腾讯二面</h1><h2 id="_1-unity的坐标系-坐标映射" tabindex="-1"><a class="header-anchor" href="#_1-unity的坐标系-坐标映射" aria-hidden="true">#</a> 1. unity的坐标系，坐标映射</h2><p>unity: 世界坐标系、本地坐标系（物体中心）、屏幕坐标系（左下角）、视口坐标系（左下角，摄像机）</p><p>unity的屏幕坐标系：原点在左下角，向右x正方向，向上y正方向</p><p>浏览器坐标系：原点在左上角，向右x正方向，向下y正方向</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> scale <span class="token operator">=</span> _videoPlayer<span class="token punctuation">.</span>videoScale<span class="token operator">!</span><span class="token punctuation">;</span>
<span class="token comment">// 通过getBoundingClientRect()拿到视频元素相对于视口的上下左右距离</span>
<span class="token keyword">const</span> originX <span class="token operator">=</span> _videoPlayer<span class="token punctuation">.</span>videoOriginX<span class="token operator">!</span><span class="token punctuation">;</span> 
<span class="token keyword">const</span> originY <span class="token operator">=</span> _videoPlayer<span class="token punctuation">.</span>videoOriginY<span class="token operator">!</span><span class="token punctuation">;</span>
<span class="token comment">// e.clientX/Y拿到鼠标相对于浏览器视口的坐标</span>
<span class="token comment">// 记得处理unity和浏览器坐标系不一致的问题</span>
<span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>clientX <span class="token operator">-</span> originX<span class="token punctuation">)</span> <span class="token operator">/</span> scale<span class="token punctuation">;</span>
<span class="token keyword">const</span> y <span class="token operator">=</span> _videoPlayer<span class="token punctuation">.</span>videoHeight <span class="token operator">-</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>clientY <span class="token operator">-</span> originY<span class="token punctuation">)</span> <span class="token operator">/</span> scale<span class="token punctuation">;</span>

<span class="token comment">// ArrayBuffer 对象代表存储二进制数据的一段内存，是一个字节数组。不能被直接读写，需要创建dataView来操作二进制数据。</span>
<span class="token comment">// DataView 用来读写自定义复合类型的二进制数据。TypeArray 读写 11 种特定类型的二进制数据</span>
<span class="token comment">// DataView 是用来处理网络设备传来的数据的，并且支持设置字节序</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataView</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
data<span class="token punctuation">.</span><span class="token function">setUint8</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> InputEvent<span class="token punctuation">.</span>Mouse<span class="token punctuation">)</span><span class="token punctuation">;</span>
data<span class="token punctuation">.</span><span class="token function">setInt16</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
data<span class="token punctuation">.</span><span class="token function">setInt16</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
data<span class="token punctuation">.</span><span class="token function">setUint8</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>buttons<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 读写内存的api</span>
_videoPlayer<span class="token operator">?.</span><span class="token function">sendMsg</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 最终的buffer二进制数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-unity-stream-rendering底层" tabindex="-1"><a class="header-anchor" href="#_2-unity-stream-rendering底层" aria-hidden="true">#</a> 2. unity stream rendering底层</h2><p>Unity Render Streaming是Unity开源的一个<strong>高质量、高复杂的3D模型在云端渲染，手机端侧、浏览器显示的解决方案</strong>。</p><p>基于WebRTC，通过建立长连接，实时的传输画面，通过信令服务器（signalR）进行交互控制。</p><p>具体：这个包会对主机服务器的图形流信息进行编码，然后通过 WebRTC 协议将其发送给位于接收端的浏览器和设备。事实上，通过<strong>在高性能主机系统上运行渲染引擎</strong>，用户能在所有终端设备上享受到与主机相同的画质，并且能体验到所有的渲染引擎功能。</p><h3 id="_2-1-webrtc" tabindex="-1"><a class="header-anchor" href="#_2-1-webrtc" aria-hidden="true">#</a> 2.1 webrtc</h3><p>一种通过网页浏览器和移动应用程序进行实时通信的协议。该协议允许以直接链接 的方式传输音频和视频，用户<strong>无需下载任何插件或应用程序</strong>。<strong>通信命令通过 API 接口提交</strong>，前端只要声明一个<strong>video标签</strong>就可以实现视频流的加载和交互。</p><p>WebRTC 主要由三部分组成：<strong>浏览器 API</strong>、<strong>音视频引擎</strong>和<strong>网络 IO</strong>。</p><p>DTLS 有点类似 TLS，在UDP的基础上，实现信道的加密。</p><h4 id="_2-1-1-浏览器-api" tabindex="-1"><a class="header-anchor" href="#_2-1-1-浏览器-api" aria-hidden="true">#</a> 2.1.1 浏览器 API</h4><ul><li>getUserMedia: 获取麦克风和摄像头的许可，使得 WebRTC 可以拿到本地媒体流；</li><li>RTCPeerConnection: 建立点对点连接的关键，提供了创建，保持，监控，关闭连接的方法的实现。像媒体协商、收集候选地址都需要它来完成；</li><li>RTCDataChannel: 支持点对点数据传输，可用于传输文件、文本消息等。</li></ul><h4 id="_2-1-2-音视频引擎" tabindex="-1"><a class="header-anchor" href="#_2-1-2-音视频引擎" aria-hidden="true">#</a> 2.1.2 音视频引擎</h4><p>编码器：</p><ul><li>VP8: VP8，VP9，都是 Google 开源的视频编解码器，现在主要用于 WebRTC 视频编码；</li><li>H264: 视频编码领域的通用标准，提供了高效的视频压缩编码，之前 WebRTC 最先支持的是自己家的 VP8，后面也支持了 H264、H265 等。</li></ul><p>还有像回声消除 <code>AEC(Acoustic Echo Chancellor)</code>、背景噪音抑制 <code>ANS(Automatic Noise Suppression)</code>和 <code>Jitter buffer</code>用来防止视频抖动，这些问题在 WebRTC 中也提供了非常成熟、稳定的算法，并且提供图像增加处理，例如美颜，贴图，滤镜处理等。</p><h4 id="_2-1-3-网络i-o" tabindex="-1"><a class="header-anchor" href="#_2-1-3-网络i-o" aria-hidden="true">#</a> 2.1.3 网络I/O</h4><p>WebRTC 传输层用的是 <strong>UDP</strong> 协议，因为音视频传输对<strong>及时性</strong>要求更高，如果使用 TCP 当传输层协议的话，如果发生丢包的情况下，因为 TCP 的可靠性，就会尝试重连，那么传输的延迟就会达到 2 分钟。在延迟高的情况下，想做到正常的实时通讯显然是不可能的，此时 TCP 的可靠性反而成了弊端。</p><ul><li><code>RTP/SRTP</code>: 传输音视频数据流时，我们并不直接将音视频数据流交给 UDP 传输，而是先给音视频数据加个 RTP 头，然后再交给 UDP 进行，但是由于浏览器对安全性要求比较高，增加了加密这块的处理，采用 SRTP 协议；</li><li><code>RTCP</code>：通过 RTCP 可以知道各端的网络质量，这样对方就可以做流控处理；</li><li><code>P2P(ICE + STUN + TURN)</code>: 这是 WebRTC 最核心的技术，利用 ICE、STUN、TURN 等技术，实现了浏览器之间的直接点对点连接，解决了 <strong>NAT 穿透问题</strong>，实现了高质量的网络传输。</li><li>WebRTC 还需要一个<strong>信令服务</strong>做会话管理，但 WebRTC 规范里没有包含信令协议，需要自行实现。</li></ul><h4 id="_2-1-4-通信过程" tabindex="-1"><a class="header-anchor" href="#_2-1-4-通信过程" aria-hidden="true">#</a> 2.1.4 通信过程</h4><p><strong>WebRTC 终端：</strong> 负责音视频采集、编解码、NAT 穿越、音视频数据传输。</p><p><strong>Signal 服务器：</strong> 负责信令处理，如加入房间、离开房间、媒体协商消息的传递等。</p><p><strong>STUN/TURN 服务器：<strong>负责</strong>获取 WebRTC 终端在公网的 IP 地址</strong>，以及 NAT 穿越失败后的数据中转。</p><p>WebRTC通过<strong>ICE框架来解决网络穿透</strong>的问题，并对应用开发者屏蔽了复杂的技术细节。</p><ul><li>本地（WebRTC 终端）启动后，检测设备可用性，如果可用后开始进行音视频采集工作；</li><li>本地就绪后，发送“加入房间”信令到 Signal 服务器；</li><li>Signal 服务器创建房间，等待加入；</li><li>对端（WebRTC 终端）同样操作，加入房间，并通知另一端；</li><li>双端创建媒体连接对象 <code>RTCPeerConnection</code>，进行媒体协商；</li><li>双端进行连通性测试，最终建立连接；</li><li>将采集到的音视频数据通过 <code>RTCPeerConnection</code>对象进行编码，最终通过 P2P 传送给对端/本地，再进行解码、展示。</li></ul><h3 id="_2-2-udp的可靠性" tabindex="-1"><a class="header-anchor" href="#_2-2-udp的可靠性" aria-hidden="true">#</a> 2.2 udp的可靠性</h3><p>要基于 UDP 实现可靠的传输协议，那么就要在应用层下功夫。</p><p><strong>HTTP3的QUIC协议：</strong></p><ul><li>在一条 QUIC 连接上可以并发发送多个 HTTP 请求 (Stream)。<strong>每一个 Stream 都分配了一个独立的滑动窗口，这样使得一个连接上的多个 Stream 之间没有依赖关系，都是相互独立的，各自控制的滑动窗口</strong>。</li><li>QUIC 实现了自己的流量控制机制。每个 Stream 都有独立的滑动窗口，所以每个 Stream 都可以做流量控制，防止单个 Stream 消耗连接（Connection）的全部接收缓冲。限制连接中所有 Stream 相加起来的总字节数</li></ul><p><strong>WebRTC：</strong></p><p><strong>RTP协议：</strong> 先给音视频数据加个RTP头，再交给UDP进行传输</p><p><strong>RTCP协议：</strong> 两个重要的报文：RR（Reciever Report）和 SR(Sender Report)。通过这两个报文的交换，各端就知道自己的网络质量到底如何了。</p><p><strong>SDP会话描述协议：</strong> 通过信令服务器交换 SDP 信息，进行媒体协商，对其取交集，得到最后的编解码规则，传输协议等。</p><p><strong>ICE Candidate （ICE 候选者）：</strong> 端对端的建立，确定连接的协议、ip、端口</p><h2 id="_3-前端画面与unity画面的延迟" tabindex="-1"><a class="header-anchor" href="#_3-前端画面与unity画面的延迟" aria-hidden="true">#</a> 3. 前端画面与unity画面的延迟</h2><ol><li><p>unity运行的主机硬件条件</p><p>许多消费级显卡最多只能同时运行两个编码器，从而限制了电脑上可以运行的实例数量。对于专业级显卡来说，例如英伟达的 Quadro 或 Tesla 系列，或者基于云的 GPU 实例(AWS)则没有这些限制。</p><p>GPU能为视频编码提供加速，<strong>以高质量和超低延迟</strong>对游戏和应用程序进行编码和推流。</p></li><li><p>前端也做了缓冲处理，比如提交数据后引入进度条</p></li><li><p>仿真数据累计到一定程度才会驱动画面中列车的运行，所以unity画面里引入了等待动画</p></li></ol><h2 id="_4-threejs和frabicjs的底层实现方式" tabindex="-1"><a class="header-anchor" href="#_4-threejs和frabicjs的底层实现方式" aria-hidden="true">#</a> 4. threejs和frabicjs的底层实现方式</h2><p>Three.js正是封装的WebGL这个库，WebGL又是封装的OpenGLES 2.0与JavaScript。而OpenGLES 2.0又是OpenGL 三维图形 API 的一个子集，而OpenGL是用于渲染2D、3D矢量图形的跨语言、跨平台的应用程序编程接口（API）</p><p>基于Canvas的3d上下文实现的一个API</p><h2 id="_5-模型渲染的优化" tabindex="-1"><a class="header-anchor" href="#_5-模型渲染的优化" aria-hidden="true">#</a> 5. 模型渲染的优化</h2><p>GPU的渲染过程，通常称为图形渲染管线。图形渲染管线接受一组3D坐标，然后把它们转变为你屏幕上的有色2D像素输出。</p><p>渲染流程：顶点数据=》顶点着色器=》形状装配=》几何着色器=》光栅化=》片段着色器=》测试和混合</p><h3 id="_5-1-优化方式" tabindex="-1"><a class="header-anchor" href="#_5-1-优化方式" aria-hidden="true">#</a> 5.1 优化方式</h3><ol><li><p><strong>减少顶点数据量</strong>（顶点储存方式=&gt;顶点索引）</p><p>两个三角形的顶点是有重复的，而重复的顶点就造成存储的浪费。因而，更好的解决方案是只存储不同的顶点，然后通过索引来设定绘制这些顶点的顺序。</p></li><li><p><strong>重绘优化</strong></p><p>只有通过深度测试的顶点才会去执行片段着色器，换句话说，才会去计算该顶点对应像素的颜色。</p><p>深度测试：三维空间，可能会有多个顶点对应同一个像素。然后，记录每个顶点距离相机的距离。如果新投影的顶点比上个顶点距离相机更近，说明上个顶点会被遮挡；则只需要绘制新投影的顶点就可以了。</p></li><li><p><strong>顶点缓存优化</strong></p><p>GPU渲染网格的时候，需要对每个顶点执行顶点着色器。对顶点着色器变换的顶点进行缓存，同时，将具有重复顶点的三角形依次存储，就可以利用这个缓存减少顶点着色器的执行次数，从而减少GPU的计算量。</p></li></ol><h2 id="_6-模型加载的优化" tabindex="-1"><a class="header-anchor" href="#_6-模型加载的优化" aria-hidden="true">#</a> 6. 模型加载的优化</h2><ol><li><p>模型压缩</p><p>如Google Draco数据压缩算法，但是为了提高文件的压缩比，会打乱顶点和索引的顺序，从而降低模型的渲染效率。</p></li><li><p>格式转换（obj=&gt;二进制 glb）</p></li><li><p>indexdDB（前端本地存储数据库）缓存</p></li></ol><h2 id="_7-opengl的了解" tabindex="-1"><a class="header-anchor" href="#_7-opengl的了解" aria-hidden="true">#</a> 7. OpenGL的了解</h2><p>一个跨编程语言、跨平台的编程图形程序接口。流程见上。webgl就是基于它的二次封装。</p><h2 id="_8-前端框架解决了什么问题" tabindex="-1"><a class="header-anchor" href="#_8-前端框架解决了什么问题" aria-hidden="true">#</a> 8. 前端框架解决了什么问题</h2><ol><li>避免重复引用大量外部js（搭配构建工具，在入口文件引入一次，就可以在所有组件中使用这个插件）</li><li>组件化（逻辑复用，便于合作开发）</li><li>性能优化（声明式相对于命令式，减少dom操作）</li><li>spa单页面+路由的提出</li><li>封装的api（v-指令，hook，生命周期，数据管理）</li></ol><h2 id="_9-diff算法底层-react和vue" tabindex="-1"><a class="header-anchor" href="#_9-diff算法底层-react和vue" aria-hidden="true">#</a> 9. diff算法底层-react和vue</h2><h3 id="_9-1-相同点" tabindex="-1"><a class="header-anchor" href="#_9-1-相同点" aria-hidden="true">#</a> 9.1 相同点</h3><ul><li>都是<strong>两组虚拟dom</strong>的对比(react16.8之后是fiber与虚拟dom的对比)</li><li><strong>只对同级节点进行对比</strong>，简化了算法复杂度</li><li>都用<strong>key做为唯一标识</strong>，进行查找，只有key和标签类型相同时才会复用老节点</li><li>遍历前都会根据老的节点构建一个map，方便根据key快速查找</li></ul><h3 id="_9-2-不同点" tabindex="-1"><a class="header-anchor" href="#_9-2-不同点" aria-hidden="true">#</a> 9.2 不同点</h3><ul><li>react在diff遍历的时候，只对需要修改的节点进行了记录，形成effect list，最后才会根据effect list 进行真实dom的修改，修改时先删除，然后更新与移动，最后插入。</li><li>vue 在遍历的时候就用真实dom <code>insertBefore</code>方法，修改了真实dom，最后做的删除操作</li><li>react 采用单指针从左向右进行遍历</li><li>vue采用双指针，从两头向中间进行遍历（<strong>vue2：双端⽐较算法，vue3：借鉴ivi算法和inferno算法</strong>）</li><li>react的虚拟diff比较简单（如果元素的类型不同，React 会抛弃旧树并建立新树。如果元素是两个相同类型的 React DOM 元素时，React 会查看两者的属性，保留 DOM 节点，只更新改变的属性。）</li><li>vue中做了一些优化处理，相对复杂，但效率更高（双端比较的方法，设立 4 个指针）</li></ul><h2 id="_10-如何提高数据查询的性能" tabindex="-1"><a class="header-anchor" href="#_10-如何提高数据查询的性能" aria-hidden="true">#</a> 10. 如何提高数据查询的性能</h2><ol><li>索引</li><li>数据结构：散列表（O(1),无序的）、红黑树（二叉查找树logn，有序的）、跳表</li></ol><h2 id="_11-数据库的索引的作用" tabindex="-1"><a class="header-anchor" href="#_11-数据库的索引的作用" aria-hidden="true">#</a> 11. 数据库的索引的作用</h2><p>提高查找速度（如果频繁增删改，不适合）</p><h2 id="_12-查找快的不足" tabindex="-1"><a class="header-anchor" href="#_12-查找快的不足" aria-hidden="true">#</a> 12. 查找快的不足</h2><p>增删改频繁，则会导致索引频繁更新</p><h2 id="_13-数组与链表的增删改查区别" tabindex="-1"><a class="header-anchor" href="#_13-数组与链表的增删改查区别" aria-hidden="true">#</a> 13. 数组与链表的增删改查区别</h2><p>数组：</p><ul><li>增：对于插入操作，有序数组的<strong>时间复杂度是O(n)</strong>，因为他需要把比插入数大的都往后移.</li><li>删：对于删除操作，需要先找到该数，其次再删除该数，该数后面的数全部都往前移。因此总的过程的<strong>时间复杂度为O(N)级别</strong>。</li><li>改：同删除操作，“改”需要先找到该数，之后因为此数组有序，所以还得移动该数，使数组恢复有序。因此<strong>时间复杂度为O(N)</strong>.</li><li>查：根据下标索引很快O(1)</li></ul><p>链表：</p><ul><li>增：插入一个指定节点，时间复杂度为O(1)。</li><li>删除：删除指定节点，需要先找到指定位置，通过节点数据（假设数据不重复）删除指定位置节点,<strong>时间复杂度为O(N)</strong></li><li>修改：修改指定位置节点数据,需要先查找到该节点，<strong>时间复杂度为O(N)</strong></li><li>查询：查询某个节点的位置，查询某个位置中的节点数据，查询某个数据是否存在于链表中（假设数据不重复）,<strong>时间复杂度为O(N)</strong></li></ul><h2 id="_14-数组与链表在内存中布局区别" tabindex="-1"><a class="header-anchor" href="#_14-数组与链表在内存中布局区别" aria-hidden="true">#</a> 14. 数组与链表在内存中布局区别</h2><p>数组是将元素在内存中连续存储的，查找数据的时候效率比较高。但是，缺点：在存储之前，我们需要申请一块连续的内存空间，并且在编译的时候就必须确定好它的空间的大小。（需频繁查询）</p><p>链表是动态申请内存空间，在内存中可以在任意的位置，通过指针联系。增加和删除以及插入比数组灵活。（需频繁修改）</p><h2 id="_15-定量数组频繁增删改-怎么优化" tabindex="-1"><a class="header-anchor" href="#_15-定量数组频繁增删改-怎么优化" aria-hidden="true">#</a> 15. 定量数组频繁增删改，怎么优化</h2><p><strong>使用标记删除</strong>：对于需要删除元素的操作，可以使用标记删除的方式。<strong>即将要删除的元素标记为无效</strong>，而不是真正地从数组中删除。通过维护一个标记数组或使用元素自身的属性来标记删除的元素，可以在<strong>需要遍历数组时跳过无效的元素</strong>。当数组中无效元素的数量<strong>达到一定阈值时，可以触发一次真正的删除操作</strong>。</p><h2 id="_16-async-await底层" tabindex="-1"><a class="header-anchor" href="#_16-async-await底层" aria-hidden="true">#</a> 16. async/await底层</h2><p>生成器（协程）+co</p><h2 id="_17-什么是协程" tabindex="-1"><a class="header-anchor" href="#_17-什么是协程" aria-hidden="true">#</a> 17. 什么是协程</h2><p><strong>协程是一种比线程更轻量级的存在，它不由cpu直接调度，而是在用户态中通过程序来操纵。</strong> 你可以理解为协程是跑在线程上的任务，一个线程上可以有多个协程，但是一个线程同时只能执行一个协程。</p><p>比如，全局执行上下文在主线程上执行，可将全局执行上下文叫做父协程。当执行到a函数，主线程控制权由父协程转为a函数协程。</p><h2 id="_18-栈内存和堆内存的区别" tabindex="-1"><a class="header-anchor" href="#_18-栈内存和堆内存的区别" aria-hidden="true">#</a> 18. 栈内存和堆内存的区别</h2><p>栈内存是为线程留出的临时空间，栈空间存储的数据只能由当前线程访问。栈空间的分配和回收是由系统来做的，我们不需要手动控制。</p><p>堆内存大小不固定，可以动态扩容，空间由程序员动态分配，更加灵活。堆内存可以被一个进程内所有的线程访问，容易出问题。</p><h2 id="_19-为什么引用类型放堆-基础类型放栈" tabindex="-1"><a class="header-anchor" href="#_19-为什么引用类型放堆-基础类型放栈" aria-hidden="true">#</a> 19. 为什么引用类型放堆，基础类型放栈</h2><ul><li>堆比栈大，栈比堆的运算速度快。</li><li>引用数据类型可以自由扩展，如：数组可以无限扩充，对象可以自由添加属性。将他们放在堆中是为了不影响栈的效率。而是通过引用的方式查找到堆中的实际对象再进行操作。</li><li>简单数据类型就比较稳定，并且它只占据很小的内存。放在堆，指针指向，要花费时间。</li></ul><h2 id="_20-栈内存需要垃圾回收吗" tabindex="-1"><a class="header-anchor" href="#_20-栈内存需要垃圾回收吗" aria-hidden="true">#</a> 20. 栈内存需要垃圾回收吗</h2><p>不需要，js垃圾回收（标记清除）是针对引用数据类型。</p><h2 id="_21-js定义数组为什么可以不设置长度-怎么实现的" tabindex="-1"><a class="header-anchor" href="#_21-js定义数组为什么可以不设置长度-怎么实现的" aria-hidden="true">#</a> 21. js定义数组为什么可以不设置长度，怎么实现的</h2><p>js数组和上述数组有点特殊</p><ul><li>js数组可以是不同数据类型元素</li><li>js数组可以任意更改大小</li></ul><p>在JS中数组存在两种形式：</p><ul><li>一种是与 <code>C/C++</code> 等相同的在连续内存中存放数据的<strong>快数组</strong>，</li><li>另一种是 <code>HashTable</code> 结构的<strong>慢数组</strong>，是一种典型的<strong>字典形式</strong>。长度可变，<strong>通过扩容</strong>和<strong>收缩机制</strong></li><li>在 V8 引擎中，直接创建数组默认的方式是创建<strong>快数组</strong>，会直接为数组开辟<strong>一定大小连续的内存</strong>。</li></ul><h2 id="_22-解释型语言和编译型语言的区别" tabindex="-1"><a class="header-anchor" href="#_22-解释型语言和编译型语言的区别" aria-hidden="true">#</a> 22. 解释型语言和编译型语言的区别</h2><ul><li>js<strong>解释型语言</strong>：执行程序都需要一边转换一边执行，用到哪些源代码就将哪些源代码转换成机器码，用不到的不进行任何处理。可跨平台运行。</li><li><strong>编译型语言</strong>：将所有的源代码编译成机器码（exe文件）后，就可随时运行。不可跨平台运行。</li></ul><h2 id="_23-解释型语言如何保障性能-v8-js引擎" tabindex="-1"><a class="header-anchor" href="#_23-解释型语言如何保障性能-v8-js引擎" aria-hidden="true">#</a> 23. 解释型语言如何保障性能（V8 js引擎）</h2><p>V8 采用了<strong>延迟解析</strong>（lazy parsing）等方式保证了语言的快速启动，在解析过程中，对于不是立即执行的函数，只进行预解析；</p><p>V8是基于AST直接生成本地代码，没有经过中间表示层的优化，所以本地代码尚未经过很好的优化。</p><h2 id="_24-跨端有哪些了解" tabindex="-1"><a class="header-anchor" href="#_24-跨端有哪些了解" aria-hidden="true">#</a> 24. 跨端有哪些了解</h2><p>flutter、react native、weex</p><h2 id="_25-uni底层是如何实现跨端" tabindex="-1"><a class="header-anchor" href="#_25-uni底层是如何实现跨端" aria-hidden="true">#</a> 25. uni底层是如何实现跨端</h2><p>uni-app能实现一套代码、多端运行，是通过编译器和runtime配合完成的。</p><p>编译器将开发者的代码进行编译，编译的输出物由各个终端的runtime进行解析，uni-app在每个平台（Web、Android App、iOS App、各家小程序）都有各自的runtime。</p><ul><li>开发者按uni-app规范编写代码，由编译器将开发者的代码编译生成每个平台支持的特有代码 <ul><li>在web平台，将.vue文件编译为js代码。与普通的vue cli项目类似</li><li>在微信小程序平台，编译器将.vue文件拆分生成wxml、wxss、js等代码</li><li>在app平台，将.vue文件编译为js代码。进一步，如果涉及uts代码：</li><li>在Android平台，将.uts文件编译为kotlin代码</li><li>在iOS平台，将.uts文件编译为swift代码</li></ul></li></ul>`,103),o=[i];function r(p,l){return a(),s("div",null,o)}const u=n(t,[["render",r],["__file","tenxun2.html.vue"]]);export{u as default};
