import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as t,c as p,a as n,t as o,f as a}from"./app-0mkQjek1.js";const c="/assets/1721360645653-YSvOpbf5.png",i={},l=a(`<h1 id="百度一面" tabindex="-1"><a class="header-anchor" href="#百度一面" aria-hidden="true">#</a> 百度一面</h1><h2 id="_1-简单自我介绍-个人情况-技术栈-项目" tabindex="-1"><a class="header-anchor" href="#_1-简单自我介绍-个人情况-技术栈-项目" aria-hidden="true">#</a> 1. 简单自我介绍（个人情况+技术栈+项目）</h2><h2 id="_2-青岛项目-角色-具体内容" tabindex="-1"><a class="header-anchor" href="#_2-青岛项目-角色-具体内容" aria-hidden="true">#</a> 2. 青岛项目（角色+具体内容）</h2><ol><li>前处理：参数的输入校验与预填、资源预览（2d、3d）、用户管理</li><li>后处理：视频流渲染</li></ol><h2 id="_3-整个项目如何搭建" tabindex="-1"><a class="header-anchor" href="#_3-整个项目如何搭建" aria-hidden="true">#</a> 3. 整个项目如何搭建</h2><ol><li>确定技术栈：react（对js要求更高）+umi（多终端自适应）+ant-design（适配react）</li><li>环境准备：node，yarn管理npm依赖</li><li>创建项目：yarn create @umijs/umi-app</li><li>配置文件：config.ts基于umi官方文档配置，配置路由、baseurl、publicPath等</li><li>打包部署：umi build（基于webpack）输出dist文件夹</li></ol><h2 id="_4-青岛项目数据管理怎么做的" tabindex="-1"><a class="header-anchor" href="#_4-青岛项目数据管理怎么做的" aria-hidden="true">#</a> 4. 青岛项目数据管理怎么做的</h2><p>采用的是umi提供的一个插件。</p><p>一种基于 <code>hooks</code> 范式的简易数据管理方案（部分场景可以取代 <code>dva</code>），通常用于中台项目的全局共享数据。</p><p>它约定在src/model文件夹中的文件为model文件。每个文件需要默认导出一个 function，该 function 定义了一个 Hook。就是自定义 <code>hooks</code> 模块。</p><p><code>@umijs/plugin-model</code> 把自定义hook里的状态变成了『全局状态』，多个组件中使用该 <code>model</code>文件 时，拿到的同一份状态。从而实现全局数据的管理。</p><h2 id="_5-usemodel怎么把数据和组件串联起来的" tabindex="-1"><a class="header-anchor" href="#_5-usemodel怎么把数据和组件串联起来的" aria-hidden="true">#</a> 5. useModel怎么把数据和组件串联起来的</h2><ol><li><strong>基于 <code>React.Context</code> 创建一个全局的 <code>Context</code></strong>;</li><li><strong>使用 <code>Context.Provider</code> 包裹根组件，并执行所有的 <code>useModel</code> 对应的 <code>hooks</code></strong></li><li><strong>在 <code>useModel</code> 函数中通过 <code>useContext</code> 获取到 <code>dispatcher</code>, 并更新数据</strong></li></ol><h2 id="_6-数据如何做抽离-哪些放全局-哪些放私有作用域" tabindex="-1"><a class="header-anchor" href="#_6-数据如何做抽离-哪些放全局-哪些放私有作用域" aria-hidden="true">#</a> 6. 数据如何做抽离，哪些放全局，哪些放私有作用域</h2><p>多个组件都要用到的我就会把它放在全局，比如有车辆、轨道等组件，它们的数据我会放在全局，因为在后处理界面中，有一个结果导出，需要用到。但projectlist就只会放到项目组件中。</p><h2 id="_7-token放在哪-为什么" tabindex="-1"><a class="header-anchor" href="#_7-token放在哪-为什么" aria-hidden="true">#</a> 7. token放在哪，为什么</h2><p>放在了seesionStorage中。cookie每次http请求时会携带，容易受到跨站脚本攻击（XSS），localStorage存储时间长需手动删除。考虑到具体业务需求，对方是想要关闭窗口后重新登录还是说不用登录，并进行加密存储数据、定期更新令牌。</p><h2 id="_8-视频流如何拿到-websocket用时有没有bug" tabindex="-1"><a class="header-anchor" href="#_8-视频流如何拿到-websocket用时有没有bug" aria-hidden="true">#</a> 8. 视频流如何拿到，websocket用时有没有bug</h2><p>一般方式：websocket（双向）、服务器推送（服=&gt;客）、客户端轮询(客=&gt;服)</p><p>unity stream rendering这个库的通信基础技术是基于signalR，会自动根据客户端状态选择通信方式（websocket&gt;server sent events(SSE)&gt;long polling(长轮询)），同时引入了<strong>断线重连机制</strong>和自定义故障处理机制。</p><p>websocket的onopen函数中引入心跳机制，每隔几十秒向服务端发送一个状态，防止断开</p><p>将connectionID设为projectId保证连接一对一</p><h2 id="_9-自定义hook有用过吗" tabindex="-1"><a class="header-anchor" href="#_9-自定义hook有用过吗" aria-hidden="true">#</a> 9. 自定义hook有用过吗</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>

<span class="token keyword">const</span> <span class="token function-variable function">useMyHook</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">initValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>initValue <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token function-variable function">onChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setValue</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> onChange <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> myHookValue <span class="token operator">=</span> <span class="token function">useMyHook</span><span class="token punctuation">(</span><span class="token string">&#39;myHook&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;app&quot;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>value<span class="token operator">:</span><span class="token punctuation">{</span>myHookValue<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>input value<span class="token operator">=</span><span class="token punctuation">{</span>myHookValue<span class="token punctuation">.</span>value<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span>myHookValue<span class="token punctuation">.</span>onChange<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-有了解redux以及其他数据管理方式吗" tabindex="-1"><a class="header-anchor" href="#_10-有了解redux以及其他数据管理方式吗" aria-hidden="true">#</a> 10. 有了解redux以及其他数据管理方式吗</h2><ul><li>Redux会将整个应用状态(其实也就是数据)存储到 <code>Store</code></li><li>Store里面保存一棵状态树(<code>state tree</code>)</li><li>组件改变state的唯一方法是通过调用store的 <code>dispatch</code>方法，触发一个 <code>action</code>，这个action被对应的 <code>reducer</code>处理，于是state完成更新</li></ul><p><img src="`+c+'" alt="1721360645653" loading="lazy"></p><h2 id="_11-redux和umi的区别" tabindex="-1"><a class="header-anchor" href="#_11-redux和umi的区别" aria-hidden="true">#</a> 11. redux和umi的区别</h2><p>传统的context数据流不清晰，无法追踪数据由哪个组件更改的。</p><p>redux：数据流清晰，改变数据有统一的入口 - dispatch一个action（数据单向流动）</p><p>umi：它是基于React.context的二次封装，使得数据流清晰，它更改数据是通过调用自定义hook（model文件）中定义的更改数据的函数实现的，更改函数与数据在一个文件中</p><h2 id="_12-部署时有做什么配置吗" tabindex="-1"><a class="header-anchor" href="#_12-部署时有做什么配置吗" aria-hidden="true">#</a> 12. 部署时有做什么配置吗</h2><ol><li>前端：跨域设置、baseUrl设置、publicPath等</li><li>云服务器：usr/local/html/nginx.conf文件进行nginx配置</li><li>后端：cors跨域配置，access-control-allow-origin/credential等，express框架很简单app.use(cors())</li></ol><h2 id="_13-说下cors的了解" tabindex="-1"><a class="header-anchor" href="#_13-说下cors的了解" aria-hidden="true">#</a> 13. 说下cors的了解</h2><p>浏览器同源策略、前后端配合。</p><p>两种请求，简单请求（GET\\POST\\HEAD）和非简单请求（有一次cors预检请求-OPTIONS方法）</p><p>与JSONP比较：功能相同，但JSONP只支持GET请求</p><h2 id="_14-配置域名时用星号会有什么问题" tabindex="-1"><a class="header-anchor" href="#_14-配置域名时用星号会有什么问题" aria-hidden="true">#</a> 14. 配置域名时用星号会有什么问题</h2><p>设置 <code>*</code>是最简单粗暴的，但是服务器出于安全考虑，肯定不会这么干，而且，如果是*的话，浏览器将不会发送 <code>cookies</code>，即使你的 <code>XHR</code>设置了 <code>withCredentials</code></p><h2 id="_15-跨域在哪一块控制-是因为什么导致的" tabindex="-1"><a class="header-anchor" href="#_15-跨域在哪一块控制-是因为什么导致的" aria-hidden="true">#</a> 15. 跨域在哪一块控制，是因为什么导致的</h2><p>后端，浏览器导致的，同源策略</p><h2 id="_16-解决跨域的方法" tabindex="-1"><a class="header-anchor" href="#_16-解决跨域的方法" aria-hidden="true">#</a> 16. 解决跨域的方法</h2><p>cors，nginx反向代理、jsonp，前端代理</p><h2 id="_17-前端配置代理和nginx代理区别" tabindex="-1"><a class="header-anchor" href="#_17-前端配置代理和nginx代理区别" aria-hidden="true">#</a> 17. 前端配置代理和nginx代理区别</h2><p>前端代理：正向代理，“一台代理服务器&quot;代替了&quot;客户端”，去和&quot;目标服务器&quot;进行交互</p><p>nginx：反向代理，“一台代理服务器&quot;代替了&quot;目标服务器”，去和&quot;客户端&quot;进行交互。此时反向代理服务器与后端服务器是一个整体.</p><h2 id="_18-原型链" tabindex="-1"><a class="header-anchor" href="#_18-原型链" aria-hidden="true">#</a> 18. 原型链</h2><p>每个对象通过 <code>__proto__</code> 指针指向其原型对象，并从中继承方法和属性，同时原型对象也可能拥有原型，这样一层一层，最终指向 null</p><h2 id="_19-es6继承的底层原理" tabindex="-1"><a class="header-anchor" href="#_19-es6继承的底层原理" aria-hidden="true">#</a> 19. es6继承的底层原理</h2><p>底层的实现原理依然是构造函数和<strong>寄生组合式继承</strong></p><h2 id="_20-寄生组合继承分别继承原对象哪些属性-为啥用这个方法" tabindex="-1"><a class="header-anchor" href="#_20-寄生组合继承分别继承原对象哪些属性-为啥用这个方法" aria-hidden="true">#</a> 20. 寄生组合继承分别继承原对象哪些属性，为啥用这个方法</h2>',51),u=a(`<li><p>组合式继承（产生两个父类实例）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token operator">||</span> <span class="token string">&#39;wangxiao&#39;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age <span class="token operator">||</span> <span class="token number">27</span>
<span class="token punctuation">}</span>
<span class="token class-name">People</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">eat</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">&#39;eat sleep&#39;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Woman</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">People</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span> <span class="token comment">// 构造函数call继承一次</span>
<span class="token punctuation">}</span>
<span class="token class-name">Woman</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 原型链继承一次，父类的实例作为子类的实例</span>
<span class="token class-name">Woman</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Woman<span class="token punctuation">;</span>
<span class="token keyword">let</span> wonmanObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Woman</span><span class="token punctuation">(</span>ren<span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
wonmanObj<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),r=n("p",null,"寄生组合式继承",-1),d=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//父类</span>
<span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token operator">||</span> <span class="token string">&#39;wangxiao&#39;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age <span class="token operator">||</span> <span class="token number">27</span>
<span class="token punctuation">}</span>
<span class="token comment">//父类方法</span>
<span class="token class-name">People</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">eat</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">&#39;eat sleep&#39;</span>
<span class="token punctuation">}</span>
<span class="token comment">//子类</span>
<span class="token keyword">function</span> <span class="token function">Woman</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">//继承父类属性</span>
  <span class="token function">People</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//继承父类方法</span>
<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// 创建空类代替父类</span>
  <span class="token keyword">let</span> <span class="token function-variable function">Super</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token class-name">Super</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token class-name">People</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
  <span class="token comment">//空类的实例作为子类的原型</span>
  <span class="token class-name">Woman</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//修复构造函数指向问题</span>
<span class="token class-name">Woman</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Woman<span class="token punctuation">;</span>
<span class="token keyword">let</span> womanObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Woman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),k=a(`<h2 id="_21-call用来做什么" tabindex="-1"><a class="header-anchor" href="#_21-call用来做什么" aria-hidden="true">#</a> 21. call用来做什么</h2><ol><li>改变this指向call(this,1,2,3)</li><li>类型检测Object.prototype.toString.call()</li><li>伪数组转数组Array.prototype.slice.call(arg)</li></ol><h2 id="_22-对闭包的了解" tabindex="-1"><a class="header-anchor" href="#_22-对闭包的了解" aria-hidden="true">#</a> 22. 对闭包的了解</h2><ol><li>私有化，库的封装</li><li>防止变量污染</li><li>变量常驻</li><li>形式：函数返回函数、立即执行函数</li></ol><h2 id="_23-模块化和闭包有什么关系" tabindex="-1"><a class="header-anchor" href="#_23-模块化和闭包有什么关系" aria-hidden="true">#</a> 23. 模块化和闭包有什么关系</h2><p>闭包可以用来创建模块化，使得使用该模块时，不会污染变量，使得外部可以访问内部变量</p><h2 id="_24-节流防抖和应用" tabindex="-1"><a class="header-anchor" href="#_24-节流防抖和应用" aria-hidden="true">#</a> 24. 节流防抖和应用</h2><p>节流：每隔一段时间才执行一次，在此期间又点一次，无效（搜索框联想，鼠标滚动底部加载）</p><p>防抖：在未达到时间内又点一次则重新执行（窗口拖动大小，搜索框请求）</p><h2 id="_25-手撕-节流" tabindex="-1"><a class="header-anchor" href="#_25-手撕-节流" aria-hidden="true">#</a> 25. 手撕：节流</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">tro</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> timeout
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>timeout<span class="token punctuation">)</span><span class="token punctuation">{</span>
            timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
            <span class="token function">fn</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
            timeout <span class="token operator">=</span> <span class="token keyword">null</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_26-手撕-算法" tabindex="-1"><a class="header-anchor" href="#_26-手撕-算法" aria-hidden="true">#</a> 26. 手撕：算法</h2><h2 id="_27-二叉树的深度和广度遍历" tabindex="-1"><a class="header-anchor" href="#_27-二叉树的深度和广度遍历" aria-hidden="true">#</a> 27. 二叉树的深度和广度遍历</h2><p>深度：前中后序遍历的逻辑其实都是可以借助<strong>栈使用非递归</strong>的方式来实现的</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20200806191109896.png" alt="img" loading="lazy"></p><p>广度：使用<strong>队列</strong>来实现,就是从左到右一层一层的去遍历二叉树</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20210203151058308.png" alt="107.二叉树的层次遍历II" loading="lazy"></p><h2 id="_28-为什么选择前端" tabindex="-1"><a class="header-anchor" href="#_28-为什么选择前端" aria-hidden="true">#</a> 28. 为什么选择前端</h2><ol><li>课题组方向：本科毕设、项目</li><li>姐姐</li><li>个人偏好</li></ol>`,19);function h(s,m){return t(),p("div",null,[l,n("ol",null,[u,n("li",null,[r,n("p",null,"引入一个空类，这个空类的"+o(s.proto)+"指向父类，这样外部继承只要继承在这个寄生在父类上的空类就好了",1),d])]),k])}const g=e(i,[["render",h],["__file","BaiduPre1.html.vue"]]);export{g as default};
