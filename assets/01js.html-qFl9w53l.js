import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o as d,c as r,a,d as e,w as t,b as n,f as s}from"./app-0SoiKzJB.js";const p={},u=s('<h1 id="js基础" tabindex="-1"><a class="header-anchor" href="#js基础" aria-hidden="true">#</a> JS基础</h1><h2 id="_1-js认知" tabindex="-1"><a class="header-anchor" href="#_1-js认知" aria-hidden="true">#</a> 1 JS认知</h2><h3 id="_1-1-js组成" tabindex="-1"><a class="header-anchor" href="#_1-1-js组成" aria-hidden="true">#</a> 1.1 JS组成</h3>',3),h=a("li",null,"ECMAScript - JS语法",-1),k=s('<h3 id="_1-2-js书写位置" tabindex="-1"><a class="header-anchor" href="#_1-2-js书写位置" aria-hidden="true">#</a> 1.2 JS书写位置</h3><ol><li>行内式 <ul><li>将单行或少量代码写在HTML标签的事件属性中（以on开头的属性）</li><li>HTML中推荐使用双引号，JS中推荐使用单引号</li></ul></li><li>内嵌式 <code>&lt;script&gt;&lt;/script&gt;</code></li><li>外部式 <code>&lt;script scr=&quot;main.js&quot;&gt;&lt;/script&gt;</code></li></ol><h3 id="_1-3-js注释" tabindex="-1"><a class="header-anchor" href="#_1-3-js注释" aria-hidden="true">#</a> 1.3 JS注释</h3><ol><li>单行注释//（ctrl + /）</li><li>多行注释/* */（shift + alt + a）</li></ol><h2 id="_2-输入输出语句" tabindex="-1"><a class="header-anchor" href="#_2-输入输出语句" aria-hidden="true">#</a> 2 输入输出语句</h2><h3 id="_2-1-alert" tabindex="-1"><a class="header-anchor" href="#_2-1-alert" aria-hidden="true">#</a> 2.1 alert</h3><p>弹出警示框</p><p>语法 <code>prompt(&#39;弹出的语句&#39;)</code></p><h3 id="_2-2-console" tabindex="-1"><a class="header-anchor" href="#_2-2-console" aria-hidden="true">#</a> 2.2 console</h3><p>控制台输出，用于测试</p><p>语法 <code>console.log(&#39;输出的语句&#39;)</code></p><h3 id="_2-3-dir" tabindex="-1"><a class="header-anchor" href="#_2-3-dir" aria-hidden="true">#</a> 2.3 dir</h3><p>打印DOM返回的元素对象</p><p>语法 <code>console.dir(元素对象)</code></p><h3 id="_2-4-prompt" tabindex="-1"><a class="header-anchor" href="#_2-4-prompt" aria-hidden="true">#</a> 2.4 prompt</h3><p>弹出输入框</p><p>语法 <code>prompt(&#39;请用户输入的提示语句&#39;)</code></p><p>框里输入的值接收为字符串类型</p><h2 id="_3-变量-常量、基本数据类型" tabindex="-1"><a class="header-anchor" href="#_3-变量-常量、基本数据类型" aria-hidden="true">#</a> 3 变量&amp;常量、基本数据类型</h2><p>用于存放数据，是内存中申请的一段空间</p><h3 id="_3-1-变量声明" tabindex="-1"><a class="header-anchor" href="#_3-1-变量声明" aria-hidden="true">#</a> 3.1 变量声明</h3><h4 id="_3-1-1-声明关键词" tabindex="-1"><a class="header-anchor" href="#_3-1-1-声明关键词" aria-hidden="true">#</a> 3.1.1 声明关键词</h4><ol><li><code>var</code>：声明一个全局或局部变量，可选初始化一个值（不建议使用）</li><li><code>let</code>：声明一个块作用域的局部变量，可选初始化一个值</li><li><code>const</code>：声明一个块作用域的只读常量</li></ol><h4 id="_3-1-2-声明变量-初始化" tabindex="-1"><a class="header-anchor" href="#_3-1-2-声明变量-初始化" aria-hidden="true">#</a> 3.1.2 声明变量&amp;初始化</h4><ol><li><code>var 变量名 = 值</code></li><li><code>let 变量名 = 值</code></li><li><code>const 常量名 = 值</code></li></ol><h4 id="_3-1-3-同时声明" tabindex="-1"><a class="header-anchor" href="#_3-1-3-同时声明" aria-hidden="true">#</a> 3.1.3 同时声明</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> 变量名<span class="token number">1</span> <span class="token operator">=</span> 值<span class="token punctuation">,</span>\n    变量<span class="token number">2</span> <span class="token operator">=</span> 值\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-1-4-不声明直接赋值" tabindex="-1"><a class="header-anchor" href="#_3-1-4-不声明直接赋值" aria-hidden="true">#</a> 3.1.4 不声明直接赋值</h4><p><code>变量 = 值</code>，会创建一个未声明的全局变量，不建议使用</p><h3 id="_3-2-变量-常量命名规范" tabindex="-1"><a class="header-anchor" href="#_3-2-变量-常量命名规范" aria-hidden="true">#</a> 3.2 变量&amp;常量命名规范</h3><ol><li>以字母、下划线、美元符号开头，后续可以包含字母、数字、下划线</li><li>严格区分大小写</li><li>不能是关键字和保留字</li></ol><h3 id="_3-3-基本数据类型" tabindex="-1"><a class="header-anchor" href="#_3-3-基本数据类型" aria-hidden="true">#</a> 3.3 基本数据类型</h3><p>七种基本数据类型：</p><ol><li>数字（<strong>Number</strong>），整数、浮点数、NaN</li><li>字符串（<strong>String</strong>）</li><li>布尔值（<strong>Boolean</strong>）</li><li><strong>null</strong>，特殊关键字，表示<strong>没有对象</strong>，代表一个空对象指针。因为js大小写敏感，所以 <code>null</code> 与 <code>Null</code>、<code>NULL</code>或变体完全不同</li><li><strong>undefined</strong>，特殊关键字，表示<strong>缺少值</strong></li><li>任意精度的整数（<strong>BigInt</strong>），可以安全地存储和操作大整数，甚至可以超过数字的安全整数限制</li><li>代表（<strong>Symbol</strong>，在 ECMAScript 6 中新添加的类型）。一种实例是唯一且不可改变的数据类型</li></ol><h3 id="_3-4-检测数据类型" tabindex="-1"><a class="header-anchor" href="#_3-4-检测数据类型" aria-hidden="true">#</a> 3.4 检测数据类型</h3><p><code>typeof 待检测变量</code></p><h2 id="_4-数字型number" tabindex="-1"><a class="header-anchor" href="#_4-数字型number" aria-hidden="true">#</a> 4 数字型Number</h2><p>数字类型可以用来保存整数和浮点数</p><h3 id="_4-1-数字型进制" tabindex="-1"><a class="header-anchor" href="#_4-1-数字型进制" aria-hidden="true">#</a> 4.1 数字型进制</h3><ol><li>八进制：数字前+0</li><li>16进制：数字前+0x</li></ol><h3 id="_4-2-数字范围" tabindex="-1"><a class="header-anchor" href="#_4-2-数字范围" aria-hidden="true">#</a> 4.2 数字范围</h3><ol><li>最大值1.79e+308</li><li>最小值5e-324</li></ol><h3 id="_4-3-特殊值" tabindex="-1"><a class="header-anchor" href="#_4-3-特殊值" aria-hidden="true">#</a> 4.3 特殊值</h3><ol><li>无穷大：Infinity</li><li>无穷小：-Infinity</li><li>非数字：NaN</li></ol><h3 id="_4-4-数字判断" tabindex="-1"><a class="header-anchor" href="#_4-4-数字判断" aria-hidden="true">#</a> 4.4 数字判断</h3><p><code>isNaN()</code>判断是不是非数字</p><h3 id="_4-5-其他类型转换成数字型" tabindex="-1"><a class="header-anchor" href="#_4-5-其他类型转换成数字型" aria-hidden="true">#</a> 4.5 其他类型转换成数字型</h3><ol><li><code>parseInt(字符串型变量)</code>变为整型</li><li><code>parseFloat(字符串型变量)</code>变为浮点型 <ul><li>parseInt和parseFloat会去除数字之后的字符串，但是不能去除数字之前的字符串</li></ul></li><li><code>Number(变量)</code></li><li>利用算术运算隐式转换为数字型</li></ol><h2 id="_5-字符串型string" tabindex="-1"><a class="header-anchor" href="#_5-字符串型string" aria-hidden="true">#</a> 5 字符串型String</h2><p>推荐使用单引号</p><h3 id="_5-1-字符串嵌套" tabindex="-1"><a class="header-anchor" href="#_5-1-字符串嵌套" aria-hidden="true">#</a> 5.1 字符串嵌套</h3><p>外单内双进行嵌套</p><h3 id="_5-2-字符串转义符" tabindex="-1"><a class="header-anchor" href="#_5-2-字符串转义符" aria-hidden="true">#</a> 5.2 字符串转义符</h3><ol><li>换行 <code>\\n</code></li><li>tab缩进 <code>\\t</code></li><li>空格 <code>\\b</code></li></ol><h3 id="_5-3-字符串的拼接" tabindex="-1"><a class="header-anchor" href="#_5-3-字符串的拼接" aria-hidden="true">#</a> 5.3 字符串的拼接</h3><ol><li>用+拼接 <ul><li>只要有一个部分是字符串，输出都是字符串，和其他数据类型没关系</li><li>变量可以直接把内容拼接到字符串里</li></ul></li><li>模板字符串拼接</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>`string text ${变量} string text`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-4-字符串常用方法" tabindex="-1"><a class="header-anchor" href="#_5-4-字符串常用方法" aria-hidden="true">#</a> 5.4 字符串常用方法</h3>',58),b={href:"https://www.runoob.com/jsref/jsref-obj-string.html",target:"_blank",rel:"noopener noreferrer"},_=s(`<ol><li>返回长度 <code>字符串.length</code></li><li>大小写转换 <code>字符串.toLowerCase()|字符串.toUpperCase()</code></li><li>分割字符串为字符串数组 字符串.split(&quot;分割的值&quot;)</li><li>返回指定位置字符串内容 <code>字符串.charAt(位置索引)|字符串.substring(起始位置索引,结束位置索引)</code></li><li>返回指定字符在字符串中首次出现的位置 <code>字符串.indexOf(查找的字符,起始的位置)</code></li><li>判断子字符串的存在 <code>字符串.includes(子字符串)</code></li></ol><h3 id="_5-5-其他类型转换成字符串" tabindex="-1"><a class="header-anchor" href="#_5-5-其他类型转换成字符串" aria-hidden="true">#</a> 5.5 其他类型转换成字符串</h3><ol><li><code>变量.toString()</code></li><li><code>String(变量)</code>函数强制转换</li><li>加号拼接</li></ol><h3 id="_5-6-字符串的不可变" tabindex="-1"><a class="header-anchor" href="#_5-6-字符串的不可变" aria-hidden="true">#</a> 5.6 字符串的不可变</h3><ul><li>指的是里面的值不可变，虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间</li><li>因为字符串的不可变不要大量拼接字符串</li></ul><h2 id="_6-布尔型boolean" tabindex="-1"><a class="header-anchor" href="#_6-布尔型boolean" aria-hidden="true">#</a> 6 布尔型Boolean</h2><ul><li>true可以当1来看</li><li>false可以当0来看</li></ul><h3 id="_6-1-其他类型转换成布尔型" tabindex="-1"><a class="header-anchor" href="#_6-1-其他类型转换成布尔型" aria-hidden="true">#</a> 6.1 其他类型转换成布尔型</h3><ol><li><code>Boolean(变量)</code></li><li>代表空的&#39;&#39;|0|NaN|null|undefined转换成false</li><li>其他都是true</li></ol><h2 id="_7-运算符" tabindex="-1"><a class="header-anchor" href="#_7-运算符" aria-hidden="true">#</a> 7 运算符</h2><h3 id="_7-1-算数运算符" tabindex="-1"><a class="header-anchor" href="#_7-1-算数运算符" aria-hidden="true">#</a> 7.1 算数运算符</h3><p><img src="https://i.loli.net/2020/12/16/jHzUZP3Vwav6iLk.jpg" alt="算数运算符汇总.jpg" loading="lazy"></p><ul><li>浮点数存在阶段误差，不要判断浮点数是否相等</li><li>算数运算符的优先级和平时一样</li></ul><h3 id="_7-2-递增递减运算符" tabindex="-1"><a class="header-anchor" href="#_7-2-递增递减运算符" aria-hidden="true">#</a> 7.2 递增递减运算符</h3><ol><li><code>++</code>递增，每次加1</li><li><code>--</code>递减，每次减1</li><li>前置递增|递减：运算符在变量前面，先计算后输出</li><li>后置递增|递减：运算符在变量后面，先输出后计算</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>age <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出21，前置递增</span>
age <span class="token operator">=</span> <span class="token number">10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token operator">++</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出20，后置递增</span>
<span class="token comment">// 但是两个age都是11</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-3-比较运算符" tabindex="-1"><a class="header-anchor" href="#_7-3-比较运算符" aria-hidden="true">#</a> 7.3 比较运算符</h3><p><img src="https://i.loli.net/2020/12/16/ZxR1udmONy3jor5.jpg" alt="比较运算符汇总.jpg" loading="lazy"></p><ul><li><code>==</code>比较的时候会自动转换数据类型</li><li><code>===</code>同时要求值和数据类型</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">18</span> <span class="token operator">==</span> <span class="token string">&#39;18&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">18</span> <span class="token operator">===</span> <span class="token string">&#39;18&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-4-逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_7-4-逻辑运算符" aria-hidden="true">#</a> 7.4 逻辑运算符</h3><p><img src="https://i.loli.net/2020/12/16/cSAE8t6PZHRnlYy.jpg" alt="逻辑运算符汇总.jpg" loading="lazy"></p><p>短路运算：当有多个表达式时，左边表达式可以确定结果后就不再进行右边的运算</p><h4 id="_7-4-1-断路" tabindex="-1"><a class="header-anchor" href="#_7-4-1-断路" aria-hidden="true">#</a> 7.4.1 &amp;&amp;断路</h4><p><code>表达式1 &amp;&amp; 表达式2</code></p><ul><li>表达式1真，返回表达式2</li><li>表达式1假，返回表达式1</li></ul><h4 id="_7-4-2-断路" tabindex="-1"><a class="header-anchor" href="#_7-4-2-断路" aria-hidden="true">#</a> 7.4.2 ||断路</h4><p><code>表达式1 || 表达式2</code></p><ul><li>表达式1真，返回表达式1</li><li>表达式1假，返回表达式2</li></ul><h3 id="_7-5-赋值运算符" tabindex="-1"><a class="header-anchor" href="#_7-5-赋值运算符" aria-hidden="true">#</a> 7.5 赋值运算符</h3><p><img src="https://i.loli.net/2020/12/16/hXMkOCN9quIDUjG.jpg" alt="赋值运算符汇总.jpg" loading="lazy"></p><h3 id="_7-6-运算符优先级" tabindex="-1"><a class="header-anchor" href="#_7-6-运算符优先级" aria-hidden="true">#</a> 7.6 运算符优先级</h3><p><img src="https://i.loli.net/2020/12/16/IFoSA4dx8q5BlJ2.jpg" alt="运算符优先级.jpg" loading="lazy"></p><h2 id="_8-流程控制" tabindex="-1"><a class="header-anchor" href="#_8-流程控制" aria-hidden="true">#</a> 8 流程控制</h2><h3 id="_8-1-顺序流程控制" tabindex="-1"><a class="header-anchor" href="#_8-1-顺序流程控制" aria-hidden="true">#</a> 8.1 顺序流程控制</h3><h3 id="_8-2-分支流程控制" tabindex="-1"><a class="header-anchor" href="#_8-2-分支流程控制" aria-hidden="true">#</a> 8.2 分支流程控制</h3><h4 id="_8-2-1-if" tabindex="-1"><a class="header-anchor" href="#_8-2-1-if" aria-hidden="true">#</a> 8.2.1 if</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    条件成立时的执行语句
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8-2-2-if-else双分支" tabindex="-1"><a class="header-anchor" href="#_8-2-2-if-else双分支" aria-hidden="true">#</a> 8.2.2 if-else双分支</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    条件成立时的执行语句
<span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>
    条件不成立时的执行语句
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>if和else里只有一个语句能执行</li></ul><h4 id="_8-2-3-多分支语句" tabindex="-1"><a class="header-anchor" href="#_8-2-3-多分支语句" aria-hidden="true">#</a> 8.2.3 多分支语句</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    条件<span class="token number">1</span>成立时的执行语句
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    条件<span class="token number">1</span>不成立条件<span class="token number">3</span>成立时的执行语句
<span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>
    所有条件都不成立时的执行语句
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8-2-4-三元表达式" tabindex="-1"><a class="header-anchor" href="#_8-2-4-三元表达式" aria-hidden="true">#</a> 8.2.4 三元表达式</h4><ol><li>语法结构 <code>条件表达式 ? 表达式1 : 表达式2</code></li><li>执行思路 <ul><li>条件表达式真，返回表达式1</li><li>条件表达式假，返回表达式2</li></ul></li></ol><h4 id="_8-2-5-switch" tabindex="-1"><a class="header-anchor" href="#_8-2-5-switch" aria-hidden="true">#</a> 8.2.5 switch</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token literal-property property">value1</span><span class="token operator">:</span>
        表达式与value1匹配时的执行语句<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token literal-property property">value2</span><span class="token operator">:</span>
        表达式与value2匹配时的执行语句<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        都不满足时的执行语句<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>匹配的要求是值和数据类型都相等才算匹配</li><li>要写break，否则switch会认为一直是匹配上的直接执行后续case的执行语句</li></ul><h3 id="_8-3-循环流程控制" tabindex="-1"><a class="header-anchor" href="#_8-3-循环流程控制" aria-hidden="true">#</a> 8.3 循环流程控制</h3><h4 id="_8-3-1-for循环" tabindex="-1"><a class="header-anchor" href="#_8-3-1-for循环" aria-hidden="true">#</a> 8.3.1 for循环</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>初始化变量<span class="token punctuation">;</span>条件表达式；操作表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    循环体
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8-3-2-while循环" tabindex="-1"><a class="header-anchor" href="#_8-3-2-while循环" aria-hidden="true">#</a> 8.3.2 while循环</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    循环体
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8-3-3-do-while循环" tabindex="-1"><a class="header-anchor" href="#_8-3-3-do-while循环" aria-hidden="true">#</a> 8.3.3 do-while循环</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">do</span> <span class="token punctuation">{</span>
    循环体
<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>先执行循环体再判断条件</li></ul><h4 id="_8-3-4-continue" tabindex="-1"><a class="header-anchor" href="#_8-3-4-continue" aria-hidden="true">#</a> 8.3.4 continue</h4><ul><li>立即跳出本次循环，继续下一次循环</li></ul><h4 id="_8-3-5-break" tabindex="-1"><a class="header-anchor" href="#_8-3-5-break" aria-hidden="true">#</a> 8.3.5 break</h4><ul><li>立即跳出整个循环</li></ul><h2 id="_9-数组array" tabindex="-1"><a class="header-anchor" href="#_9-数组array" aria-hidden="true">#</a> 9 数组Array</h2><h3 id="_9-1-创建数组" tabindex="-1"><a class="header-anchor" href="#_9-1-创建数组" aria-hidden="true">#</a> 9.1 创建数组</h3><h4 id="_9-1-1-new关键字创建数组" tabindex="-1"><a class="header-anchor" href="#_9-1-1-new关键字创建数组" aria-hidden="true">#</a> 9.1.1 new关键字创建数组</h4><p><code>const 数组名 = new Array()</code></p><ul><li>通过实例化Array构造对象创建</li><li><code>const 数组名 = new Array(n)</code>创建长度为n的空数组</li><li><code>const 数组名 = new Array(1,2,3)</code>创建[1,2,3]数组</li></ul><h4 id="_9-1-2-利用数组字面量创建数组" tabindex="-1"><a class="header-anchor" href="#_9-1-2-利用数组字面量创建数组" aria-hidden="true">#</a> 9.1.2 利用数组字面量创建数组</h4><p><code>const 数组名 = []</code></p><ul><li>数组字面量[]</li><li>数组里的数据用逗号分隔</li><li>数组里的数据称为数组元素</li></ul><h3 id="_9-2-数组索引" tabindex="-1"><a class="header-anchor" href="#_9-2-数组索引" aria-hidden="true">#</a> 9.2 数组索引</h3><ul><li>索引（下标）：用来访问数组元素的序列，从0开始</li><li>通过索引号访问数组元素 <code>数组名[索引号]</code></li><li>没有数组元素，访问结果为undefined</li></ul><h3 id="_9-3-数组长度" tabindex="-1"><a class="header-anchor" href="#_9-3-数组长度" aria-hidden="true">#</a> 9.3 数组长度</h3><p><code>数组名.length</code></p><h3 id="_9-4-检测是否为数组" tabindex="-1"><a class="header-anchor" href="#_9-4-检测是否为数组" aria-hidden="true">#</a> 9.4 检测是否为数组</h3><h4 id="_9-4-1-instanceof-运算符" tabindex="-1"><a class="header-anchor" href="#_9-4-1-instanceof-运算符" aria-hidden="true">#</a> 9.4.1 instanceof 运算符</h4><p>语法 <code>待检测内容 instanceof Array</code></p><h4 id="_9-4-2-isarray" tabindex="-1"><a class="header-anchor" href="#_9-4-2-isarray" aria-hidden="true">#</a> 9.4.2 .isArray()</h4><p>语法 <code>Array.isArray(待检测内容)</code></p><ul><li>ie9以上版本才支持</li></ul><h3 id="_9-5-添加数组元素" tabindex="-1"><a class="header-anchor" href="#_9-5-添加数组元素" aria-hidden="true">#</a> 9.5 添加数组元素</h3><h4 id="_9-5-1-修改length长度" tabindex="-1"><a class="header-anchor" href="#_9-5-1-修改length长度" aria-hidden="true">#</a> 9.5.1 修改length长度</h4><p><code>数组名.length = 5</code></p><p>添加空元素</p><h4 id="_9-5-2-增加索引号" tabindex="-1"><a class="header-anchor" href="#_9-5-2-增加索引号" aria-hidden="true">#</a> 9.5.2 增加索引号</h4><p><code>数组名[索引号] = 新加元素</code></p><p>追加元素</p><h4 id="_9-5-3-push" tabindex="-1"><a class="header-anchor" href="#_9-5-3-push" aria-hidden="true">#</a> 9.5.3 .push()</h4><p><code>数组.push(添加的元素)</code></p><ul><li>在尾部添加一个或多个数组元素</li><li>push完后返回的是新数组的长度</li></ul><h4 id="_9-5-4-unshift" tabindex="-1"><a class="header-anchor" href="#_9-5-4-unshift" aria-hidden="true">#</a> 9.5.4 .unshift()</h4><p><code>数组.unshift(添加的元素)</code></p><ul><li>在开头添加一个或多个数组元素</li><li>unshift完后返回的是新数组的长度</li></ul><h3 id="_9-6-删除数组元素" tabindex="-1"><a class="header-anchor" href="#_9-6-删除数组元素" aria-hidden="true">#</a> 9.6 删除数组元素</h3><h4 id="_9-6-1-pop" tabindex="-1"><a class="header-anchor" href="#_9-6-1-pop" aria-hidden="true">#</a> 9.6.1 .pop()</h4><p><code>数组.pop()</code></p><ul><li>删除数组最后的一个元素，一次只能删除一个元素</li><li>pop完后返回被删除的元素</li></ul><h4 id="_9-6-2-shift" tabindex="-1"><a class="header-anchor" href="#_9-6-2-shift" aria-hidden="true">#</a> 9.6.2 .shift()</h4><p><code>数组.shift()</code></p><ul><li>删除数组第一个元素，一次只能删除一个元素</li><li>shift完后返回被删除的元素</li></ul><h3 id="_9-7-数组排序" tabindex="-1"><a class="header-anchor" href="#_9-7-数组排序" aria-hidden="true">#</a> 9.7 数组排序</h3><h4 id="_9-7-1-reverse" tabindex="-1"><a class="header-anchor" href="#_9-7-1-reverse" aria-hidden="true">#</a> 9.7.1 .reverse()</h4><p><code>数组.reverse()</code></p><ul><li>翻转数组</li></ul><h4 id="_9-7-2-sort" tabindex="-1"><a class="header-anchor" href="#_9-7-2-sort" aria-hidden="true">#</a> 9.7.2 .sort()</h4><p><code>数组.sort()</code></p><ul><li>冒泡排序</li><li>将元素转换为字符串，然后按照它们的 UTF-16 码元值升序排序</li><li>可以传入其他排序函数</li><li>返回对相同数组的引用</li></ul><h3 id="_9-8-数组索引" tabindex="-1"><a class="header-anchor" href="#_9-8-数组索引" aria-hidden="true">#</a> 9.8 数组索引</h3><h4 id="_9-8-1-indexof" tabindex="-1"><a class="header-anchor" href="#_9-8-1-indexof" aria-hidden="true">#</a> 9.8.1 .indexOf()</h4><p><code>数组名.indexOf(元素名)</code></p><ul><li>查找数组中给定元素的第一个索引</li><li>不存在返回-1</li></ul><h4 id="_9-8-2-lastindexof" tabindex="-1"><a class="header-anchor" href="#_9-8-2-lastindexof" aria-hidden="true">#</a> 9.8.2 .lastIndexOf()</h4><p><code>数组名.lastIndexOf(元素名)</code></p><ul><li>查找数组中给定元素的最后一个索引</li><li>不存在返回-1</li></ul><h3 id="_9-9-数组转换成字符串" tabindex="-1"><a class="header-anchor" href="#_9-9-数组转换成字符串" aria-hidden="true">#</a> 9.9 数组转换成字符串</h3><h4 id="_9-9-1-tostring" tabindex="-1"><a class="header-anchor" href="#_9-9-1-tostring" aria-hidden="true">#</a> 9.9.1 .toString()</h4><ul><li>把数组转换成字符串，逗号分隔每一项</li></ul><h4 id="_9-9-2-join-分隔符" tabindex="-1"><a class="header-anchor" href="#_9-9-2-join-分隔符" aria-hidden="true">#</a> 9.9.2 .join(&#39;分隔符&#39;)</h4><ul><li>把数组中的所有元素转换为一个字符串</li><li>分隔符默认为逗号</li></ul><h3 id="_9-10-数组连接-切割" tabindex="-1"><a class="header-anchor" href="#_9-10-数组连接-切割" aria-hidden="true">#</a> 9.10 数组连接&amp;切割</h3><h4 id="_9-10-1-concat" tabindex="-1"><a class="header-anchor" href="#_9-10-1-concat" aria-hidden="true">#</a> 9.10.1 .concat()</h4><ul><li>连接两个或多个数组</li><li>返回新数组</li><li>不影响原数组</li></ul><h4 id="_9-10-2-slice" tabindex="-1"><a class="header-anchor" href="#_9-10-2-slice" aria-hidden="true">#</a> 9.10.2 .slice()</h4><p><code>数组名.slice(开始索引,结束索引)</code></p><ul><li>分割数组</li><li>开始索引和结束索引可选</li><li>返回新数组</li><li>不影响原数组</li></ul><h4 id="_9-10-3-splice" tabindex="-1"><a class="header-anchor" href="#_9-10-3-splice" aria-hidden="true">#</a> 9.10.3 .splice()</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">splice</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token comment">//从start位置删除后面所有元素</span>
<span class="token function">splice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> deleteCount<span class="token punctuation">)</span><span class="token comment">//从start位置删除指定数量元素</span>
<span class="token function">splice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> deleteCount<span class="token punctuation">,</span> item1<span class="token punctuation">)</span>
<span class="token function">splice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> deleteCount<span class="token punctuation">,</span> item1<span class="token punctuation">,</span> item2<span class="token punctuation">,</span> itemN<span class="token punctuation">)</span><span class="token comment">//从start位置删除指定数量元素并新增item1-itemN。若删除0个则直接新增item</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>删除or/and添加数组内指定位置元素</li><li>返回修改后的新数组</li><li>会影响原数组</li></ul><h3 id="_9-11-数组遍历" tabindex="-1"><a class="header-anchor" href="#_9-11-数组遍历" aria-hidden="true">#</a> 9.11 数组遍历</h3><h4 id="_9-11-1-for-of-es6" tabindex="-1"><a class="header-anchor" href="#_9-11-1-for-of-es6" aria-hidden="true">#</a> 9.11.1 for of（ES6）</h4><p><code>for(let value of 数组名){}</code></p><ul><li>得到数组的每个值</li></ul><p>for of与for in区别：</p><p><code>for(let key in 数组名){}</code></p><ul><li><code>for of</code>遍历的是数组元素值， <code>for in</code>遍历的是数组的索引（即键名）</li><li><code>for of</code>适用遍历数/数组/字符串/<code>map</code>/<code>set</code>等拥有迭代器对象（<code>iterator</code>）的集合，但是不能遍历对象</li><li><code>for in</code>更适合遍历对象，也可以遍历数组，只遍历可枚举属性</li></ul><h4 id="_9-11-2-foreach" tabindex="-1"><a class="header-anchor" href="#_9-11-2-foreach" aria-hidden="true">#</a> 9.11.2 .forEach()</h4><p><code>数组名.forEach(function(value,index,array){})</code></p><ul><li>value：数组当前项的值</li><li>index：数组当前项的索引</li><li>array：被遍历的数组本身</li><li>在forEach里面return不会终止迭代</li></ul><h4 id="_9-11-3-map" tabindex="-1"><a class="header-anchor" href="#_9-11-3-map" aria-hidden="true">#</a> 9.11.3 .map()</h4><p><code>数组名.map(function(){})</code></p><ul><li>为数组中的每个元素执行一次函数</li><li>返回执行函数后的新数组</li></ul><h4 id="_9-11-4-filter" tabindex="-1"><a class="header-anchor" href="#_9-11-4-filter" aria-hidden="true">#</a> 9.11.4 .filter()</h4><p><code>数组名.filter(function(value,index,array){})</code></p><ul><li>通过检测指定数组中符合条件的所有元素来筛选数组</li><li>返回筛选后得到的新数组</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;spray&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;elite&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;exuberant&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;destruction&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;present&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">word</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> word<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Array [&quot;exuberant&quot;, &quot;destruction&quot;, &quot;present&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-11-5-some" tabindex="-1"><a class="header-anchor" href="#_9-11-5-some" aria-hidden="true">#</a> 9.11.5 .some()</h4><p><code>数组名.some(function(value,index,array){})</code></p><ul><li>用于检测数组中元素是否满足指定条件</li><li>返回的是一个布尔值。如果查到这个元素，就返回true；如果查不到就返回false</li><li>如果找到第一个满足条件的元素，则终止循环，不再继续查找</li><li>在some里面return true会终止迭代</li></ul><h4 id="_9-11-6-every" tabindex="-1"><a class="header-anchor" href="#_9-11-6-every" aria-hidden="true">#</a> 9.11.6 .every()</h4><p><code>数组名.every(function(value,index,array){})</code></p><ul><li>遍历数组中所有元素，确认是否满足指定条件</li><li>返回的是一个布尔值。如果所有元素都满足返回true；如果有元素不满足就返回false</li><li>如果找到第一个不满足条件的元素，则终止循环，不再继续查找</li></ul><h2 id="_10-函数" tabindex="-1"><a class="header-anchor" href="#_10-函数" aria-hidden="true">#</a> 10 函数</h2><p>函数：封装了可被调用实行的代码块</p><h3 id="_10-1-函数的使用" tabindex="-1"><a class="header-anchor" href="#_10-1-函数的使用" aria-hidden="true">#</a> 10.1 函数的使用</h3><h4 id="_10-1-1-声明函数" tabindex="-1"><a class="header-anchor" href="#_10-1-1-声明函数" aria-hidden="true">#</a> 10.1.1 声明函数</h4><h5 id="利用函数关键字声明-命名函数" tabindex="-1"><a class="header-anchor" href="#利用函数关键字声明-命名函数" aria-hidden="true">#</a> 利用函数关键字声明（命名函数）</h5><p><code>function 函数名(形参){}</code></p><ul><li>function是声明函数的关键字</li><li>函数名一般是动词</li></ul><h5 id="函数表达式声明-匿名函数" tabindex="-1"><a class="header-anchor" href="#函数表达式声明-匿名函数" aria-hidden="true">#</a> 函数表达式声明（匿名函数）</h5><p><code>let 变量名 = function(形参){}</code></p><h5 id="箭头函数-es6" tabindex="-1"><a class="header-anchor" href="#箭头函数-es6" aria-hidden="true">#</a> 箭头函数（ES6）</h5><p><code>const 函数名 = (形参) =&gt; {}</code></p><ul><li>一行代码可以省略“{}”，此时return也必须省略</li><li>只有一个形参时可以省略“()”</li></ul><h5 id="通过构造函数声明" tabindex="-1"><a class="header-anchor" href="#通过构造函数声明" aria-hidden="true">#</a> 通过<a href="#_20-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E5%8E%9F%E5%9E%8B">构造函数</a>声明</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">构造函数名</span><span class="token punctuation">(</span><span class="token parameter">形参</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">属性名</span><span class="token punctuation">(</span>形参<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">值</span><span class="token punctuation">(</span>实参<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">方法1</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token class-name">构造函数名</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">方法2</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//将不变的方法定义在prototype对象上</span>

<span class="token keyword">const</span> 函数名 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">构造函数名</span><span class="token punctuation">(</span><span class="token string">&#39;实参&#39;</span><span class="token punctuation">)</span>
函数名<span class="token punctuation">.</span><span class="token function">方法1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>所有函数都是构造函数的实例化对象</li></ul><h4 id="_10-1-2-调用函数" tabindex="-1"><a class="header-anchor" href="#_10-1-2-调用函数" aria-hidden="true">#</a> 10.1.2 调用函数</h4><h5 id="普通函数" tabindex="-1"><a class="header-anchor" href="#普通函数" aria-hidden="true">#</a> 普通函数</h5><ol><li><code>函数名()</code></li><li><code>函数名.call()</code></li></ol><h5 id="对象里的方法" tabindex="-1"><a class="header-anchor" href="#对象里的方法" aria-hidden="true">#</a> 对象里的方法</h5><p><code>对象.函数名()</code></p><h5 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数" aria-hidden="true">#</a> 构造函数</h5><p><code>new 构造函数名()</code></p><h5 id="绑定事件函数" tabindex="-1"><a class="header-anchor" href="#绑定事件函数" aria-hidden="true">#</a> 绑定事件函数</h5><ul><li>触发事件自动调用</li></ul><h5 id="定时器函数" tabindex="-1"><a class="header-anchor" href="#定时器函数" aria-hidden="true">#</a> 定时器函数</h5><ul><li>定时器自动调用</li></ul><h5 id="立即执行函数" tabindex="-1"><a class="header-anchor" href="#立即执行函数" aria-hidden="true">#</a> 立即执行函数</h5><p><code>(function(){})()</code>自动调用</p><h3 id="_10-2-函数的参数" tabindex="-1"><a class="header-anchor" href="#_10-2-函数的参数" aria-hidden="true">#</a> 10.2 函数的参数</h3><h4 id="_10-2-1-形参" tabindex="-1"><a class="header-anchor" href="#_10-2-1-形参" aria-hidden="true">#</a> 10.2.1 形参</h4><p>函数声明的是形参</p><p>语法 <code>function 函数名(形参1,形参2){}</code></p><ul><li>是一种不用声明的变量</li><li>形参可以设置默认值，不赋值时默认为undefined</li></ul><h4 id="_10-2-2-实参" tabindex="-1"><a class="header-anchor" href="#_10-2-2-实参" aria-hidden="true">#</a> 10.2.2 实参</h4><p>调用函数的是实参</p><p>语法 <code>函数名(实参1,实参2);</code></p><h4 id="_10-2-3-实参形参的关系" tabindex="-1"><a class="header-anchor" href="#_10-2-3-实参形参的关系" aria-hidden="true">#</a> 10.2.3 实参形参的关系</h4><ul><li>形参接受实参的数值</li><li>形参和实参可以不匹配</li><li>实参个数多于形参个数，后面的实参直接抛弃</li></ul><h3 id="_10-3-函数返回" tabindex="-1"><a class="header-anchor" href="#_10-3-函数返回" aria-hidden="true">#</a> 10.3 函数返回</h3><p><code>return 需要返回的结果;</code></p><ul><li>return具有终止函数的功能</li><li>return只能返回一个值，如果多个值返回最后一个值</li><li>函数如果没有return，则返回undefined</li></ul><h3 id="_10-4-arguments" tabindex="-1"><a class="header-anchor" href="#_10-4-arguments" aria-hidden="true">#</a> 10.4 arguments</h3><p>arguments是当前函数的内置对象，存储了传递的所有实参</p><p>语法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>arguments展示形参为一个伪数组 <ul><li>可以遍历</li><li>具有length属性</li><li>按索引方式储存数据</li><li>不具有数组的push、pop等方法</li></ul></li><li>只有函数有arguments对象</li></ul><h3 id="_10-5-函数的this" tabindex="-1"><a class="header-anchor" href="#_10-5-函数的this" aria-hidden="true">#</a> 10.5 函数的this</h3><ul><li>this的指向是当我们调用函数的时候确定的</li><li>一般指向调用者</li><li>构造函数里的this和构造函数原型对象里的this都指向生成的实例对象</li></ul><h4 id="_10-5-1-call" tabindex="-1"><a class="header-anchor" href="#_10-5-1-call" aria-hidden="true">#</a> 10.5.1 call()</h4><ol><li>可以调用函数，也可以改变this指向</li><li>语法 <code>函数名.call(this指向,实参)</code></li><li>主要作用是实现继承。在子构造函数里用call调用父构造函数 <code>父构造函数名.call(this,参数)</code></li></ol><h4 id="_10-5-2-apply" tabindex="-1"><a class="header-anchor" href="#_10-5-2-apply" aria-hidden="true">#</a> 10.5.2 apply()</h4><ol><li>可以调用函数，也可以改变this指向</li><li>语法 <code>函数名.apply(this指向,[实参])</code>（！实参的传递必须使用数组的方式）</li><li>可以实现数组最大最小值 <code>Math.max.apply(Math,数组)</code></li></ol><h4 id="_10-5-3-bind" tabindex="-1"><a class="header-anchor" href="#_10-5-3-bind" aria-hidden="true">#</a> 10.5.3 bind()</h4><ol><li>不会调用函数，但能改变函数内部this指向</li><li>语法 <code>函数名.bind(this指向,实参)</code></li><li>返回由指定的this值和初始化参数改造的原函数拷贝</li><li>应用场景：有的函数不需要立即调用，但又想改变函数内部this指向</li></ol><h3 id="_10-6-高阶函数" tabindex="-1"><a class="header-anchor" href="#_10-6-高阶函数" aria-hidden="true">#</a> 10.6 高阶函数</h3><p>高阶函数是对其他函数进行操作的函数，它接收函数作为参数或将函数作为返回值输出</p><h2 id="_11-作用域" tabindex="-1"><a class="header-anchor" href="#_11-作用域" aria-hidden="true">#</a> 11 作用域</h2><h3 id="_11-1-作用域概述" tabindex="-1"><a class="header-anchor" href="#_11-1-作用域概述" aria-hidden="true">#</a> 11.1 作用域概述</h3><ul><li>作用域：限定代码中用到的名字可用性的代码范围</li><li>作用域的目的是提高程序的可靠性，减少命名冲突</li><li>作用域分为全局作用域和局部作用域 <ul><li>全局作用域：整个scrip标签或者一个单独的js文件</li><li>局部作用域：只在函数内部，也可以叫做函数作用域</li></ul></li><li>不同作用域下命名不冲突</li></ul><h3 id="_11-2-变量的作用域" tabindex="-1"><a class="header-anchor" href="#_11-2-变量的作用域" aria-hidden="true">#</a> 11.2 变量的作用域</h3><h4 id="_11-2-1-全局变量" tabindex="-1"><a class="header-anchor" href="#_11-2-1-全局变量" aria-hidden="true">#</a> 11.2.1 全局变量</h4><ol><li>在全局作用域下的变量</li><li>在函数内部不声明直接赋值的变量也是全局变量</li></ol><h4 id="_11-2-2-局部变量" tabindex="-1"><a class="header-anchor" href="#_11-2-2-局部变量" aria-hidden="true">#</a> 11.2.2 局部变量</h4><ul><li>在局部作用域下的变量</li><li>只能在函数内部使用</li><li>函数的形参也可以看作局部变量</li></ul><h4 id="_11-2-3-全局效率" tabindex="-1"><a class="header-anchor" href="#_11-2-3-全局效率" aria-hidden="true">#</a> 11.2.3 全局效率</h4><ul><li>全局变量只有浏览器关闭的时候才会销毁，比较占内存资源</li><li>局部变量程序执行完毕就会销毁，比较节约内容资源</li></ul><h3 id="_11-3-块级作用域" tabindex="-1"><a class="header-anchor" href="#_11-3-块级作用域" aria-hidden="true">#</a> 11.3 块级作用域</h3><ul><li>在es6新增了块级作用域</li><li>块级作用域：用{}包含的</li></ul><h3 id="_11-4-作用域链" tabindex="-1"><a class="header-anchor" href="#_11-4-作用域链" aria-hidden="true">#</a> 11.4 作用域链</h3><ul><li>内部函数访问外部函数的变量采取的是链式查找的方式来决定是哪个值</li><li>作用域链：这种链式查找方式结构</li><li>就近原则</li></ul><h2 id="_12-闭包" tabindex="-1"><a class="header-anchor" href="#_12-闭包" aria-hidden="true">#</a> 12 闭包</h2><h3 id="_12-1-变量作用域" tabindex="-1"><a class="header-anchor" href="#_12-1-变量作用域" aria-hidden="true">#</a> 12.1 变量作用域</h3><ul><li>函数内部可以使用全局变量</li><li>函数外部不可以使用局部变量</li><li>当函数执行完毕，本作用域内的局部变量会销毁</li></ul><h3 id="_12-2-闭包定义" tabindex="-1"><a class="header-anchor" href="#_12-2-闭包定义" aria-hidden="true">#</a> 12.2 闭包定义</h3><ul><li>闭包(closure)指有权访问另一个函数作用域中变量的函数</li></ul><h3 id="_12-3-闭包作用" tabindex="-1"><a class="header-anchor" href="#_12-3-闭包作用" aria-hidden="true">#</a> 12.3 闭包作用</h3><ul><li>延伸了变量的作用范围</li></ul><h2 id="_13-拷贝" tabindex="-1"><a class="header-anchor" href="#_13-拷贝" aria-hidden="true">#</a> 13 拷贝</h2><ol><li>浅拷贝只是拷贝一层，更深层次对象级别的只拷贝引用，只拷贝地址</li><li>深拷贝拷贝多层，每一个级别的数据都会拷贝</li></ol><h3 id="_13-1-浅拷贝" tabindex="-1"><a class="header-anchor" href="#_13-1-浅拷贝" aria-hidden="true">#</a> 13.1 浅拷贝</h3><ul><li>ES6新语法 <code>Object.assign(用于存储的变量名,被拷贝的变量名)</code></li></ul><h3 id="_13-2-深拷贝" tabindex="-1"><a class="header-anchor" href="#_13-2-深拷贝" aria-hidden="true">#</a> 13.2 深拷贝</h3><ul><li>通过递归函数来进行深拷贝</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span><span class="token parameter">newObj<span class="token punctuation">,</span>oldObj</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> oldObj<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> item <span class="token operator">=</span> oldObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token function">deepCopy</span><span class="token punctuation">(</span>newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token function">deepCopy</span><span class="token punctuation">(</span>newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_14-预解析" tabindex="-1"><a class="header-anchor" href="#_14-预解析" aria-hidden="true">#</a> 14 预解析</h2><h3 id="_14-1-js代码运行" tabindex="-1"><a class="header-anchor" href="#_14-1-js代码运行" aria-hidden="true">#</a> 14.1 JS代码运行</h3><ul><li>预解析：js引擎会把里面所有的var还有function提升到当前作用域的最前面</li><li>代码执行：按照代码书写的顺序从上往下执行</li></ul><h3 id="_14-2-变量预解析" tabindex="-1"><a class="header-anchor" href="#_14-2-变量预解析" aria-hidden="true">#</a> 14.2 变量预解析</h3><ul><li>变量预解析又叫变量提升</li><li>只提升变量声明不提升赋值操作</li></ul><h3 id="_14-3-函数预解析" tabindex="-1"><a class="header-anchor" href="#_14-3-函数预解析" aria-hidden="true">#</a> 14.3 函数预解析</h3><ul><li>函数预解析又叫函数提升</li><li>只提升函数声明不调用</li><li>函数预解析只适用于用函数关键字声明的情况</li></ul><h2 id="_15-对象" tabindex="-1"><a class="header-anchor" href="#_15-对象" aria-hidden="true">#</a> 15 对象</h2><ul><li>对象是一组无序的相关属性和方法的集合</li><li>属性：事物的特征</li><li>方法：事物的行为</li></ul><h3 id="_15-1-创建对象" tabindex="-1"><a class="header-anchor" href="#_15-1-创建对象" aria-hidden="true">#</a> 15.1 创建对象</h3><h4 id="_15-1-1-利用字面量创建对象" tabindex="-1"><a class="header-anchor" href="#_15-1-1-利用字面量创建对象" aria-hidden="true">#</a> 15.1.1 利用字面量创建对象</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">//属性</span>
    uname <span class="token operator">=</span> <span class="token string">&#39;qww&#39;</span><span class="token punctuation">,</span> 
    <span class="token comment">//方法</span>
    <span class="token function-variable function">sayHi</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对象字面量为{}</li><li>里面的属性或者方法采取键值对的形式</li><li>多个属性或者方法中间用逗号隔开</li><li>方法后面跟的是一个匿名函数</li><li>可以嵌套对象</li></ul><h4 id="_15-1-2-利用new-object创建对象" tabindex="-1"><a class="header-anchor" href="#_15-1-2-利用new-object创建对象" aria-hidden="true">#</a> 15.1.2 利用new Object创建对象</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>uname <span class="token operator">=</span> <span class="token string">&#39;qww&#39;</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>利用等号赋值的方法添加对象的属性和方法</li></ul><h4 id="_15-1-3-利用构造函数创建对象" tabindex="-1"><a class="header-anchor" href="#_15-1-3-利用构造函数创建对象" aria-hidden="true">#</a> 15.1.3 利用<a href="#_20-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E5%8E%9F%E5%9E%8B">构造函数</a>创建对象</h4><ul><li>构造函数：把对象里相同的属性和方法抽象出来封装到函数里面</li><li>语法规范</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">构造函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>属性 <span class="token operator">=</span> 值<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">方法</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">new</span> <span class="token function">构造函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>利用构造函数创建对象的过程也叫对象的实例化</li></ul><h3 id="_15-2-使用对象" tabindex="-1"><a class="header-anchor" href="#_15-2-使用对象" aria-hidden="true">#</a> 15.2 使用对象</h3><h4 id="_15-2-1-调用对象属性" tabindex="-1"><a class="header-anchor" href="#_15-2-1-调用对象属性" aria-hidden="true">#</a> 15.2.1 调用对象属性</h4><ol><li><code>对象名.属性名</code></li><li><code>对象名[&#39;属性名&#39;]</code></li></ol><h4 id="_15-2-2-调用对象方法" tabindex="-1"><a class="header-anchor" href="#_15-2-2-调用对象方法" aria-hidden="true">#</a> 15.2.2 调用对象方法</h4><p><code>对象名.方法名()</code></p><ul><li>不能忘记添加小括号</li></ul><h4 id="_15-2-3-对象的解构-es6" tabindex="-1"><a class="header-anchor" href="#_15-2-3-对象的解构-es6" aria-hidden="true">#</a> 15.2.3 对象的解构（ES6）</h4><p><code>const { 属性名1，属性名2 } = 对象名</code></p><ul><li>解构后的属性不用带对象名直接使用</li></ul><h3 id="_15-3-对象转换为json格式" tabindex="-1"><a class="header-anchor" href="#_15-3-对象转换为json格式" aria-hidden="true">#</a> 15.3 对象转换为JSON格式</h3><p><code>JSON.stringify(对象名)</code></p><ul><li>转换后的JSON字符串中属性名和字符串都会用双引号包裹</li></ul><h3 id="_15-4-遍历对象-for-in" tabindex="-1"><a class="header-anchor" href="#_15-4-遍历对象-for-in" aria-hidden="true">#</a> 15.4 遍历对象 for in</h3><ul><li>for in语句可以对数组或者对象的属性进行循环操作</li><li>语法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出的是属性名</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出的属性值</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_15-5-es5新增方法" tabindex="-1"><a class="header-anchor" href="#_15-5-es5新增方法" aria-hidden="true">#</a> 15.5 ES5新增方法</h3><h4 id="_15-5-1-object-definerproperty" tabindex="-1"><a class="header-anchor" href="#_15-5-1-object-definerproperty" aria-hidden="true">#</a> 15.5.1 Object.definerProperty()</h4><ol><li>定义对象中新属性或修改原有的属性</li><li>语法 <code>Object.definerProperty(目标对象,属性名,descriptor)</code></li><li>descriptor表示目标属性所拥有的特性，需要以对象形式书写</li><li>descriptor四个属性 <ul><li>value：设置属性的值，默认为undefined</li><li>writable：值是否可以重写，默认为false</li><li>enumerable：目标属性是否可以被枚举，默认为false，不允许该属性被遍历出来</li><li>configurable：目标属性是否可以被删除或是否可以再次修改特性，默认为false</li></ul></li></ol><h2 id="_16-内置对象" tabindex="-1"><a class="header-anchor" href="#_16-内置对象" aria-hidden="true">#</a> 16 内置对象</h2><p>JS中对象分成3种：自定义对象、内置对象、浏览器对象</p><ul><li>内置对象：JS语言自带的一些对象，供开发者使用，并提供了一些常用的或是最基本的必要功能（属性和方法）</li></ul><h3 id="_16-1-math内置对象" tabindex="-1"><a class="header-anchor" href="#_16-1-math内置对象" aria-hidden="true">#</a> 16.1 Math内置对象</h3><p>Math不是一个函数对象，不是一个构造器，不需要new来调用，而是直接使用</p><h4 id="_16-1-1-math常用属性和方法" tabindex="-1"><a class="header-anchor" href="#_16-1-1-math常用属性和方法" aria-hidden="true">#</a> 16.1.1 Math常用属性和方法</h4><ol><li><code>Math.PI</code>圆周率</li><li><code>Math.floor()</code>向下取整</li><li><code>Math.ceil()</code>向上取整</li><li><code>Math.round()</code>四舍五入，就近取整，-3.5取-3</li><li><code>Math.abs()</code>绝对值，可以隐式转换，会把字符串转换成数字型</li><li><code>Math.max/min()</code>最大、最小值</li><li><code>Math.random()</code>0~1的随机数</li></ol><h3 id="_16-2-日期内置对象" tabindex="-1"><a class="header-anchor" href="#_16-2-日期内置对象" aria-hidden="true">#</a> 16.2 日期内置对象</h3><p>Date实例用来处理日期和时间，是一个构造函数，必须使用new调用</p><h4 id="_16-2-1-使用date" tabindex="-1"><a class="header-anchor" href="#_16-2-1-使用date" aria-hidden="true">#</a> 16.2.1 使用Date</h4><ul><li>语法 <code>var date = new Date()</code></li><li>如果没有参数返回系统的当前时间</li></ul><h4 id="_16-2-2-参数常用写法" tabindex="-1"><a class="header-anchor" href="#_16-2-2-参数常用写法" aria-hidden="true">#</a> 16.2.2 参数常用写法</h4><ol><li>数字型 <code>2021,03,09</code></li><li>字符串型 <code>&#39;2021-03-09 16:58:10&#39;</code> 常用</li></ol><h4 id="_16-2-3-日期格式化" tabindex="-1"><a class="header-anchor" href="#_16-2-3-日期格式化" aria-hidden="true">#</a> 16.2.3 日期格式化</h4><p><img src="https://i.loli.net/2021/03/09/9SXKFgviL7lpceA.jpg" alt="日期格式化方法.jpg" loading="lazy"></p><ul><li>月份返回的会小1个月</li><li>返回星期的时候，周日返回的是0</li></ul><h4 id="_16-2-4-获取时间戳" tabindex="-1"><a class="header-anchor" href="#_16-2-4-获取时间戳" aria-hidden="true">#</a> 16.2.4 获取时间戳</h4><p>时间戳是距离1970年1月1日的总毫秒数</p><ol><li><code>Date.valueOf()</code></li><li><code>Date.getTime()</code></li><li>可简化为 <code>var date1 = +new Date();</code>，最常用的写法</li><li>H5新增的方法 <code>Date.now()</code></li></ol><h2 id="_17-基本包装类型" tabindex="-1"><a class="header-anchor" href="#_17-基本包装类型" aria-hidden="true">#</a> 17 基本包装类型</h2><p>基本包装类型就是把简单数据类型包装成为了复杂数据类型，使得简单数据类型有了属性和方法</p><ul><li>过程： <ul><li>把简单数据类型包装为复杂数据类型</li><li>把临时变量的值给str</li><li>销毁临时变量</li></ul></li><li>为了方便操作基本数据类型，JavaScript提供了三个特殊的引用类型：String、Number和Boolean</li></ul><h2 id="_18-数据类型" tabindex="-1"><a class="header-anchor" href="#_18-数据类型" aria-hidden="true">#</a> 18 数据类型</h2><h3 id="_18-1-堆和栈" tabindex="-1"><a class="header-anchor" href="#_18-1-堆和栈" aria-hidden="true">#</a> 18.1 堆和栈</h3><p>其实JavaScript中没有堆和栈的概念，但可以方便理解代码的执行方式</p><h4 id="_18-1-1-栈-操作系统" tabindex="-1"><a class="header-anchor" href="#_18-1-1-栈-操作系统" aria-hidden="true">#</a> 18.1.1 栈（操作系统）</h4><ul><li>由操作系统自动分配释放存放函数的参数值、局部变量的值等</li><li>其操作方式类似于数据结构中的栈</li><li>简单数据类型存放在栈里面</li></ul><h4 id="_18-1-2-堆-操作系统" tabindex="-1"><a class="header-anchor" href="#_18-1-2-堆-操作系统" aria-hidden="true">#</a> 18.1.2 堆（操作系统）</h4><ul><li>存储复杂类型（对象）</li><li>一般由程序员分配释放，若程序员不释放，由垃圾回收机制回收</li></ul><h3 id="_18-2-简单数据类型" tabindex="-1"><a class="header-anchor" href="#_18-2-简单数据类型" aria-hidden="true">#</a> 18.2 简单数据类型</h3><ol><li>简单数据类型又叫作基本数据类型或者值类型</li><li>值类型：在存储时变量中存储的是值本身</li><li>string、number、boolean、undefined、null</li><li>简单数据类型null返回的是一个空对象</li></ol><h4 id="_18-2-1-简单数据类型内存分配" tabindex="-1"><a class="header-anchor" href="#_18-2-1-简单数据类型内存分配" aria-hidden="true">#</a> 18.2.1 简单数据类型内存分配</h4><p>简单数据类型存放在栈里面，里面直接开辟一个空间存放的是值</p><h3 id="_18-3-复杂数据类型" tabindex="-1"><a class="header-anchor" href="#_18-3-复杂数据类型" aria-hidden="true">#</a> 18.3 复杂数据类型</h3><ul><li>复杂数据类型又叫引用类型</li><li>通过new关键字创建的对象（系统对象、自定义对象），如Object、Array、Date等</li></ul><h4 id="_18-3-1-复杂数据类型内存分配" tabindex="-1"><a class="header-anchor" href="#_18-3-1-复杂数据类型内存分配" aria-hidden="true">#</a> 18.3.1 复杂数据类型内存分配</h4><ul><li>复杂数据类型首先在栈里存放地址，16进制</li><li>然后栈中的地址指向堆里的数据</li></ul><h2 id="_19-面向对象" tabindex="-1"><a class="header-anchor" href="#_19-面向对象" aria-hidden="true">#</a> 19 面向对象</h2><h3 id="_19-1-面向对象编程介绍" tabindex="-1"><a class="header-anchor" href="#_19-1-面向对象编程介绍" aria-hidden="true">#</a> 19.1 面向对象编程介绍</h3><ol><li>面向过程，POP(Process-oriented programming)。 <ul><li>分析出解决问题所需的步骤，然后用函数把步骤一步步实现，使用的时候再一个个依次调用</li><li>分析好步骤，按照步骤解决问题</li></ul></li><li>面向对象，OOP(Object Oriented Programming) <ul><li>把事务分解成为一个个对象，然后由对象之间分工与合作</li><li>以对象功能划分问题，而不是步骤</li><li>特点： <ul><li>封装性</li><li>继承性</li><li>多态性</li></ul></li></ul></li><li>两者对比 <ul><li>面向过程 <ul><li>优点：性能比面向对象高，适合跟硬件联系很紧密的东西</li><li>缺点：没有面向对象易维护、易复用、易扩展</li></ul></li><li>面向对象 <ul><li>优点：易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统更加灵活</li><li>缺点：性能比面向过程低</li></ul></li></ul></li></ol><h3 id="_19-2-es6中的类和对象" tabindex="-1"><a class="header-anchor" href="#_19-2-es6中的类和对象" aria-hidden="true">#</a> 19.2 ES6中的类和对象</h3><h4 id="_19-2-1-面向对象的思维特点" tabindex="-1"><a class="header-anchor" href="#_19-2-1-面向对象的思维特点" aria-hidden="true">#</a> 19.2.1 面向对象的思维特点</h4><ol><li>抽取（抽象）对象共用的属性和行为组织（封装）成一个类（模板）</li><li>对类进行实例化，获取类的对象</li></ol><h4 id="_19-2-2-对象" tabindex="-1"><a class="header-anchor" href="#_19-2-2-对象" aria-hidden="true">#</a> 19.2.2 对象</h4><ul><li>对象是一个具体的事物</li><li>在JavaScript中，对象是一组无序的相关属性和方法的集合，所有的事物都是对象</li><li>对象由属性和方法组成 <ul><li>属性：事物的特征，在对象中用属性来表示</li><li>方法：事物的行为，在对象中用方法来表示</li></ul></li></ul><h4 id="_19-2-3-类class" tabindex="-1"><a class="header-anchor" href="#_19-2-3-类class" aria-hidden="true">#</a> 19.2.3 类class</h4><ul><li>ES6中新增了类的概念，可以使用class关键字声明一个类，之后以这个类来实例化对象</li><li>类抽象了对象的公共部分，泛指某一大类</li><li>对象特指某一个，通过类实例化一个具体的对象</li></ul><h4 id="_19-2-4-创建类" tabindex="-1"><a class="header-anchor" href="#_19-2-4-创建类" aria-hidden="true">#</a> 19.2.4 创建类</h4><ul><li>创建类 <code>class 类名{类内容}</code>，类名习惯首字母大写</li><li>创建实例 <code>const 对象名 = new 类名()</code>，类必须使用new实例化对象</li></ul><h4 id="_19-2-5-类constructor构造函数" tabindex="-1"><a class="header-anchor" href="#_19-2-5-类constructor构造函数" aria-hidden="true">#</a> 19.2.5 类constructor构造函数</h4><ul><li>constructor()方法是类的构造函数，用于传递参数，返回实例对象</li><li>通过new命令生成对象实例，自动调用该方法</li><li>如果没有显示定义，类内部会自动给我们创建一个constructor()</li><li>语法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> 类名 <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>属性名 <span class="token operator">=</span> 值
    <span class="token punctuation">}</span>
    <span class="token function">方法名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>构造函数不需要加function</li></ul><h4 id="_19-2-6-类添加方法" tabindex="-1"><a class="header-anchor" href="#_19-2-6-类添加方法" aria-hidden="true">#</a> 19.2.6 类添加方法</h4><ul><li>把方法直接写在类里面即可</li><li>类里面所有的函数不需要function</li><li>在类里面所有函数之间不需要添加逗号</li></ul><h4 id="_19-2-7-类的继承" tabindex="-1"><a class="header-anchor" href="#_19-2-7-类的继承" aria-hidden="true">#</a> 19.2.7 类的继承</h4><ul><li>子类可以继承父类的属性和方法</li><li>语法 <code>class 子类名 extends 父类名{}</code></li><li>继承中存在就近原则，子类有的方法直接调用，没有再去查找父类</li></ul><h5 id="super关键字" tabindex="-1"><a class="header-anchor" href="#super关键字" aria-hidden="true">#</a> super关键字</h5><ul><li>用于访问和调用对象父类上的函数。可以调用父类的构造函数，也可以调用父类的普通函数</li><li>语法 <code>super()</code>调用父类construction构造函数</li><li>语法 <code>super.父类方法()</code>调用父类的函数函数</li><li>super()必须在子类this之前调用</li></ul><h4 id="_19-2-8-注意点" tabindex="-1"><a class="header-anchor" href="#_19-2-8-注意点" aria-hidden="true">#</a> 19.2.8 注意点</h4><ul><li>在ES6中类没有变量提升，所以必须先定义类，才能通过类实例化对象</li><li>类里共有的属性和方法一定要加this使用</li><li>类中this指向问题 <ul><li>在construction里面的this指向实例对象</li><li>方法里面的this指向这个方法的调用者</li></ul></li></ul><h2 id="_20-构造函数和原型" tabindex="-1"><a class="header-anchor" href="#_20-构造函数和原型" aria-hidden="true">#</a> 20 构造函数和原型</h2><p><strong>面试重点</strong></p><h3 id="_20-1-构造函数" tabindex="-1"><a class="header-anchor" href="#_20-1-构造函数" aria-hidden="true">#</a> 20.1 构造函数</h3><p>构造函数是一种特殊的函数，主要用来创建某一类对象</p><ul><li><p>构造函数名的首字母大写</p></li><li><p>构造函数要和new一起使用才有意义</p></li><li><p>new在执行时会做</p><ol><li>在内存中创建一个新的空对象</li><li>让this指向这个新的对象</li><li>执行构造函数里面的代码，给这个新对象添加属性和方法</li><li>返回这个新对象（所以构造函数里面不需要return）</li></ol></li><li><p>成员：构造函数中的属性和方法</p><ul><li>静态成员：在构造函数本身上添加的成员，只能由构造函数本身来访问。</li><li>实例成员：在构造函数内部通过this添加的对象成员，只能由实例化的对象来访问。</li></ul></li><li><p>构造函数存在内存浪费的问题，创建对象的时候会额外开辟空间以存放方法，且各对象同一方法不存放在一起，因此属性写在构造函数体内，但方法最好写在构造函数的原型上</p></li></ul><h3 id="_20-2-构造函数原型-prototype" tabindex="-1"><a class="header-anchor" href="#_20-2-构造函数原型-prototype" aria-hidden="true">#</a> 20.2 构造函数原型 prototype</h3><ul><li>JavaScript规定，每一个构造函数都一个prototype属性，指向另一个对象。这个对象的所有属性和方法都会被构造函数所拥有</li><li>我们可以把不变的方法直接定义在prototype对象上，这样所有的实例就可以共享这些方法</li></ul><h3 id="_20-3-对象原型-proto" tabindex="-1"><a class="header-anchor" href="#_20-3-对象原型-proto" aria-hidden="true">#</a> 20.3 对象原型__proto__</h3><ul><li>对象都会有一个属性__proto__指向构造函数的prototype原型对象，这让对象可以使用构造函数原型对象的属性和方法</li><li>对象的__proto__对象原型和构造函数的prototype原型对象是一样的</li><li>__proto__是一个非标准属性，不能对其赋值</li><li>对象方法查找规则 <ol><li>先查找对象是否存在该方法，有就执行对象上的方法</li><li>通过__proto__去构造函数原型对象里查找执行</li></ol></li></ul><h3 id="_20-4-构造函数constructor" tabindex="-1"><a class="header-anchor" href="#_20-4-构造函数constructor" aria-hidden="true">#</a> 20.4 构造函数constructor</h3><ul><li>对象原型__proto__和构造函数prototype原型对象里面都有一个属性constructor，被称为构造函数，因为它指回构造函数本身</li><li>constructor用于记录该对象引用哪个构造函数，它可以让原型对象重新指向原来的构造函数</li><li>如果修改了原来的原型对象，给原型对象赋值的是一个对象，则必须手动地使用constructor指回原来的构造函数</li></ul><h3 id="_20-5-构造函数、实例、原型对象三者之间的关系" tabindex="-1"><a class="header-anchor" href="#_20-5-构造函数、实例、原型对象三者之间的关系" aria-hidden="true">#</a> 20.5 构造函数、实例、原型对象三者之间的关系</h3><p><img src="https://pic.imgdb.cn/item/60b5eedd39f6859bc24afce3.jpg" alt="三角关系" loading="lazy"></p><h3 id="_20-6-原型链" tabindex="-1"><a class="header-anchor" href="#_20-6-原型链" aria-hidden="true">#</a> 20.6 原型链</h3><p><img src="https://pic.imgdb.cn/item/60b5f00039f6859bc25941ae.jpg" alt="原型链" loading="lazy"></p><h3 id="_20-7-成员的查找机制" tabindex="-1"><a class="header-anchor" href="#_20-7-成员的查找机制" aria-hidden="true">#</a> 20.7 成员的查找机制</h3><ol><li>当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性</li><li>如果没有就查找它的原型（也就是__proto__指向的prototype原型对象）</li><li>如果还没有就查找原型对象的原型（Object的原型对象）</li><li>依次类推直到找到Object为止（null）</li></ol><h3 id="_20-8-原型对象this指向" tabindex="-1"><a class="header-anchor" href="#_20-8-原型对象this指向" aria-hidden="true">#</a> 20.8 原型对象this指向</h3><ul><li>在构造函数中this指向对象实例</li><li>原型对象里的this指向对象实例</li></ul><h3 id="_20-9-扩展内置对象" tabindex="-1"><a class="header-anchor" href="#_20-9-扩展内置对象" aria-hidden="true">#</a> 20.9 扩展内置对象</h3><ul><li>通过原型对象，对原来的内置对象进行扩展自定义的方法</li><li>数组和字符串内置对象不能给原型对象覆盖操作 <code>Array.prototype = {}</code>，只能是 <code>Array.prototype.XXX = function(){}</code>的方式</li></ul><h2 id="_21-继承" tabindex="-1"><a class="header-anchor" href="#_21-继承" aria-hidden="true">#</a> 21 继承</h2><ol><li>ES6之前没有给我们提供extends继承。通过构造函数+原型对象模拟实现继承，被称为<strong>组合继承</strong></li></ol><h3 id="_21-1-call" tabindex="-1"><a class="header-anchor" href="#_21-1-call" aria-hidden="true">#</a> 21.1 call()</h3><ul><li>调用这个函数，并且修改函数运行时的this指向</li><li>语法 <code>func.call(thisArg, arg1, arg2, ...)</code><ul><li>thisArg：当前调用函数this的指向对象</li><li>arg1等：传递的其他参数</li></ul></li></ul><h3 id="_21-2-借用构造函数继承父类型属性" tabindex="-1"><a class="header-anchor" href="#_21-2-借用构造函数继承父类型属性" aria-hidden="true">#</a> 21.2 借用构造函数继承父类型属性</h3><ul><li>核心原理：通过call()把父类型的this指向子类型的this，这样就可以实现子类型继承父类型的属性</li><li>语法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//借用父构造函数继承属性</span>
<span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span><span class="token parameter">uname<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//此处的this指向父构造函数的对象实例</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> uname<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token parameter">uname<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//将父构造函数的this改成子构造函数的this</span>
    <span class="token function">Father</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> uname<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_21-3-借用原型对象继承父类型方法" tabindex="-1"><a class="header-anchor" href="#_21-3-借用原型对象继承父类型方法" aria-hidden="true">#</a> 21.3 借用原型对象继承父类型方法</h3><ul><li>继承方法不能通过赋值原型对象的方法实现，这样会导致本来只打算在子类型上新定义的方法会同步到父类型上</li><li>语法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//借用父构造函数继承属性</span>
<span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token class-name">Father</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">money</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token class-name">Son</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//如果利用对象的形式修改了原型对象，要用constructor指回原来的构造函数</span>
<span class="token class-name">Son</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Son<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_21-4-类的本质" tabindex="-1"><a class="header-anchor" href="#_21-4-类的本质" aria-hidden="true">#</a> 21.4 类的本质</h3><ol><li>class的本质还是一个函数，就是构造函数的另一种写法</li><li>类有原型对象prototype</li><li>类的原型对象prototype里有constructor指向类本身</li><li>类可以通过原型对象的方式添加方法</li><li>类创造的实例对象有__proto__指向类的原型对象</li><li>ES6类其实就是语法糖，简单写法实现相同功能</li></ol><h2 id="_22-严格模式" tabindex="-1"><a class="header-anchor" href="#_22-严格模式" aria-hidden="true">#</a> 22 严格模式</h2><ul><li>strict mode，ES5的严格模式是采用具有限制性JavaScript变体的一种方式</li><li>严格模式作用 <ol><li>消除了JavaScript语法的一些不合理、不严谨之处</li><li>消除代码不安全之处</li><li>提高编译器效率，增加运行速度</li><li>禁用了ECMAScript的未来版本中可能会定义的一些语法，为新版本的JavaScript做好铺垫</li></ol></li></ul><h3 id="_22-1-开启严格模式" tabindex="-1"><a class="header-anchor" href="#_22-1-开启严格模式" aria-hidden="true">#</a> 22.1 开启严格模式</h3><p>严格模式可以应用到整个脚本或个别函数中</p><ol><li>为脚本开启严格模式：在所有语句之前放一个特定语句 <code>&quot;use strict&quot;</code></li><li>为函数开启严格模式：在函数里的第一行写一个特定语句 <code>&quot;use strict&quot;</code></li></ol><h3 id="_22-2-严格模式变化" tabindex="-1"><a class="header-anchor" href="#_22-2-严格模式变化" aria-hidden="true">#</a> 22.2 严格模式变化</h3><h4 id="_22-2-1-变量规定" tabindex="-1"><a class="header-anchor" href="#_22-2-1-变量规定" aria-hidden="true">#</a> 22.2.1 变量规定</h4><ul><li>在严格模式下不声明无法赋值变量</li><li>严禁删除已经声明的变量</li></ul><h4 id="_22-2-2-this指向" tabindex="-1"><a class="header-anchor" href="#_22-2-2-this指向" aria-hidden="true">#</a> 22.2.2 this指向</h4><ul><li>之前在全局作用域函数中的this指向Windows对象，严格模式下全局作用域中函数的this指向undefined</li><li>之前构造函数不加new会当普通函数调用，严格模式下必须使用new</li></ul><h4 id="_22-2-3-函数变化" tabindex="-1"><a class="header-anchor" href="#_22-2-3-函数变化" aria-hidden="true">#</a> 22.2.3 函数变化</h4><ul><li>函数不能有重名的参数</li><li>函数必须声明在顶层。（ES6引入块级作用域）</li></ul><h2 id="_23-正则表达式" tabindex="-1"><a class="header-anchor" href="#_23-正则表达式" aria-hidden="true">#</a> 23 正则表达式</h2><p>正则表达式是用于匹配字符串中字符组合的模式，JavaScript中正则表达式也是对象</p><h3 id="_23-1-特点" tabindex="-1"><a class="header-anchor" href="#_23-1-特点" aria-hidden="true">#</a> 23.1 特点</h3><ul><li>灵活性、逻辑性和功能性非常强</li><li>可以迅速地用既简单的方式达到字符串的复杂控制</li></ul><h3 id="_23-2-创建正则表达式" tabindex="-1"><a class="header-anchor" href="#_23-2-创建正则表达式" aria-hidden="true">#</a> 23.2 创建正则表达式</h3><h4 id="_23-2-1-利用regexp对象来创建" tabindex="-1"><a class="header-anchor" href="#_23-2-1-利用regexp对象来创建" aria-hidden="true">#</a> 23.2.1 利用RegExp对象来创建</h4><p><code>var 变量名 = new RegExp(/表达式/)</code></p><h4 id="_23-2-2-利用字面量创建" tabindex="-1"><a class="header-anchor" href="#_23-2-2-利用字面量创建" aria-hidden="true">#</a> 23.2.2 利用字面量创建</h4><p><code>var 变量名=/表达式/</code></p><h3 id="_23-3-测试正则表达式" tabindex="-1"><a class="header-anchor" href="#_23-3-测试正则表达式" aria-hidden="true">#</a> 23.3 测试正则表达式</h3><p><code>正则表达式.test(被测试的文本)</code></p><p>test()正则对象方法，用于检测字符串是否符合该规则</p><h3 id="_23-4-正则表达式中的特殊字符" tabindex="-1"><a class="header-anchor" href="#_23-4-正则表达式中的特殊字符" aria-hidden="true">#</a> 23.4 正则表达式中的特殊字符</h3><h4 id="_23-4-1-正则表达式的组成" tabindex="-1"><a class="header-anchor" href="#_23-4-1-正则表达式的组成" aria-hidden="true">#</a> 23.4.1 正则表达式的组成</h4><p>一个正则表达式可以由简单的字符构成，也可以是简单和特殊字符的组合</p><p>特殊字符也被称为元字符，在正则表达式中是具有特殊意义的专用符号</p><h4 id="_23-4-2-边界符" tabindex="-1"><a class="header-anchor" href="#_23-4-2-边界符" aria-hidden="true">#</a> 23.4.2 边界符</h4><ol><li>^：表示匹配行首的文本</li><li>$：表示匹配行尾的文本 <ul><li><code>/^abc/</code>检测到包含以&#39;abc&#39;的内容开头即可</li><li><code>/^abc$/</code>检测到内容为&#39;abc&#39;才行</li></ul></li></ol><h4 id="_23-4-3-字符类" tabindex="-1"><a class="header-anchor" href="#_23-4-3-字符类" aria-hidden="true">#</a> 23.4.3 字符类</h4><p>字符类[]表示有一系列字符可供选择，只要匹配其中一个就可以了</p><ol><li><code>/[abc]/</code>检测到包含&#39;a&#39;或&#39;b&#39;或&#39;c&#39;的内容即可</li><li><code>/^[abc]$/</code>三选一，只有是a或者是b或者是c这三个字符才返回true</li><li>字符组合 <code>/^[a-zA-Z0-9_]$/</code>可包含字母数字下划线</li><li>字符组合 <code>/^[^a-zA-Z0-9_]$/</code>中括号里面有^表示取反</li></ol><h4 id="_23-4-4-量词符" tabindex="-1"><a class="header-anchor" href="#_23-4-4-量词符" aria-hidden="true">#</a> 23.4.4 量词符</h4><ol><li>量词符用来设定某个模式出现的次数</li><li>*：重复零次或更多次</li><li>+：重复一次或更多次</li><li>?：重复零次或一次</li><li>{n}：重复n次</li><li>{n,}：重复n次或更多次</li><li>{n,m}：重复n到m次</li></ol><h4 id="_23-4-5-括号总结" tabindex="-1"><a class="header-anchor" href="#_23-4-5-括号总结" aria-hidden="true">#</a> 23.4.5 括号总结</h4><ol><li>中括号：字符集合匹配</li><li>大括号：量词符</li><li>小括号：表示优先级</li></ol><h4 id="_23-4-6-预定义类" tabindex="-1"><a class="header-anchor" href="#_23-4-6-预定义类" aria-hidden="true">#</a> 23.4.6 预定义类</h4><p>预定义类值某些常见模式的简写方式</p><ol><li>\\d：匹配0-9之间任一数字</li><li>\\D：匹配所有0-9以外的字符</li><li>\\w：匹配任意的字母、数字和下划线</li><li>\\W：除所有字母、数字和下划线以外的字符</li><li>\\s：匹配空格（包括换行符、制表符、空格符等）</li><li>\\S：匹配非空格的字符</li></ol><h3 id="_23-5-正则替换" tabindex="-1"><a class="header-anchor" href="#_23-5-正则替换" aria-hidden="true">#</a> 23.5 正则替换</h3><p>replace()方法可以实现替换字符串操作，用来替换的参数可以是一个字符串或是一个正则表达式</p><h4 id="_23-5-1-正则表达式参数" tabindex="-1"><a class="header-anchor" href="#_23-5-1-正则表达式参数" aria-hidden="true">#</a> 23.5.1 正则表达式参数</h4><p><code>/表达式/[switch]</code></p><ul><li>switch也称为修饰符，按照什么模式来匹配 <ul><li>g：全局匹配</li><li>i：忽略大小写</li><li>gi：全局匹配+忽略大小写</li></ul></li></ul>`,410);function v(f,m){const i=l("RouterLink"),c=l("ExternalLinkIcon");return d(),r("div",null,[u,a("ol",null,[h,a("li",null,[e(i,{to:"/frontend/js/Web%20Api.html#_1-dom"},{default:t(()=>[n("DOM")]),_:1}),n(" - 页面文档对象模型")]),a("li",null,[e(i,{to:"/frontend/js/Web%20Api.html#_2-bom"},{default:t(()=>[n("BOM")]),_:1}),n(" - 浏览器对象模型")])]),k,a("p",null,[a("a",b,[n("字符串常用方法"),e(c)])]),_])}const y=o(p,[["render",v],["__file","01js.html.vue"]]);export{y as default};
