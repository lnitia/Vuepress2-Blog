import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as c,c as i,a as n,b as a,d as e,f as t}from"./app-0SoiKzJB.js";const r={},l=t('<h1 id="c-读写文件-file、filestream和streamreader区别" tabindex="-1"><a class="header-anchor" href="#c-读写文件-file、filestream和streamreader区别" aria-hidden="true">#</a> C#读写文件 - File、FileStream和StreamReader区别</h1><h3 id="对比" tabindex="-1"><a class="header-anchor" href="#对比" aria-hidden="true">#</a> 对比</h3><p>File：对整个文件进行操作，包括创建、拷贝、移动、删除、打开和读写文件等静态方法。</p><p>FileStream：对文件内容进行操作，操作字节，可以用于任何类型文件，更适合大文件。</p><p>StreamReader：对文件内容进行操作，操作字符，只能操作文本文件，更适合小文件。</p><h3 id="file使用" tabindex="-1"><a class="header-anchor" href="#file使用" aria-hidden="true">#</a> File使用</h3>',6),u={href:"https://learn.microsoft.com/zh-cn/dotnet/api/system.io.file?view=net-8.0",target:"_blank",rel:"noopener noreferrer"},d=t(`<div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">//判断不存在后创建一个新文件</span>
path <span class="token operator">=</span> Application<span class="token punctuation">.</span>persistentDataPath <span class="token operator">+</span> <span class="token string">@&quot;\\test.txt&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>File<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token class-name"><span class="token keyword">string</span></span> createText <span class="token operator">=</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">;</span>
File<span class="token punctuation">.</span><span class="token function">WriteAllText</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> createText<span class="token punctuation">,</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="filestream使用" tabindex="-1"><a class="header-anchor" href="#filestream使用" aria-hidden="true">#</a> FileStream使用</h3>`,2),k={href:"https://learn.microsoft.com/zh-cn/dotnet/api/system.io.filestream?view=net-8.0",target:"_blank",rel:"noopener noreferrer"},m=n("h3",{id:"streamreader使用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#streamreader使用","aria-hidden":"true"},"#"),a(" StreamReader使用")],-1),h={href:"https://learn.microsoft.com/zh-cn/dotnet/api/system.io.streamreader?view=net-8.0",target:"_blank",rel:"noopener noreferrer"},v=t(`<div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">//写入</span>
<span class="token class-name"><span class="token keyword">string</span></span> myPosition <span class="token operator">=</span> myTransform<span class="token punctuation">.</span>localPosition<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">&quot;F6&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">StreamWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamWriter</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    writer<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>myPosition<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//读取</span>
<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">StreamReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">string</span></span> myPosition <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function f(b,_){const s=p("ExternalLinkIcon");return c(),i("div",null,[l,n("p",null,[n("a",u,[a("File 类 (System.IO) | Microsoft Learn"),e(s)])]),d,n("p",null,[n("a",k,[a("FileStream 类 (System.IO) | Microsoft Learn"),e(s)])]),m,n("p",null,[n("a",h,[a("StreamReader Class (System.IO) | Microsoft Learn"),e(s)])]),v])}const y=o(r,[["render",f],["__file","01read-file.html.vue"]]);export{y as default};
