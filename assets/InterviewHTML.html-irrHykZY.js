import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as s,f as t}from"./app-0mkQjek1.js";const e={},o=t(`<h1 id="html常见问题汇总" tabindex="-1"><a class="header-anchor" href="#html常见问题汇总" aria-hidden="true">#</a> HTML常见问题汇总</h1><h2 id="_1-html全局属性" tabindex="-1"><a class="header-anchor" href="#_1-html全局属性" aria-hidden="true">#</a> 1. html全局属性</h2><ul><li>class :为元素设置类标识</li><li>data-* : 为元素增加自定义属性</li><li>draggable : 设置元素是否可拖拽</li><li>id : 元素 id ，文档内唯一</li><li>lang : 元素内容的的语言</li><li>style : 行内 css 样式</li><li>title : 元素相关的建议信息</li></ul><h2 id="_2-从浏览器地址栏输入-url到显示页面的步骤" tabindex="-1"><a class="header-anchor" href="#_2-从浏览器地址栏输入-url到显示页面的步骤" aria-hidden="true">#</a> 2. 从浏览器地址栏输入 <code>url</code>到显示页面的步骤</h2><ul><li>浏览器根据请求的URL交给DNS域名解析，找到真实IP，向服务器发起请求；</li><li>服务器交给后台处理完成后返回数据，浏览器接收文件（HTML、JS、CSS、图象等）；</li><li>浏览器对加载到的资源（HTML、JS、CSS等）进行语法解析，建立相应的内部数据结构（如HTML的DOM）；</li><li>载入解析到的资源文件，渲染页面，完成。</li></ul><p>第一次：获取url =&gt; DNS解析获取ip =&gt; tcp建立连接（三次握手） =&gt; 发送请求 =&gt; 接收返回的数据 =&gt; 解析数据 =&gt; 渲染场景（构建dom树、下载资源、构造cssom树、执行js脚本）=&gt; 显示页面</p><p>第二次：解析的ip存在本地 =&gt; 读取浏览器缓存</p><p>https://www.baidu.com</p><p>url：统一资源定位符</p><p>https：加密的传输协议（http与tcp间加了层ssl安全层）</p><p>www：万维网/服务器</p><p>baidu.com：域名</p><h2 id="_3-cookie和web-storage" tabindex="-1"><a class="header-anchor" href="#_3-cookie和web-storage" aria-hidden="true">#</a> 3. cookie和web storage</h2><p>cookie：用于<strong>存储用户信息标识</strong>，放在请求中，在客户端与服务端传递。</p><p>webStorage：浏览器本地存储，包括localStorage和sessionStorage</p><p>indexedDB：浏览器非关系数据库</p><p>区别：</p><p><strong>存储量：</strong> cookie-4kb，webStorage-5M左右（字符串），indexDB-更大（更多类型）</p><p><strong>过期时间：</strong> cookie若有过期时间，到了才过期，若没过期时间，关闭窗口才过期；sessionStorage关闭窗口过期；localStorage不主动删除不过期；indexedDB不主动删除不过期</p><p><strong>作用域</strong>：cookie和localstorage是所有同源（协议、域名、端口一致）窗口共享，sessionstorage是同一个浏览器窗口共享，不同窗口有独立的sessionStorage，不共享，跳转的页面可以共享。</p><p><strong>安全性：</strong> cookie不安全，不设置httponly容易受到跨站请求伪造；但对于容易受到跨站脚本攻击的网站，用webstorage也不安全。</p><p><strong>易用性</strong>：cookie需要封装setCookie函数，拼接cookie字符串(’名=内容；expire=时间戳‘），然后使用document.cookie=cookie字符串。webStorage有方便的api，setItem。</p><p><strong>应用</strong>：cookie适合用于会话状态管理（登陆状态、记住密码、购物车）、权限验证；localStorage适合储存不变的数据，长期登录；sessionStorage适合敏感数据，单页面用的多。</p><p>补充：localForage——智能存储方案，封装indexedDB的异步操作api。优雅降级indexedDB -&gt; WebSQL -&gt; localStorage</p><h3 id="_3-1-localstorage如何实现不同源窗口的共享" tabindex="-1"><a class="header-anchor" href="#_3-1-localstorage如何实现不同源窗口的共享" aria-hidden="true">#</a> 3.1 localStorage如何实现不同源窗口的共享</h3><ol><li><p>域名映射：把不同域名映射为同一个服务器ip</p></li><li><p>浏览器postMessage api</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 发送消息到目标窗口</span>
window<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&quot;token&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;1233211234567&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string">&quot;https://liangzai.com&quot;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 接受</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>origin <span class="token operator">===</span> <span class="token string">&quot;https://sourcedomain.com&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 存储数据到 LocalStorage</span>
    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">.</span>key<span class="token punctuation">,</span> event<span class="token punctuation">.</span>data<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_4-内联元素span和块级元素div的区别" tabindex="-1"><a class="header-anchor" href="#_4-内联元素span和块级元素div的区别" aria-hidden="true">#</a> 4.内联元素span和块级元素div的区别</h2><p><strong>内联元素</strong>：span em q label strong a input</p><p><strong>块级元素</strong>：div p img section form nav ul li</p><p><strong>空元素</strong>：br hr link meta</p><ul><li>内联元素不独占一行，只占用自身需要的空间，不能修改其高度、宽度、上下边距</li><li>块级元素独占一行，大小可设置，未设置宽度默认为父元素宽度</li></ul><p>所以，span元素宽度取决于内容宽度，设置其宽度无效，div元素默认占满一行</p><h2 id="_5-如何让浏览器支持小于12px的字体" tabindex="-1"><a class="header-anchor" href="#_5-如何让浏览器支持小于12px的字体" aria-hidden="true">#</a> 5.如何让浏览器支持小于12px的字体</h2><p>css中设置字体</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>  transform：<span class="token function">scale</span><span class="token punctuation">(</span>0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token property">-webkit-transform</span><span class="token punctuation">:</span><span class="token punctuation">(</span>0.5<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>进行整体缩放</p><p><strong>扩展transform</strong></p><p>transform(scale, translate, rotate, skew) =&gt; 缩放 位移 旋转 倾斜</p><h2 id="_6-html元素与标签的区别" tabindex="-1"><a class="header-anchor" href="#_6-html元素与标签的区别" aria-hidden="true">#</a> 6. Html元素与标签的区别</h2><p>html元素由开始标签、内容、结束标签组成。</p><p>标签指由尖括号包起来的对象，用于标记html元素</p><h2 id="_7-语义html" tabindex="-1"><a class="header-anchor" href="#_7-语义html" aria-hidden="true">#</a> 7. 语义html</h2><p>语义 HTML 是一种编码风格</p><p>加粗 b =&gt; strong</p><p>斜体 i =&gt; em</p><h2 id="_8-html标签语义" tabindex="-1"><a class="header-anchor" href="#_8-html标签语义" aria-hidden="true">#</a> 8. html标签语义</h2><p><code>&lt;header&gt;</code>：用于定义文档的标题。</p><p><code>&lt;nav&gt;</code>：定义了导航链接</p><p><code>&lt;section&gt;</code> : 用于定义文档中的一个单元</p><p><code>&lt;article&gt;</code>：用于定义独立的、自包含的文章</p><p><code>&lt;aside&gt;</code>：用于定义内容之外的内容</p><p><code>&lt;footer&gt;</code>：用于定义文档的页脚</p><h2 id="_9-doctype-html-标签是否为-html-标签" tabindex="-1"><a class="header-anchor" href="#_9-doctype-html-标签是否为-html-标签" aria-hidden="true">#</a> 9. <strong><code>&lt;!DOCTYPE html&gt;</code> 标签是否为 <code>HTML</code> 标签</strong></h2><p><code>&lt;!DOCTYPE html&gt;</code> 声明不是 <code>HTML</code> 标签。<code>&lt;!DOCTYPE&gt;</code>声明叫做文件类型定义（DTD），声明的作用为了<strong>告诉浏览器该文件的类型。让浏览器解析器知道应该用哪个规范来解析文档。</strong></p><p><code>&lt;!DOCTYPE&gt;</code>声明必须在 HTML 文档的第一行。</p><p>浏览器渲染页面的两种模式：标准模式和怪异（混杂）模式</p><h2 id="_10-html、xml和xhtml的区别" tabindex="-1"><a class="header-anchor" href="#_10-html、xml和xhtml的区别" aria-hidden="true">#</a> 10. html、xml和xhtml的区别</h2><ul><li><code>HTML</code>：超文本标记语言</li><li><code>XML</code>：可扩展标记语言</li><li><code>XHTML</code>：可扩展超文本标记语言</li></ul><p>XHTML是XML重写了HTML的规范，比HTML更加严格。</p><ol><li>XHTML中所有的标记都必须有一个相应的<strong>结束标签</strong>；</li><li>XHTML所有标签的元素和属性的名字都必须使用<strong>小写</strong>；</li><li>所有的XML标记都必须<strong>合理嵌套</strong>；</li><li>所有的属性都必须用引号“”括起来；</li><li>把所有&lt;和&amp;<strong>特殊符号用编码</strong>表示；</li><li>给所有属性附一个值；</li><li>不要在注释内容中使用“--”；</li><li>图片必须使用说明文字。</li></ol><h2 id="_11-图像地图" tabindex="-1"><a class="header-anchor" href="#_11-图像地图" aria-hidden="true">#</a> 11. 图像地图</h2><p>一张图片不同区域增加不同的链接，通常的做法是使用图像地图也称图像热点。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>devpoint.jpg<span class="token punctuation">&quot;</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">usemap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#devmap<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>devpoint<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>devmap<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>devmap<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>area</span> <span class="token attr-name">shape</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>circle<span class="token punctuation">&quot;</span></span> <span class="token attr-name">coords</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>180,139,14<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>about.html<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>about<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>area</span>
        <span class="token attr-name">shape</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>circle<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">coords</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>129,161,10<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>contact.html<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>contact<span class="token punctuation">&quot;</span></span>
    <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>area</span> <span class="token attr-name">shape</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>rect<span class="token punctuation">&quot;</span></span> <span class="token attr-name">coords</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0,0,110,260<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>home.html<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>home<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12-超链接和锚点的区别" tabindex="-1"><a class="header-anchor" href="#_12-超链接和锚点的区别" aria-hidden="true">#</a> 12. 超链接和锚点的区别</h2><p><code>&lt;a&gt;</code>中，带有 <code>href</code> 属性的称作超链接，把没有 <code>href</code> 属性只有 <code>name</code> 属性的称作锚点</p><p>命名锚点通常用于页面定位，超链接用于页面间的跳转。</p><h2 id="_13-html5离线存储" tabindex="-1"><a class="header-anchor" href="#_13-html5离线存储" aria-hidden="true">#</a> 13. html5离线存储</h2><p>为了避免重复加载页面或者在无网络的情况下正常展现内容，可以采用离线存储，其中一种方案就是使用 <code>manifest</code> 。</p><p>在页面头部加入 <code>manifest</code>属性，如下：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">manifest</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cache.manifest<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后在 <code>cache.manifest</code>文件中编写离线存储的资源规则，代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">CACHE</span> <span class="token constant">MANIFEST</span>
# <span class="token number">2021</span><span class="token operator">-</span><span class="token number">06</span><span class="token operator">-</span><span class="token number">26</span> <span class="token number">14</span><span class="token operator">:</span><span class="token number">01</span> <span class="token constant">V0</span><span class="token number">.1</span><span class="token number">.2</span><span class="token number">.42634241855282310056</span>  hash 以便做版本控制
# 默认部分，显式缓存这些文件

<span class="token constant">CACHE</span><span class="token operator">:</span>
#需要缓存的列表，如字体、图片、脚本、css
<span class="token punctuation">.</span><span class="token operator">/</span>assets<span class="token operator">/</span>images<span class="token operator">/</span>favicons<span class="token operator">/</span>32x32<span class="token punctuation">.</span>png
<span class="token punctuation">.</span><span class="token operator">/</span>assets<span class="token operator">/</span>fonts<span class="token operator">/</span>VideoJS<span class="token punctuation">.</span>eot
<span class="token punctuation">.</span><span class="token operator">/</span>assets<span class="token operator">/</span>fonts<span class="token operator">/</span>VideoJS<span class="token punctuation">.</span>svg
<span class="token punctuation">.</span><span class="token operator">/</span>assets<span class="token operator">/</span>fonts<span class="token operator">/</span>VideoJS<span class="token punctuation">.</span>ttf
<span class="token punctuation">.</span><span class="token operator">/</span>assets<span class="token operator">/</span>fonts<span class="token operator">/</span>VideoJS<span class="token punctuation">.</span>woff

# 启动页资源
<span class="token punctuation">.</span><span class="token operator">/</span>index<span class="token punctuation">.</span>html

<span class="token constant">NETWORK</span><span class="token operator">:</span>
#不需要缓存的
<span class="token operator">*</span>

<span class="token constant">FALLBACK</span><span class="token operator">:</span>
#访问缓存失败后，备用访问的资源，第一个是访问源，第二个是替换文件 <span class="token operator">*</span><span class="token punctuation">.</span>html <span class="token operator">/</span>offline<span class="token punctuation">.</span>html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_14-iframe" tabindex="-1"><a class="header-anchor" href="#_14-iframe" aria-hidden="true">#</a> 14. iframe</h2><p><code>iframe</code>是嵌入式框架, 是html标签, 是一个内联元素, <code>iframe</code> 元素会创建包含另外一个文档的内联框架（即行内框架) 。通常可以使用iframe<strong>内嵌网页</strong>，跨域ajax通讯的实现，微前端，<strong>广告嵌入</strong>等。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>home.html<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>优点</strong></p><ul><li>用于加载速度较慢的内容（比如广告）</li><li>能让脚本实现并行下载</li><li>可以实现跨子域通信</li></ul><p><strong>缺点</strong></p><ul><li>iframe会阻塞主页面的onload事件</li><li>无法被一些搜索引擎识别</li><li>会产生很多页面，难以管理</li></ul><h2 id="_15-定位方式position" tabindex="-1"><a class="header-anchor" href="#_15-定位方式position" aria-hidden="true">#</a> 15. 定位方式position</h2><p>如果两个相邻元素都在其上设置外边距，并且两个外边距接触，则两个外边距中的较大者保留，较小的一个消失——这叫<strong>外边距折叠</strong></p><p><code>position</code> 属性用于指定一个元素在文档中的定位方式。</p><ul><li><code>static</code>： 默认值，没有定位，指定元素使用正常的布局行为，即元素在文档常规流中当前的布局位置，此属性下 <code>top</code>、<code>right</code>、<code>bottom</code>、<code>left</code> 和 <code>z-index</code> 属性无效。</li><li><code>relative</code> 相对定位：元素先放置在未添加定位时的位置，在<strong>不改变页面布局的前提下</strong>调整元素位置（<strong>此时会在此元素未添加定位时所在位置留下空白</strong>）。<code>position:relative</code> 对 <code>table-row</code>、<code>table-column</code>、<code>table-cell</code>、<code>table-caption</code> 元素无效。（<strong>相对于自身原来的位置</strong>）</li><li><code>absolute</code> 绝对定位：生成绝对定位的元素，元素会<strong>被移出正常文档流</strong>，并不为元素预留空间，通过指定元素<strong>相对于最近的非 <code>static</code> 定位祖先元素的偏移</strong>，来确定元素位置。绝对定位的元素可以设置外边距（<code>margins</code>），<strong>且不会与其他边距合并</strong>。</li><li><code>fixed</code> 固定定位：生成绝对定位的元素，元素会被移出正常文档流，并不为元素预留空间，而是通过指定元素<strong>相对于屏幕视口</strong>（viewport）的位置来指定元素位置，元素的位置在<strong>屏幕滚动时不会改变</strong></li><li><code>sticky</code> 元素根据正常文档流进行定位，相对它的最近滚动祖先和最近块级祖先</li></ul><h2 id="_16-z-index" tabindex="-1"><a class="header-anchor" href="#_16-z-index" aria-hidden="true">#</a> 16. z-index</h2><p>z-index 属性指定元素的堆栈顺序</p><p>利用z-index，可以改变元素相互覆盖的顺序。</p><ul><li>z-index 仅能在定位元素上奏效（position属性值设置除默认值static以外的元素，包括relative，absolute，fixed样式）</li><li><code>z-index的比较基本是在同一层级，也就是拥有同一个父元素。如果是不同层级的比较，则需要依靠z-index的比重大小决定，和层叠上下文有关系。</code></li><li><code>z-index 属性设置元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面</code></li></ul><h2 id="_17-title和h1" tabindex="-1"><a class="header-anchor" href="#_17-title和h1" aria-hidden="true">#</a> 17. title和h1</h2><p><code>title</code> 为页面标题，可以包含 <code>h1</code> 的标题，一般面对的是搜索引擎和浏览器标签。</p><p><code>h1</code> 为大标题，一般用作文章的标题</p><h2 id="_18-display-none和-visibility-hidden的区别" tabindex="-1"><a class="header-anchor" href="#_18-display-none和-visibility-hidden的区别" aria-hidden="true">#</a> 18. <strong><code>display:none</code>和 <code>visibility:hidden</code>的区别</strong></h2><ul><li><code>display:none</code>：被隐藏的对象不会占用任何物理空间，不会影响其他元素的布局</li><li><code>visibility:hidden</code>：使对象在网页上不可见，但是会在网页上占用物理空间，通俗来说就是看不见但摸得到。</li><li><code>visibility</code>具有继承性，给父元素设置 <code>visibility:hidden，</code>子元素也会继承这个属性；但是如果重新给子元素设置 <code>visibility: visible</code>,则子元素又会显示出来</li><li><code>visibility: hidden</code>不会影响计数器的计数，即隐藏第二个之后为134，而 <code>display:none</code>为123</li><li>设置 <code>visibility: hidden</code>不会回流只会重绘，设置 <code>display:none</code>会回流</li></ul><h2 id="_19-回流和重绘" tabindex="-1"><a class="header-anchor" href="#_19-回流和重绘" aria-hidden="true">#</a> 19. 回流和重绘</h2><p><strong>回流必将引起重绘，重绘不一定会引起回流。（单个元素改变-重绘，渲染树改变-回流）</strong></p><p><strong>回流</strong>，当渲染树中部分或全部元素的尺寸、结构、或某些属性发生改变时，浏览器重新渲染部分或全部文档的过程。</p><ul><li>页面首次渲染</li><li>浏览器窗口大小发生改变</li><li>元素尺寸或位置发生改变</li><li>元素内容变化（文字数量或图片大小等等）</li><li>元素字体大小变化</li><li>添加或者删除<strong>可见</strong>的 <code>DOM</code>元素</li><li>激活 <code>CSS</code>伪类（例如：<code>:hover</code>）</li><li>查询某些属性或调用某些方法</li></ul><p><strong>重绘</strong>，当页面中元素样式的改变并<strong>不影响它在文档流中的位置</strong>时（例如：<code>color</code>、<code>background-color</code>、<code>visibility</code>等），浏览器会将新样式赋值给元素并重新绘制它的过程。</p><p><strong>性能影响</strong></p><p>回流一个单一的元素，它的父元素以及任何跟随它的元素也会产生回流。现代浏览器会对频繁的回流或重绘操作进行优化：</p><p>浏览器会维护一个队列，把所有引起回流和重绘的操作放入队列中，如果队列中的<strong>任务数量或者时间间隔</strong>达到一个阈值的，浏览器就会将<strong>队列清空，进行一次批处理</strong>，这样可以把<strong>多次回流和重绘变成一次</strong>。</p><p><strong>如何避免</strong></p><p><strong>CSS</strong></p><ul><li>避免使用 <code>table</code>布局。</li><li>尽可能在 <code>DOM</code>树的最末端改变 <code>class</code>。</li><li>避免设置多层内联样式。</li><li>将动画效果应用到 <code>position</code>属性为 <code>absolute</code>或 <code>fixed</code>的元素上。</li><li>避免使用 <code>CSS</code>表达式（例如：<code>calc()</code>）。</li></ul><p><strong>JavaScript</strong></p><ul><li>避免频繁操作样式，最好一次性重写 <code>style</code>属性，或者将样式列表定义为 <code>class</code>并一次性更改 <code>class</code>属性。</li><li>避免频繁操作 <code>DOM</code>，创建一个 <code>documentFragment</code>，在它上面应用所有 <code>DOM操作</code>，最后再把它添加到文档中。</li><li>也可以先为元素设置 <code>display: none</code>，操作结束后再把它显示出来。因为 <code>display</code>属性为 <code>none</code>的元素不在 <code>DOM</code>树中，进行的 <code>DOM</code>操作不会引发回流和重绘。</li><li>避免频繁读取会引发回流/重绘的属性，如果确实需要多次使用，就用一个变量缓存起来。</li><li>对具有复杂动画的元素使用绝对定位，使它脱离文档流，否则会引起父元素及后续元素频繁回流。</li></ul><h2 id="_20-meta标签" tabindex="-1"><a class="header-anchor" href="#_20-meta标签" aria-hidden="true">#</a> 20. meta标签</h2><p><code>meta</code> 标签由 <code>name</code> 和 <code>content</code> 属性定义，<strong>用来描述网页文档的属性</strong>，比如网页的作者，网页描述，关键词等，除了HTTP标准固定了一些 <code>name</code>作为大家使用的共识，开发者还可以自定义name。</p><p>常用的meta标签：</p><p>（1）<code>charset</code>，用来描述HTML文档的编码类型：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（2） <code>keywords</code>，页面关键词：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>keywords<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>关键词<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（3）<code>description</code>，页面描述：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>description<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>页面描述内容<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（4）<code>refresh</code>，页面重定向和刷新</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>refresh<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0;url=<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（5）<code>viewport</code>，适配移动端，可以控制视口的大小和比例：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1, maximum-scale=1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，content 参数有以下几种：</p><ul><li>width viewport ：宽度(数值/device-width)</li><li>height viewport ：高度(数值/device-height)</li><li>initial-scale ：初始缩放比例</li><li>maximum-scale ：最大缩放比例</li><li>minimum-scale ：最小缩放比例</li><li>user-scalable ：是否允许用户缩放(yes/no）</li></ul><p>（6）搜索引擎索引方式：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>robots<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>index,follow<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，content 参数有以下几种：</p><ul><li>all：文件将被检索，且页面上的链接可以被查询；</li><li>none：文件将不被检索，且页面上的链接不可以被查询；</li><li>index：文件将被检索；</li><li>follow：页面上的链接可以被查询；</li><li>noindex：文件将不被检索；</li><li>nofollow：页面上的链接不可以被查询。</li></ul><h2 id="_21-script标签中defer和async的区别" tabindex="-1"><a class="header-anchor" href="#_21-script标签中defer和async的区别" aria-hidden="true">#</a> 21. script标签中defer和async的区别</h2><p>如果没有defer或async属性，<strong>浏览器会立即加载并执行相应的脚本</strong>。它不会等待后续加载的文档元素，读取到就会开始加载和执行，这样就<strong>阻塞了后续文档的加载</strong>。</p><p>即，<strong>defer 和 async属性都是去异步加载外部的JS脚本文件，它们都不会阻塞页面的解析</strong></p><p><strong>区别</strong>：</p><ul><li>多个带async属性的标签，不能保证加载的顺序；</li><li>多个带<strong>defer属性的标签，按照加载顺序执行</strong></li><li>async属性，表示后续文档的加载和执行与js脚本的<strong>加载和执行是并行进行</strong>的，即异步执行；当然js执行时，html的解析会停止</li><li>defer属性，加载后续文档的过程和js脚本的<strong>加载(此时仅加载不执行)是并行进行</strong>的(异步)，<strong>js脚本需要等到文档所有元素解析完成之后才执行，DOMContentLoaded事件触发执行之前。</strong></li></ul><p>如果script标签同时具备async和defer =&gt; 效果和async是一样的</p><p><strong>以上均针对script放在head的时候</strong>，<strong>也可以把script标签放到body之后去写</strong>，这样，可<strong>不写async和defer</strong>也能防止script标签阻塞html解析。</p><h2 id="_22-标签上title属性与alt属性的区别" tabindex="-1"><a class="header-anchor" href="#_22-标签上title属性与alt属性的区别" aria-hidden="true">#</a> 22. 标签上title属性与alt属性的区别</h2><ul><li><code>alt</code>是为了在图片<strong>未能正常显示时给予文字说明</strong>。且长度必须少于100个英文字符或者用户必，即保证替换文字尽可能的短。</li><li><code>title</code>属性为设置该属性的元素提供建议性的信息。使用 <code>title</code>属性提供非本质的额外信息。通常是<strong>鼠标滑动到元素上是显示</strong>。</li></ul><h2 id="_23-input与textarea的区别" tabindex="-1"><a class="header-anchor" href="#_23-input与textarea的区别" aria-hidden="true">#</a> 23. input与textarea的区别</h2><ul><li><strong>input是单行文本框，不会换行</strong>。通过size属性指定显示字符的长度，注意：当使用css限定了宽高，那么size属性就不再起作用。value属性指定初始值，Maxlength属性指定文本框可以输入的最长长度。可以通过width和height设置宽高，但是也不会增加行数。</li><li><strong>textarea 是多行文本输入框</strong>，文本区中可容纳无限数量的文本，无value属性，其中的文本的默认字体是等宽字体，可以通过 cols 和 rows 属性来规定 textarea 的尺寸，不过更好的办法是使用 CSS 的 height 和 width 属性。</li></ul><p><strong>用div模拟textarea</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">.textarea</span><span class="token punctuation">{</span>
    <span class="token property">min-height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #a0b3d6<span class="token punctuation">;</span> 
    <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>
    <span class="token property">max-height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
    <span class="token property">overflow-y</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!--在div标签里面加入contenteditable=“true”--&gt;</span> 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>textarea<span class="token punctuation">&quot;</span></span> <span class="token attr-name">contenteditable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_24-head-标签有什么作用-其中什么标签必不可少" tabindex="-1"><a class="header-anchor" href="#_24-head-标签有什么作用-其中什么标签必不可少" aria-hidden="true">#</a> 24. head 标签有什么作用，其中什么标签必不可少</h2><p>标签中的元素可以引用脚本 <code>&lt;script&gt;</code>、指示浏览器在哪里找到样式表 <code>link</code>、提供元信息 <code>&lt;link&gt;</code>等。描述了文档的各种属性和信息，包括文档的标题、在 Web 中的位置 <code>&lt;meta&gt;</code>以及和其他文档的关系等。</p><p>其中 <code>&lt;title&gt;</code> 定义文档的标题，它是 head 部分中唯一必需的元素。</p><h2 id="_25-浏览器乱码的原因是什么-如何解决" tabindex="-1"><a class="header-anchor" href="#_25-浏览器乱码的原因是什么-如何解决" aria-hidden="true">#</a> 25. 浏览器乱码的原因是什么？如何解决？</h2><p><strong>乱码原因</strong></p><ul><li>网页源代码是 <code>gbk</code>的编码，而内容中的中文字是 <code>utf-8</code>编码的，这样浏览器打开即会出现 <code>html</code>乱码，反之也会出现乱码；</li><li><code>html</code>网页编码是 <code>gbk</code>，而程序从数据库中调出呈现是 <code>utf-8</code>编码的内容也会造成编码乱码；</li><li>浏览器不能自动检测网页编码，造成网页乱码。</li></ul><p>解决方案</p><ul><li>使用软件编辑器去编辑HTML网页的内容</li><li>如果网页设置的编码是gbk，数据库中的是utf-8，这时候就需要前后统一 一下编码</li><li>如果浏览器浏览时候出现网页乱码，在浏览器中找到转换编码的菜单进行转换。</li></ul><h2 id="_26-src与href有什么区别" tabindex="-1"><a class="header-anchor" href="#_26-src与href有什么区别" aria-hidden="true">#</a> 26. src与href有什么区别</h2><ul><li><p><strong>src</strong>是 <code>source</code>的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；(替换当前元素)</p><p>可引入外部资源,代替元素本身内容,暂停其他资源下载</p></li><li><p>而<strong>href</strong>是 <code>Hypertext Reference</code>的缩写，指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接。</p><p>表示超链接,不会代替本身内容,不会暂停其他资源下载</p></li></ul><p>即</p><ul><li>src代表的是网站的一部分，没有会对网站的使用造成影响</li><li>href代表网站的附属资源，没有不会对网站的核心逻辑和结构造成影响</li><li>css属于网站的附属资源，不影响网站核心逻辑和结构,引入使用href</li></ul><h2 id="_27-如何对网站的文件和资源进行优化" tabindex="-1"><a class="header-anchor" href="#_27-如何对网站的文件和资源进行优化" aria-hidden="true">#</a> 27. 如何对网站的文件和资源进行优化</h2><ul><li>文件合并（目的是<strong>合并请求</strong>,减少http请求中的网络延迟,丢包等问题）；</li><li>文件压缩 （目的是直接<strong>减少文件下载的体积</strong>,如对渲染无意义的字符,代码，gizp压缩需要的js和css文件；）；</li><li>使用缓存；(<strong>不重复加载相同的资源</strong>,当文件更新,可通过更新页面中引用的资源链接地址，让浏览器主动放弃缓存，加载新资源.)</li><li>使用cdn托管大静态资源；(CDN是一组<strong>分布在多个不同地理位置的 Web 服务器</strong>,让用户离服务器更近，从而缩短请求时间)</li><li>反向链接，网站外链接优化；</li><li>meta标签优化（title, description, keywords）,heading标签的优化,alt优化</li><li>图片优化: 延迟加载(<strong>出现在视图后才加载</strong>), 响应式图片,降低图片质量,调整图片大小</li><li>减少dom操作避免回流</li></ul><h2 id="_28-为什么利用多个域名来存储网站资源会更有效" tabindex="-1"><a class="header-anchor" href="#_28-为什么利用多个域名来存储网站资源会更有效" aria-hidden="true">#</a> 28. 为什么利用多个域名来存储网站资源会更有效</h2><ul><li><code>CDN</code>缓存更加方便；</li><li>突破浏览器并发限制；</li><li>节约 <code>cookie</code>宽带；</li><li>节约主域名的连接数，优化页面下响应速度；</li><li>防止不必要的安全问题；</li></ul><h2 id="_29-对比一下cookie和session" tabindex="-1"><a class="header-anchor" href="#_29-对比一下cookie和session" aria-hidden="true">#</a> 29. 对比一下cookie和session</h2><p>cookie保存在客户端，session保存在服务器端</p><p><strong>cookie</strong></p><ul><li>没有设置cookie的过期时间，<strong>cookie被保存在内存中</strong>，生命周期随浏览器的关闭而结束，这种cookie简称会话cookie(session cookie,保存了sessionId)</li><li>设置了cookie的过期时间，<strong>cookie被保存在硬盘中</strong>，关闭浏览器后，cookie数据仍然存在，直到过期时间结束才消失。</li><li>cookie是以文本的方式保存在客户端，每次请求时都带上它。</li><li>cookie只能保存字符串类型，以文本的方式, 数据不能超过4kb</li></ul><p><strong>session</strong></p><ul><li>服务器收到请求, 检查客户端请求中是否包含sessionid, 有sessionid，服务器将根据该id返回对应session对象。如果客户端请求中没有sessionid，服务器会创建新的session对象，并把sessionid在本次响应中返回给客户端。</li><li>通常使用cookie方式存储sessionid到客户端</li><li>禁用了 Cookies，服务器仍会将 sessionId 以 cookie 的方式发送给浏览器，但是，浏览器不再保存这个cookie (即sessionId) 了.如果想要继续使用 session，需要采用 <code>URL 重写</code> 的方式来实现</li><li>session通过类似与Hashtable的数据结构来保存，能支持任何类型的对象</li></ul><p><strong>缺点：</strong></p><p>cookie：</p><p>（1）大小受限</p><p>（2）用户可以操作（禁用）cookie，使功能受限</p><p>（3）安全性较低</p><p>（4）有些状态不可能保存在客户端。</p><p>（5）每次访问都要传送cookie给服务器，浪费带宽。</p><p>（6）cookie数据有路径（path）的概念，可以限制cookie只属于某个路径下。</p><p>session：</p><p>（1）Session保存的东西越多，就越占用服务器内存，对于用户在线人数较多的网站，服务器的内存压力会比较大。</p><p>（2）依赖于cookie（sessionID保存在cookie），如果禁用cookie，则要使用URL重写，不安全。</p><p>（3）创建Session变量有很大的随意性，可随时调用，不需要开发者做精确地处理，所以，过度使用session变量将会导致代码不可读而且不好维护。</p><h2 id="_30-h5新特性" tabindex="-1"><a class="header-anchor" href="#_30-h5新特性" aria-hidden="true">#</a> 30. h5新特性</h2><h3 id="_30-1-语义化标签" tabindex="-1"><a class="header-anchor" href="#_30-1-语义化标签" aria-hidden="true">#</a> 30.1 语义化标签</h3><p><strong>前端的语义化</strong></p><ul><li>在没有css的美化下,也能很好的呈现内容</li><li>用户体验好,如title alt的内容等</li><li>有利于SEO(搜索引擎建立良好沟通,便于爬虫获取更多信息)</li><li>方便其他设备解析(屏幕阅读器 盲人阅读器)</li><li>便于团队开发与维护</li></ul><p><strong>写html需要注意什么</strong></p><ul><li>尽可能少用无语义标签div span等,语义不明显时,尽量使用p(他有上下间距,对兼容特殊终端有利)</li><li>不适用纯样式标签b、font、u等，改用css</li><li>使用表格时，标题用caption，表头用thead，主体用tbody包围，尾部用tfoot包围。表头和一般单元格要区分开，表头用th，单元格用td</li><li>表单域要用filedset标签包起来，并用legend标签说明表单用途</li><li>每个input标签对应的说明文本都需要使用label标签，并且通过为input设置id属性，在lable标签中设置for=someld来让说明文本和相对应的input关联起来。</li></ul><p><strong>h5新增的语义标签</strong></p><ol><li>header元素</li></ol><p>header元素代表“网页“和”section”的页眉。作为整个页面或者内容块的标题，没有限制header元素的个数</p><ol start="2"><li>footer元素</li></ol><p>footer元素代表“网页”或“section”的页脚，通常含有该页面的一些基本信息，例如：文档创作者的姓名、文档的版权信息、使用条款的链接、联系信息等等。</p><ol start="3"><li>hgroup元素</li></ol><p>hgroup元素代表“网页”或“section”的标题，当元素有多个层级时，该元素可以<strong>将h1到h6元素放在其内</strong>，譬如文章的主标题和副标题的组合。</p><ol start="4"><li>nav元素</li></ol><p>代表页面的<strong>导航链接</strong>区域。用于定义页面的主要导航部分。</p><ol start="5"><li>aside元素</li></ol><p>被包含在<strong>article元素中</strong>作为主要内容的<strong>附属信息部分</strong>，其中的内容可以是与当前文章有关的相关资料、标签、名词解释等。</p><ol start="6"><li>article元素</li></ol><p>article代表一个在文档，页面或者网站中<strong>自成一体</strong>的内容</p><ol start="7"><li>mark元素</li></ol><p>高亮文本标签</p><ol start="8"><li>progress元素</li></ol><p>用来显示一项任务的完成进度。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>progress</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>70<span class="token punctuation">&quot;</span></span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>100<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>70 %<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>progress</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="9"><li>adress元素</li></ol><p>个人或者某个组织的联系信息等等</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>address</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mailto:jim@rock.com<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>mjj67890@163.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tel:+13115552368<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>(311) 555-2368<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>address</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_30-2-增强型表单" tabindex="-1"><a class="header-anchor" href="#_30-2-增强型表单" aria-hidden="true">#</a> 30.2 增强型表单</h3><h3 id="_30-3-视频和音频" tabindex="-1"><a class="header-anchor" href="#_30-3-视频和音频" aria-hidden="true">#</a> 30.3 视频和音频</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> poster<span class="token operator">:</span>视频封面图片地址 <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>video id<span class="token operator">=</span><span class="token string">&quot;my-video&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;video-js vjs-big-play-centered&quot;</span> controls<span class="token operator">=</span><span class="token string">&quot;controls&quot;</span> poster<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token operator">&gt;</span>
     <span class="token operator">&lt;</span>source src<span class="token operator">=</span><span class="token string">&quot;/videoSource/getVideo/\${videoId}&quot;</span> type<span class="token operator">=</span><span class="token string">&#39;video/mp4&#39;</span><span class="token operator">&gt;</span>
          <span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;vjs-no-js&quot;</span><span class="token operator">&gt;</span>
               你的浏览器貌似不支持 <span class="token operator">%</span><span class="token operator">&gt;</span>_<span class="token operator">&lt;</span><span class="token operator">%</span>
               <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">&quot;http://videojs.com/html5-video-support/&quot;</span> target<span class="token operator">=</span><span class="token string">&quot;_blank&quot;</span><span class="token operator">&gt;</span>supports <span class="token constant">HTML5</span> video<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>
          <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>video<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 实测使用 controlsList<span class="token operator">=</span><span class="token string">&quot;nodownload&quot;</span>关闭下载<span class="token operator">--</span><span class="token operator">&gt;</span>

  <span class="token operator">&lt;</span>video width<span class="token operator">=</span><span class="token string">&quot;100%&quot;</span> height<span class="token operator">=</span><span class="token string">&quot;270px&quot;</span> controls autoplay id<span class="token operator">=</span><span class="token string">&quot;videoId&quot;</span> style<span class="token operator">=</span><span class="token string">&quot;margin-top: 2px;&quot;</span>  controlsList<span class="token operator">=</span><span class="token string">&quot;nodownload&quot;</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>source  <span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">&quot;videoUrl&quot;</span> type<span class="token operator">=</span><span class="token string">&quot;video/mp4&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>video<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_30-4-canvas绘图" tabindex="-1"><a class="header-anchor" href="#_30-4-canvas绘图" aria-hidden="true">#</a> 30.4 Canvas绘图</h3><p>Canvas是画布，通过Javascript来绘制2D图形，是逐<strong>像素</strong>进行渲染的。其位置发生改变，就会重新进行绘制。</p><ul><li>依赖分辨率</li><li>不支持事件处理器</li><li>弱的文本渲染能力</li><li>能够以 .png 或 .jpg 格式保存结果图像</li><li>最适合图像密集型的游戏，其中的许多对象会被频繁重绘</li></ul><h3 id="_30-5-svg绘图" tabindex="-1"><a class="header-anchor" href="#_30-5-svg绘图" aria-hidden="true">#</a> 30.5 SVG绘图</h3><p>SVG基于XML就意味着SVG DOM中的每个元素都是可用的，可以为某个元素附加Javascript事件处理器。SVG 对象的属性发生变化，那么浏览器能够自动重现图形。</p><ul><li>不依赖分辨率</li><li>支持事件处理器</li><li>最适合带有大型渲染区域的应用程序（比如谷歌地图）</li><li>复杂度高会减慢渲染速度（任何过度使用 DOM 的应用都不快）</li><li>不适合游戏应用</li></ul><h3 id="_30-6-地理定位-geolocation" tabindex="-1"><a class="header-anchor" href="#_30-6-地理定位-geolocation" aria-hidden="true">#</a> 30.6 地理定位 Geolocation</h3><h3 id="_30-7-拖放api-地图上的拖拉-拖拉上传文件" tabindex="-1"><a class="header-anchor" href="#_30-7-拖放api-地图上的拖拉-拖拉上传文件" aria-hidden="true">#</a> 30.7 拖放API（地图上的拖拉，拖拉上传文件）</h3><ul><li>dragstart：事件主体是被拖放元素，在开始拖放被拖放元素时触发。</li><li>darg：事件主体是被拖放元素，在正在拖放被拖放元素时触发。</li><li>dragenter：事件主体是目标元素，在被拖放元素进入某元素时触发。</li><li>dragover：事件主体是目标元素，在被拖放在某元素内移动时触发。</li><li>dragleave：事件主体是目标元素，在被拖放元素移出目标元素时触发。</li><li>drop：事件主体是目标元素，在目标元素完全接受被拖放元素时触发。</li><li>dragend：事件主体是被拖放元素，在整个拖放操作结束时触发。</li></ul><h3 id="_30-8-web-worker" tabindex="-1"><a class="header-anchor" href="#_30-8-web-worker" aria-hidden="true">#</a> 30.8 Web Worker</h3><p>在执行脚本时，页面的状态是不可响应的，直到脚本执行完成后，页面才变成可响应。</p><p>web worker 是运行在后台的 js，独立于其他脚本，不会影响页面的性能。 并且通过 postMessage 将结果回传到主线程。这样在进行复杂操作的时候，就不会阻塞主线程了。</p><p>用途：懒加载、文本分析、流媒体数据处理、canvas图形绘制、图像处理</p><h3 id="_30-9-web-storage" tabindex="-1"><a class="header-anchor" href="#_30-9-web-storage" aria-hidden="true">#</a> 30.9 Web Storage</h3><p>见3节</p><h3 id="_30-10-websocket" tabindex="-1"><a class="header-anchor" href="#_30-10-websocket" aria-hidden="true">#</a> 30.10 WebSocket</h3><p>即时通讯</p><ol><li>初始化WebSocket对象</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// http协议时：</span>
that<span class="token punctuation">.</span>ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">ws://www.test.com/send_message/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// https协议时：</span>
that<span class="token punctuation">.</span>ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">wss://www.test.com/send_message/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>与服务端建立连接触发</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>that<span class="token punctuation">.</span>ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;与服务器成功建立连接&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>服务端推送消息触发</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ev</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> that<span class="token punctuation">.</span><span class="token function">talking</span><span class="token punctuation">(</span>ev<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> 
talking（）<span class="token punctuation">{</span><span class="token comment">//处理数据}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>发生错误触发</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>ws<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;连接错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li>正常关闭触发</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>ws<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;连接关闭&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="6"><li>发送数据</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="7"><li>关闭连接</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function-variable function">onbeforeunload</span> <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  
    that<span class="token punctuation">.</span>ws<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;谢谢光临1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">&#39;谢谢光临2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//IE 谷歌浏览器提示（opera浏览器只有刷新时提示）</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_31-svg和canvas的区别" tabindex="-1"><a class="header-anchor" href="#_31-svg和canvas的区别" aria-hidden="true">#</a> 31. svg和canvas的区别</h2><ul><li>canvas画图基于<strong>像素点</strong>，是位图，如果进行放大或缩小会<strong>失真</strong> ；svg基于图形，用html标签描绘形状，放大缩小不会失真</li><li><strong>canvas需要在js中绘制 ；svg在html绘制</strong></li><li>canvas支持颜色比svg多</li><li>canvas无法对已经绘制的图像进行修改、操作 ；<strong>svg可以获取到标签进行操作</strong></li></ul><h2 id="_32-状态码" tabindex="-1"><a class="header-anchor" href="#_32-状态码" aria-hidden="true">#</a> 32. 状态码</h2><p>1XX Informational（信息性状态码） 接受的请求正在处理 2XX Success（成功状态码） 请求正常处理完毕 3XX Redirection（重定向状态码） 需要进行附加操作以完成请求 4XX Client Error（客户端错误状态码） 服务器无法处理请求 5XX Server Error（服务器错误状态码） 服务器处理请求出错</p><ul><li>200 - 请求成功</li><li>301 - 资源（网页等）被永久转移到其它URL</li><li>404 - 请求的资源（网页等）不存在</li><li>500 - 内部服务器错误</li></ul><h2 id="_33-http请求-restful-api" tabindex="-1"><a class="header-anchor" href="#_33-http请求-restful-api" aria-hidden="true">#</a> 33. http请求-restful api</h2><p><strong>restful api的理解</strong></p><p>Representational State Transfer，简称REST，直译过来表现层状态转换。</p><p>RESTful风格的API 固然很好很规范，但大多数互联网公司并没有按照或者完全按照其规则来设计，因为REST是一种风格，而不是一种约束或规则，过于理想的RESTful API 会付出太多的成本。</p><p><strong>get和post区别</strong></p><p>1.get请求一般是去取获取数据（其实也可以提交，但常见的是获取数据）； post请求一般是去提交数据。</p><p>2.get因为参数会放在url中，所以隐私性，安全性较差，请求的数据长度是有限制的， 不同的浏览器和服务器不同，一般限制在 2~8K 之间，更加常见的是 1k 以内； post请求没有长度限制，请求数据是放在body中；</p><p>3.get请求刷新服务器或者回退没有影响，post请求回退时会重新提交数据请求。</p><p>4.get请求可以被缓存，post请求不会被缓存。</p><p>5.get请求会被保存在浏览器历史记录当中，post不会。get请求可以被收藏为书签，因为参数就在url中，但post不能。它的参数不在url中。</p><p>6.get请求只能进行url编码（appliacation-x-www-form-urlencoded）,post请求支持多种（multipart/form-data等）。</p><p>深入理解 1…GET 和 POST都是http请求方式， 底层都是 TCP/IP协议；通常GET 产生一个 TCP 数据包；POST 产生两个 TCP 数据包（但firefox是发送一个数据包），</p><p>2.对于 GET 方式的请求，浏览器会把 http header 和 data 一并发送出去，服务器响应 200 （返回数据）表示成功；</p><p>而对于 POST，浏览器先发送 header，服务器响应 100， 浏览器再继续发送 data，服务器响应 200 （返回数据）。</p><h2 id="_34-缓存" tabindex="-1"><a class="header-anchor" href="#_34-缓存" aria-hidden="true">#</a> 34. 缓存</h2><p>浏览器缓存主要分为强制缓存和协商缓存。</p><p>强制缓存：不会向服务器发起请求，直接从缓存中读取资源。</p><p>协商缓存：使用缓存前向服务器发送请求，服务器根据请求头判断。协商缓存可以解决强制缓存下，资源不更新的问题。</p><p><strong>缓存中header参数</strong></p><p>强制缓存</p><p>expires：response header（响应头）中的过期时间。在过期时间内再次加载资源，则触发强缓存。</p><p>cache-control：值设为max-age=300，指正常请求的5分钟内再请求，触发强缓存。</p><p>协商缓存</p><p>cache-control：-no-cache指不是用本地缓存，采用协商缓存。</p><p>此外还有字段</p><ol><li>last-modify（资源最后修改时间），由服务器传给浏览器，第二次浏览器传给服务器进行判断资源是否修改。（有不足，一秒若改变多次，只会更新最后一次）</li><li>Etag指资源文件对应的hash值（服务器生成）</li></ol><p>其他</p><p>cache：-no-store指不使用浏览器缓存</p><p>cache：-public指可以被所有用户缓存，除浏览器外，代理网关、代理服务器cdn等能。</p><p>cache：-private指只能被浏览器缓存</p><h2 id="_36-cookie可设置字段与编码" tabindex="-1"><a class="header-anchor" href="#_36-cookie可设置字段与编码" aria-hidden="true">#</a> 36. cookie可设置字段与编码</h2><p>使用cookie的过程中，可以<strong>设置的字段</strong>有：</p><ol><li>name：一个cookie的名称。</li><li>value：一个cookie的值。</li><li>domain：可以访问到此cookie的域名。</li><li>path：可以访问此cookie的页面路径。比如domain是abx.com,path是/test,那么只有/test路径下的页面可以读取此cookie。</li><li>expires/Max-Age：此cookie的超时时间。若设置其值为一个时间，那么当到达此时间后，此cookie失效。不设置的话默认值是Session，意思是cookie会和Session一起失效。当浏览器关闭（不是浏览器标签页，是整个浏览器）后，此cookie失效。</li><li>Size：此cookie的大小。</li><li>http：cookie的httponly属性。若此属性为true，则只有在http请求头中会带有此cookie的信息，而不能通过document.cookie来访问此cookie。</li><li>secure：设置是否只能通过https来传递此条cookie。</li></ol><p><strong>cookie的编码方式</strong>：encodeURI（）</p><h2 id="_37-登录安全" tabindex="-1"><a class="header-anchor" href="#_37-登录安全" aria-hidden="true">#</a> 37. 登录安全</h2><ol><li><strong>密码加密：</strong> 对称加密（加密和解密用的是同一个方式，<strong>MD5,DES算法</strong>）、非对称加密（公钥+私钥，在 https 的加密中，加密传输的数据本身使用的是对称加密，加密对称秘钥时使用的非对称加密的公钥（服务器传给客户端），<strong>RSA，ECC算法</strong>）</li><li><strong>强密码策略</strong>（大写、小写、字符、数字）</li><li>使用<strong>token令牌验证</strong>（sessionid、token、jwt token）</li><li><strong>数字摘要</strong>（对传送数据生成摘要并使用私钥进行加密的过程，防止数据包的字段被篡夺），<strong>username+MD5(password)+token通过签名，得到一个字段checkCode</strong>，发给服务端后进行对比判断</li><li><strong>验证码</strong>：防止机器批量多次发送请求</li><li><strong>第三方登录授权</strong>：微信登录验证码（申请appid、new wxLogin实例设置重定向网页，href设置样式等，成功后授权信息会在url后拼接）</li><li>输入过滤、编码的操作，<strong>防止xss、crsf攻击</strong></li></ol>`,273),p=[o];function l(i,c){return a(),s("div",null,p)}const d=n(e,[["render",l],["__file","InterviewHTML.html.vue"]]);export{d as default};
