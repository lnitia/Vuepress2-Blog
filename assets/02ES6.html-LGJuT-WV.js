import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as e}from"./app-0mkQjek1.js";const t="/assets/1721270140928-B-kydLzB.png",p="/assets/1721270329198-F6Q9fMOA.png",o={},c=e(`<h1 id="es6" tabindex="-1"><a class="header-anchor" href="#es6" aria-hidden="true">#</a> ES6</h1><h2 id="_1-let关键字" tabindex="-1"><a class="header-anchor" href="#_1-let关键字" aria-hidden="true">#</a> 1 let关键字</h2><ol><li>语法 <code>let 变量名</code></li><li>变量不能重复声明</li><li>块级作用域，声明的变量只在代码块里有用</li><li>不存在变量提升</li><li>不影响作用域链</li></ol><h2 id="_2-const关键字" tabindex="-1"><a class="header-anchor" href="#_2-const关键字" aria-hidden="true">#</a> 2 const关键字</h2><ol><li>声明值不能修改的量</li><li>语法 <code>const 变量名=初始值</code></li><li>声明时必须赋初始值</li><li>一般常量使用大写</li><li>常量值不能修改</li><li>块级作用域</li><li>对于数组和对象的元素修改，不算对常量的修改，不会报错</li></ol><h2 id="_3-变量解构赋值" tabindex="-1"><a class="header-anchor" href="#_3-变量解构赋值" aria-hidden="true">#</a> 3 变量解构赋值</h2><ol><li>允许按照一定模式从数组和对象中提取值，对变量进行赋值</li><li>数组解构 <code>let [zero,one,two.three] = [0,1,2,3]</code></li><li>对象解构</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> sample <span class="token operator">=</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;sample&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">,</span>
    <span class="token function-variable function">log</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;234445&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>log<span class="token punctuation">}</span><span class="token operator">=</span> sample<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-模板字符串" tabindex="-1"><a class="header-anchor" href="#_4-模板字符串" aria-hidden="true">#</a> 4 模板字符串</h2><ol><li>新的声明字符串的方式 let str = <code>字符串</code></li><li>内容里可以直接出现换行符</li><li>可以直接进行变量拼接 let out = <code>\${str}其他字符串</code></li></ol><h2 id="_5-简化对象" tabindex="-1"><a class="header-anchor" href="#_5-简化对象" aria-hidden="true">#</a> 5 简化对象</h2><ol><li>ES6允许在大括号里直接写入变量和函数，作为对象的属性和方法</li><li>语法</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;学校&#39;</span>
<span class="token keyword">let</span> <span class="token function-variable function">change</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111111</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> school <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">,</span>
    change<span class="token punctuation">,</span>
    <span class="token function">improve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;简化对象里声明函数的语法&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-箭头函数" tabindex="-1"><a class="header-anchor" href="#_6-箭头函数" aria-hidden="true">#</a> 6 箭头函数</h2><ol><li>ES6允许使用箭头定义函数</li><li>语法 <code>let fn = (形参) =&gt; {代码体}</code></li><li>箭头函数this是静态的，this始终指向函数声明时所在作用域下的this值，不可被改变</li><li>可以使用call方法调用，但箭头函数this不能被改变</li><li>箭头函数不能作为构造实例化对象</li><li>不能使用arguments变量</li><li>箭头函数简写 <ul><li>省略小括号，当形参有且只有一个式可以省略 <code>let fn = n =&gt;{return n+n}</code></li><li>省略花括号，当代码体只有一条语句 <code>let fn =(n) =&gt; n*n</code></li></ul></li><li>箭头函数适合与this无关的回调</li><li>箭头函数不适合与this有关的回调，比如事件回调，对象方法</li></ol><h2 id="_7-函数参数默认值" tabindex="-1"><a class="header-anchor" href="#_7-函数参数默认值" aria-hidden="true">#</a> 7 函数参数默认值</h2><ol><li>形参初始值，具有默认值的参数一般位置要靠后 <code>function add(a,b,c=10){}</code>，放在前面会导致后面的没有默认值的形参在实参个数&lt;形参个数的时候接收不到实参</li><li>与解构赋值结合</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">{</span>host<span class="token operator">=</span><span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">,</span>port<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>
<span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">username</span><span class="token operator">:</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">password</span><span class="token operator">:</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span><span class="token number">3306</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-扩展运算符" tabindex="-1"><a class="header-anchor" href="#_8-扩展运算符" aria-hidden="true">#</a> 8 扩展运算符</h2><ol><li><code>...</code>扩展运算符能将数组转换为逗号分割的参数序列</li><li>运用于数组的合并</li><li>运用于数组的克隆，拷贝的内容有引用数据的话是浅拷贝</li><li>将伪数组转为真正的数组</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> front <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> end <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;4&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> total <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>front<span class="token punctuation">,</span><span class="token operator">...</span>end<span class="token punctuation">]</span>
<span class="token keyword">const</span> copy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>total<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-symbol数据类型" tabindex="-1"><a class="header-anchor" href="#_9-symbol数据类型" aria-hidden="true">#</a> 9 Symbol数据类型</h2><ol><li>ES6引入了一种新的原始数据类型Symbol，来表示独一无二的值</li><li>特点 <ol><li>Symbol的值是唯一的，用来解决命名冲突的问题</li><li>Symbol值不能与其他数据进行运算</li><li>Symbol定义的对象属性不能使用for...in循环遍历，但可以使用Reflect.ownKeys来获取对象的所有键名</li></ol></li><li>创建Symbol</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> s3 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span>
<span class="token comment">//s2 != s3</span>
<span class="token keyword">let</span> s4 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> s5 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span>
<span class="token comment">//s4 === s5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>运用向对象添加方法，安全且快速，不会破坏原有属性</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> game <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">//此处省略很多，不确定是否有想要添加的同名方法</span>
    <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;up&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> methods <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">up</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">down</span><span class="token operator">:</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
game<span class="token punctuation">[</span>methods<span class="token punctuation">.</span>up<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
game<span class="token punctuation">[</span>methods<span class="token punctuation">.</span>down<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>Symbol内置值：控制对象在特定场景下的属性</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//hasInstance</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>hasInstance<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token parameter">param</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出o的内容：{}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出前面你return的内容：true</span>

<span class="token comment">//isConcatSpreadable</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//输出[1,2,3,4,5,6]</span>
arr2<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>isConcatSpreadable<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//输出[1,2,3,[4,5,6]]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-模块化" tabindex="-1"><a class="header-anchor" href="#_10-模块化" aria-hidden="true">#</a> 10 模块化</h2><p>支持export、import</p><h2 id="_11-promise" tabindex="-1"><a class="header-anchor" href="#_11-promise" aria-hidden="true">#</a> 11 promise</h2><p>异步编程解决方案，链式调用，避免使用callback出现的回调地狱</p><h2 id="_12-迭代器" tabindex="-1"><a class="header-anchor" href="#_12-迭代器" aria-hidden="true">#</a> 12 迭代器</h2><ol><li>迭代器（Iterator）是一种接口，任何数据结构只要部署Iterator接口就可以完成遍历操作</li><li>for of 循环，Iterator接口主要供for of消费</li><li>原生具备Iterator接口的数据结构：Array、Arguments、Set、Map、String、TypedArray、NodeList</li></ol><h3 id="_12-1-for-of使用" tabindex="-1"><a class="header-anchor" href="#_12-1-for-of使用" aria-hidden="true">#</a> 12.1 for of使用</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;一号&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;三号&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;二号&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">of</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token comment">//输出&#39;一号&#39; &#39;三号&#39; &#39;二号&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-2-工作原理" tabindex="-1"><a class="header-anchor" href="#_12-2-工作原理" aria-hidden="true">#</a> 12.2 工作原理</h3><ol><li>创建一个指针对象，指向当前数据结构的起始位置；</li><li>第一次调用对象的 next 方法，指针自动指向数据结构的第一个成员；</li><li>接下来不断调用 next 方法，指针一直往后移动，直到指向最后一个成员；</li><li>每调用 next 方法返回一个包含 value 和 done 属性的对象；</li></ol><h1 id="es7-2016" tabindex="-1"><a class="header-anchor" href="#es7-2016" aria-hidden="true">#</a> ES7（2016）</h1><h2 id="_1-array-prototype-includes" tabindex="-1"><a class="header-anchor" href="#_1-array-prototype-includes" aria-hidden="true">#</a> 1 Array.prototype.includes()</h2><p>判断一个数组是否包含一个指定的值，如果包含则返回 true，否则返回false</p><h2 id="_2-指数运算符" tabindex="-1"><a class="header-anchor" href="#_2-指数运算符" aria-hidden="true">#</a> 2 指数运算符 **</h2><p>a ** b 与 Math.pow(a, b)相同</p><h1 id="es8-2017" tabindex="-1"><a class="header-anchor" href="#es8-2017" aria-hidden="true">#</a> ES8 (2017)</h1><h2 id="_1-async-await" tabindex="-1"><a class="header-anchor" href="#_1-async-await" aria-hidden="true">#</a> 1 async/await</h2><p>promise的同步写法</p><h2 id="_2-object-values" tabindex="-1"><a class="header-anchor" href="#_2-object-values" aria-hidden="true">#</a> 2 Object.values()</h2><p>遍历对象的值</p><h2 id="_3-object-entries" tabindex="-1"><a class="header-anchor" href="#_3-object-entries" aria-hidden="true">#</a> 3 Object.entries()</h2><p>返回一个给定对象自身可枚举属性的键值对的数组</p><h2 id="_4-string-padding" tabindex="-1"><a class="header-anchor" href="#_4-string-padding" aria-hidden="true">#</a> 4 String padding</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// padStart</span>
<span class="token string">&#39;hello&#39;</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;     hello&quot;</span>
<span class="token comment">// padEnd</span>
<span class="token string">&#39;hello&#39;</span><span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">//&quot;hello     &quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-函数参数列表结尾允许逗号" tabindex="-1"><a class="header-anchor" href="#_5-函数参数列表结尾允许逗号" aria-hidden="true">#</a> 5 函数参数列表结尾允许逗号</h2><h2 id="_6-object-getownpropertydescriptors" tabindex="-1"><a class="header-anchor" href="#_6-object-getownpropertydescriptors" aria-hidden="true">#</a> 6 Object.getOwnPropertyDescriptors()</h2><p>获取一个对象的所有自身属性的描述符,如果没有任何自身属性，则返回空对象</p><h1 id="es9-2018" tabindex="-1"><a class="header-anchor" href="#es9-2018" aria-hidden="true">#</a> ES9（2018）</h1><h2 id="_1-异步迭代" tabindex="-1"><a class="header-anchor" href="#_1-异步迭代" aria-hidden="true">#</a> 1 异步迭代</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//在同步循环中调用异步函数，不会正常运行</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> array<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token keyword">do</span> <span class="token function">Something</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//异步迭代器，支持以串行的方式执行异步操作</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">doSomething</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-promise-finally" tabindex="-1"><a class="header-anchor" href="#_2-promise-finally" aria-hidden="true">#</a> 2 Promise.finally()</h2><p>无论Promise运行成功还是失败，最后都能运行相同的代码</p><h2 id="_3-rest参数" tabindex="-1"><a class="header-anchor" href="#_3-rest参数" aria-hidden="true">#</a> 3 rest参数</h2><ol><li>ES5中获取实参通过arguments，返回的是对象</li><li>使用rest参数，需要写形参，返回的是数组</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">date5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">date5</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;3&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">date6</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">date6</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;3&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>rest参数必须要放在形参的最后</li></ol><h1 id="es10-2019" tabindex="-1"><a class="header-anchor" href="#es10-2019" aria-hidden="true">#</a> ES10（2019）</h1><h2 id="_1-array的flat-方法和flatmap-方法" tabindex="-1"><a class="header-anchor" href="#_1-array的flat-方法和flatmap-方法" aria-hidden="true">#</a> 1 Array的flat()方法和flatMap()方法</h2><p>flat() 展开多重数组</p><p>flatMap() 首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。它与 map 和 深度值1的 flat 几乎相同，但效率稍高</p><p>本质上就是是归纳（reduce） 与 合并（concat）的操作</p><h2 id="_2-string的trimstart-方法和trimend-方法" tabindex="-1"><a class="header-anchor" href="#_2-string的trimstart-方法和trimend-方法" aria-hidden="true">#</a> 2 String的trimStart()方法和trimEnd()方法</h2><p>分别去除字符串首尾空白字符</p><h1 id="es11-2020" tabindex="-1"><a class="header-anchor" href="#es11-2020" aria-hidden="true">#</a> ES11（2020）</h1><h2 id="_1-nullish-coalescing-operator-空值处理" tabindex="-1"><a class="header-anchor" href="#_1-nullish-coalescing-operator-空值处理" aria-hidden="true">#</a> 1 Nullish coalescing Operator(空值处理)</h2><p>表达式在 ?? 的左侧 运算符求值为undefined或null，返回其右侧。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">u1</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token literal-property property">u2</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">u3</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token literal-property property">u4</span><span class="token operator">:</span> <span class="token keyword">undefined</span>
    <span class="token literal-property property">u5</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> u2 <span class="token operator">=</span> user<span class="token punctuation">.</span>u2 <span class="token operator">??</span> <span class="token string">&#39;用户2&#39;</span>  <span class="token comment">// false</span>
<span class="token keyword">let</span> u3 <span class="token operator">=</span> user<span class="token punctuation">.</span>u3 <span class="token operator">??</span> <span class="token string">&#39;用户3&#39;</span>  <span class="token comment">// 用户3</span>
<span class="token keyword">let</span> u4 <span class="token operator">=</span> user<span class="token punctuation">.</span>u4 <span class="token operator">??</span> <span class="token string">&#39;用户4&#39;</span>  <span class="token comment">// 用户4</span>
<span class="token keyword">let</span> u5 <span class="token operator">=</span> user<span class="token punctuation">.</span>u5 <span class="token operator">??</span> <span class="token string">&#39;用户5&#39;</span>  <span class="token comment">// &#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-optional-chaining-可选链" tabindex="-1"><a class="header-anchor" href="#_2-optional-chaining-可选链" aria-hidden="true">#</a> 2 Optional chaining（可选链）</h2><p>?. 用户检测不确定的中间节点</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">let</span> u1 <span class="token operator">=</span> user<span class="token punctuation">.</span>childer<span class="token punctuation">.</span>name <span class="token comment">// TypeError: Cannot read property &#39;name&#39; of undefined</span>
<span class="token keyword">let</span> u1 <span class="token operator">=</span> user<span class="token punctuation">.</span>childer<span class="token operator">?.</span>name <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-promise-allsettled" tabindex="-1"><a class="header-anchor" href="#_3-promise-allsettled" aria-hidden="true">#</a> 3 Promise.allSettled</h2><p>返回一个在所有给定的promise已被决议或被拒绝后决议的promise，并带有一个对象数组，每个对象表示对应的promise结果</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> promise1 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> promise2 <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> promise3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;我是失败的Promise_1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> promise4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;我是失败的Promise_2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> promiseList <span class="token operator">=</span> <span class="token punctuation">[</span>promise1<span class="token punctuation">,</span>promise2<span class="token punctuation">,</span>promise3<span class="token punctuation">,</span> promise4<span class="token punctuation">]</span>
Promise<span class="token punctuation">.</span><span class="token function">allSettled</span><span class="token punctuation">(</span>promiseList<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">values</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+t+`" alt="1721270140928" loading="lazy"></p><h2 id="_4-新的基本数据类型bigint" tabindex="-1"><a class="header-anchor" href="#_4-新的基本数据类型bigint" aria-hidden="true">#</a> 4 新的基本数据类型BigInt</h2><h2 id="_5-import" tabindex="-1"><a class="header-anchor" href="#_5-import" aria-hidden="true">#</a> 5 import()</h2><p>按需导入</p><h2 id="_6-globalthis" tabindex="-1"><a class="header-anchor" href="#_6-globalthis" aria-hidden="true">#</a> 6 globalThis</h2><ul><li>浏览器：window</li><li>worker：self</li><li>node：global</li></ul><h1 id="es12-2021" tabindex="-1"><a class="header-anchor" href="#es12-2021" aria-hidden="true">#</a> ES12（2021）</h1><h2 id="_1-replaceall" tabindex="-1"><a class="header-anchor" href="#_1-replaceall" aria-hidden="true">#</a> 1 replaceAll</h2><p>返回一个全新的字符串，所有符合匹配规则的字符都将被替换掉</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">;</span>
str<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&#39;l&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;heo word&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-promise-any" tabindex="-1"><a class="header-anchor" href="#_2-promise-any" aria-hidden="true">#</a> 2 Promise.any</h2><p>Promise.any() 接收一个Promise可迭代对象，只要其中的一个 promise 成功，就返回那个已经成功的 promise 。如果可迭代对象中没有一个 promise 成功（即所有的 promises 都失败/拒绝），就返回一个失败的 promise</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> promise1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;我是失败的Promise_1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;我是失败的Promise_2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> promiseList <span class="token operator">=</span> <span class="token punctuation">[</span>promise1<span class="token punctuation">,</span> promise2<span class="token punctuation">]</span><span class="token punctuation">;</span>
Promise<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span>promiseList<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">values</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+p+`" alt="1721270329198" loading="lazy"></p><h2 id="_3-weakrefs" tabindex="-1"><a class="header-anchor" href="#_3-weakrefs" aria-hidden="true">#</a> 3. WeakRefs</h2><p>使用WeakRefs的Class类创建对对象的弱引用(对对象的弱引用是指当该对象应该被GC回收时不会阻止GC的回收行为)</p><h2 id="_4-逻辑运算符和赋值表达式结合" tabindex="-1"><a class="header-anchor" href="#_4-逻辑运算符和赋值表达式结合" aria-hidden="true">#</a> 4. 逻辑运算符和赋值表达式结合</h2><p>逻辑运算符和赋值表达式，新特性结合了逻辑运算符（&amp;&amp;，||，??）和赋值表达式，JavaScript已存在的复合赋值运算符有：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>a <span class="token operator">||=</span> b
<span class="token comment">//等价于</span>
a <span class="token operator">=</span> a <span class="token operator">||</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> b<span class="token punctuation">)</span>

a <span class="token operator">&amp;&amp;=</span> b
<span class="token comment">//等价于</span>
a <span class="token operator">=</span> a <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> b<span class="token punctuation">)</span>

a <span class="token operator">??=</span> b
<span class="token comment">//等价于</span>
a <span class="token operator">=</span> a <span class="token operator">??</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> b<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-数字分隔符" tabindex="-1"><a class="header-anchor" href="#_5-数字分隔符" aria-hidden="true">#</a> 5. 数字分隔符</h2><p>数字分隔符，可以在数字之间创建可视化分隔符，通过_下划线来分割数字，使数字更具可读性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> money <span class="token operator">=</span> <span class="token number">1_000_000_000</span><span class="token punctuation">;</span>
<span class="token comment">//等价于</span>
<span class="token keyword">const</span> money <span class="token operator">=</span> <span class="token number">1000000000</span><span class="token punctuation">;</span>

<span class="token number">1_000_000_000</span> <span class="token operator">===</span> <span class="token number">1000000000</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="es13-2022" tabindex="-1"><a class="header-anchor" href="#es13-2022" aria-hidden="true">#</a> ES13(2022)</h1><h2 id="_1-top-level-await-顶级-await" tabindex="-1"><a class="header-anchor" href="#_1-top-level-await-顶级-await" aria-hidden="true">#</a> 1 Top-level Await（顶级 await）</h2><p>await外面不用包async</p><h2 id="_2-object-hasown" tabindex="-1"><a class="header-anchor" href="#_2-object-hasown" aria-hidden="true">#</a> 2 Object.hasOwn()</h2><p>比 <code>Object.hasOwnProperty.call(object, key)</code> 更简洁、更可靠的检查属性是否直接设置在对象上的方法</p><h2 id="_3-at" tabindex="-1"><a class="header-anchor" href="#_3-at" aria-hidden="true">#</a> 3 at()</h2><p>向所有基本可索引类（Array、String、TypedArray）添加 .at() 方法</p><h2 id="_4-类class" tabindex="-1"><a class="header-anchor" href="#_4-类class" aria-hidden="true">#</a> 4 类class</h2><h3 id="公共属性" tabindex="-1"><a class="header-anchor" href="#公共属性" aria-hidden="true">#</a> 公共属性</h3><p>不用写constructor直接写属性</p><h3 id="私有属性和方法" tabindex="-1"><a class="header-anchor" href="#私有属性和方法" aria-hidden="true">#</a> 私有属性和方法</h3><p>属性和方法前加 #</p><h1 id="es14-2023" tabindex="-1"><a class="header-anchor" href="#es14-2023" aria-hidden="true">#</a> ES14(2023)</h1><h2 id="_1-由后往前查找数组的方法-findlast-和-findlastindex" tabindex="-1"><a class="header-anchor" href="#_1-由后往前查找数组的方法-findlast-和-findlastindex" aria-hidden="true">#</a> 1 由后往前查找数组的方法：findLast() 和 findLastIndex()</h2><p><code>find()</code> 和 <code>findIndex</code> 会是从数组开头开始找寻符合条件的元素，而 <code>findLast()</code> 和 <code>findLastIndex()</code> 这两个新的数组方法是从数组的尾部开始查找元素</p><ul><li><code>findLast()</code> 方法返回该元素的值 / <code>undefined</code></li><li><code>findLastIndex()</code> 返回从尾部查找中符合条件的第一个元素的索引 / -1</li></ul><h2 id="_2-新增-4-个不改动原数组的操作方法" tabindex="-1"><a class="header-anchor" href="#_2-新增-4-个不改动原数组的操作方法" aria-hidden="true">#</a> 2 新增 4 个不改动原数组的操作方法</h2><p>ES2023 引入了四种新的数组操作方法，这些方法不会修改原始数组，而是会返回一个原始数组的拷贝。</p><ul><li><code>toReversed()</code>：将数组中的元素反转（相对应会改变数组的方法：<code>reverse()</code>）<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> numbers <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 反转数组</span>
<span class="token keyword">const</span> reversedNumbers <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">toReversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reversedNumbers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Output: [5, 4, 3, 2, 1]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><code>toSorted(fn)</code>：将数组中的元素排序（相对应会改变数组的方法：<code>sort()</code>）<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> numbers <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 将数组排序</span>
<span class="token keyword">const</span> sortedNumbers <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">toSorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sortedNumbers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Output: [1, 2, 3, 4, 5]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><code>toSpliced(start, deleteCount, ...items)</code>：从数组中指定位置开始删除指定数量的元素，并可选择在删除后新增新元素（相对应会改变数组的方法：<code>splice()</code>）<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> numbers <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 删除从数组中索引 2 开始两个元素 - 2 和 3，并在删除后新增 10 和 20</span>
<span class="token keyword">const</span> splicedNumbers <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">toSpliced</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>splicedNumbers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Output:  [1, 10, 20, 4, 5]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><code>with(index, value)</code>：将数组索引处的值，替换为新值<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fruits <span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;Apple&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Orange&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Lemon&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Mango&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Cherry&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 将 fruits 数组索引 2 的值 &quot;Lemon&quot; 替换为 10</span>
<span class="token keyword">const</span> newFruits <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&quot;Watermelon&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newFruits<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Output: [&#39;Apple&#39;, &#39;Orange&#39;, &#39;Watermelon&#39;, &#39;Mango&#39;, &#39;Cherry&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_3-hashbang-语法-hashbang-grammar" tabindex="-1"><a class="header-anchor" href="#_3-hashbang-语法-hashbang-grammar" aria-hidden="true">#</a> 3 Hashbang 语法（Hashbang Grammar）</h2><p>Hashbang 注释是一种特殊的注释语法，它会以 <code>#!</code> 开头，后面仅跟着解释器(interpreter) 的路径，并且只会在脚本或是模组的最开始有效。以下方代码为例，这段代码是告诉系统，用 Node.js 来执行文件：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token hashbang comment">#!/usr/bin/env node</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-weakmap-新增支持-symbol-作为键名-key" tabindex="-1"><a class="header-anchor" href="#_4-weakmap-新增支持-symbol-作为键名-key" aria-hidden="true">#</a> 4 WeakMap 新增支持 Symbol 作为键名 (key)</h2><p>WeakMap 是一种与 Map 相似的资料结构，用于储存键值对（key-value pair）。两者的主要差别在于：</p><ul><li>Map 的键名可以是任何数据类型</li><li>ES2023 之前，WeakMap 的键名必须是对象; ES2023 允许 WeakMap 使用 Symbol 作为键名</li></ul><h1 id="es15-2024" tabindex="-1"><a class="header-anchor" href="#es15-2024" aria-hidden="true">#</a> ES15(2024)</h1><h2 id="_1-object-groupby、map-groupby" tabindex="-1"><a class="header-anchor" href="#_1-object-groupby、map-groupby" aria-hidden="true">#</a> 1 Object.groupBy、Map.groupBy</h2><p>分组（将lodash里的方法变为原生方法）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//Math.sign() 方法用于判断一个数的符号，即正负性</span>
Object<span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token parameter">x</span> <span class="token operator">=&gt;</span> Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-promise-withresolvers" tabindex="-1"><a class="header-anchor" href="#_2-promise-withresolvers" aria-hidden="true">#</a> 2 Promise.withResolvers</h2><p>把 Promise实例、resolve、reject 解构出来供我们使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> promise<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject <span class="token punctuation">}</span> <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">withResolvers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_3-string-prototype-iswellformed、string-prototype-towellformed" tabindex="-1"><a class="header-anchor" href="#_3-string-prototype-iswellformed、string-prototype-towellformed" aria-hidden="true">#</a> 3 String.prototype.isWellFormed、String.prototype.toWellFormed</h2><p>JavaScript 中的字符串是 <code>UTF-16</code>编码的</p><p><code>isWellFormed()</code> 测试一个字符串是否是格式正确的</p><p><code>toWellFormed()</code>将字符串转换为格式正确的字符串</p><h2 id="_4-atomics-waitasync" tabindex="-1"><a class="header-anchor" href="#_4-atomics-waitasync" aria-hidden="true">#</a> 4 Atomics.waitAsync()</h2><h2 id="_5-正则表达式-v-标识" tabindex="-1"><a class="header-anchor" href="#_5-正则表达式-v-标识" aria-hidden="true">#</a> 5 正则表达式 /v 标识</h2><p>在 JavaScript 中，使用 &quot;u&quot; 标志的正则表达式进入 Unicode 模式，它扩展了正则表达式的处理能力以包含 Unicode 序列，而非仅限于 ASCII 字符集</p><p>RegExp v 标志是 u 标志的超集，并提供了另外两个功能：</p><ul><li>字符串的 Unicode 属性：通过 Unicode 属性转义，可以使用字符串的属性。</li><li>设置符号：允许在字符类之间进行集合操作。</li></ul>`,144),i=[c];function l(r,u){return s(),a("div",null,i)}const m=n(o,[["render",l],["__file","02ES6.html.vue"]]);export{m as default};
