import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as l,c as e,f as a}from"./app-0mkQjek1.js";const n={},o=a(`<h1 id="web-api" tabindex="-1"><a class="header-anchor" href="#web-api" aria-hidden="true">#</a> Web Api</h1><h2 id="_1-dom" tabindex="-1"><a class="header-anchor" href="#_1-dom" aria-hidden="true">#</a> 1 DOM</h2><h3 id="_1-1-dom相关概念" tabindex="-1"><a class="header-anchor" href="#_1-1-dom相关概念" aria-hidden="true">#</a> 1.1 DOM相关概念</h3><ol><li>DOM:文档对象模型（Document Object Model），是W3C组织推荐的处理可扩展标记语言的标准编程接口</li><li>DOM树： <ol><li>文档：一个界面就是一个文档，document</li><li>元素：页面内的标签，element</li><li>节点：网页中所有内容，node</li><li>DOM将以上元素都看作对象</li></ol></li></ol><h3 id="_1-2-获取元素" tabindex="-1"><a class="header-anchor" href="#_1-2-获取元素" aria-hidden="true">#</a> 1.2 获取元素</h3><h4 id="_1-2-1-根据id获取" tabindex="-1"><a class="header-anchor" href="#_1-2-1-根据id获取" aria-hidden="true">#</a> 1.2.1 根据ID获取</h4><ol><li>语法 <code>getElementById(id)</code></li><li>id是一个大小写敏感的字符串</li><li>返回匹配ID 的element对象</li><li>找不到则返回null</li></ol><h4 id="_1-2-2-根据标签名获取" tabindex="-1"><a class="header-anchor" href="#_1-2-2-根据标签名获取" aria-hidden="true">#</a> 1.2.2 根据标签名获取</h4><ol><li>语法 <code>getElementsByTagName(标签名)</code></li><li>标签名要求输入大小写敏感字符串</li><li>返回获取元素对象的集合，以伪数组形式存储</li><li>得到的元素对象是动态的</li><li>找不到返回空的伪数组</li><li>可以通过指定父元素查询特定父元素内的标签元素</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> ol <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;ol&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ol<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-3-根据类选择器获取" tabindex="-1"><a class="header-anchor" href="#_1-2-3-根据类选择器获取" aria-hidden="true">#</a> 1.2.3 根据类选择器获取</h4><ol><li>HTML5才支持</li><li>语法 <code>getElementsByClassName(类名)</code></li><li>类名要求输入大小写敏感字符串</li><li>返回获取元素对象的集合，以伪数组形式存储</li></ol><h4 id="_1-2-4-根据选择器直接获取第一个" tabindex="-1"><a class="header-anchor" href="#_1-2-4-根据选择器直接获取第一个" aria-hidden="true">#</a> 1.2.4 根据选择器直接获取第一个</h4><ol><li>HTML5才支持</li><li>语法 <code>querySelector(选择器名)</code></li><li>返回指定选择器的第一个元素对象</li><li>选择器名要求输入大小写敏感字符串，需要加符号表明选择器类型</li></ol><h4 id="_1-2-5-根据选择器直接获取全部" tabindex="-1"><a class="header-anchor" href="#_1-2-5-根据选择器直接获取全部" aria-hidden="true">#</a> 1.2.5 根据选择器直接获取全部</h4><ol><li>HTML5才支持</li><li>语法 <code>querySelectorAll(选择器名)</code></li><li>返回指定选择器的所有元素对象</li><li>选择器名要求输入大小写敏感字符串，需要加符号表明选择器类型</li></ol><h4 id="_1-2-6-获取body和html元素" tabindex="-1"><a class="header-anchor" href="#_1-2-6-获取body和html元素" aria-hidden="true">#</a> 1.2.6 获取body和html元素</h4><ol><li><code>document.body</code>获取body标签</li><li><code>document.documentElement</code>获取html标签</li></ol><h3 id="_1-3-事件基础" tabindex="-1"><a class="header-anchor" href="#_1-3-事件基础" aria-hidden="true">#</a> 1.3 事件基础</h3><ol><li>事件：一种被JavaScript侦测到的行为</li><li>事件由三部分组成：事件源；事件类型；事件处理程序</li></ol><h4 id="_1-3-1-事件三要素" tabindex="-1"><a class="header-anchor" href="#_1-3-1-事件三要素" aria-hidden="true">#</a> 1.3.1 事件三要素</h4><ol><li>事件源：事件被触发的对象</li><li>事件类型：如何被触发</li><li>事件处理程序：通过一个函数赋值的方式完成</li><li>例子</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;btn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;弹出对话框&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-3-2-执行事件的步骤" tabindex="-1"><a class="header-anchor" href="#_1-3-2-执行事件的步骤" aria-hidden="true">#</a> 1.3.2 执行事件的步骤</h4><ol><li>获取事件源 <code>var div = document.querySelector(&#39;div&#39;)</code></li><li>注册事件（绑定事件）<code>div.onclick</code></li><li>添加事件处理程序（采取函数赋值形式）<code>div.onclick = function(){}</code></li><li>常见鼠标事件 <img src="https://i.loli.net/2021/03/05/3Ku6IEfPV5Gg7M2.jpg" alt="常见鼠标事件.jpg" loading="lazy"></li><li>事件补充 <ul><li>onfocus获取焦点</li><li>onblur失去焦点</li></ul></li></ol><h3 id="_1-4-操作元素" tabindex="-1"><a class="header-anchor" href="#_1-4-操作元素" aria-hidden="true">#</a> 1.4 操作元素</h3><ol><li>可以不用事件直接使用元素</li></ol><h4 id="_1-4-1-修改元素内容" tabindex="-1"><a class="header-anchor" href="#_1-4-1-修改元素内容" aria-hidden="true">#</a> 1.4.1 修改元素内容</h4><ol><li>element.innerText <ul><li>语法 <code>DOM.innerText = 内容</code></li><li>不识别HTML标签，里面的标签会直接显示</li><li>可以获取元素的内容，会去除空格和换行</li></ul></li><li>element.innerHTML <ul><li>语法 <code>DOM.innerHTML = 内容</code></li><li>识别HTML标签</li><li>用的多，是W3C标准</li><li>可以获取元素内容，保留空格和换行</li></ul></li></ol><h4 id="_1-4-2-修改元素属性" tabindex="-1"><a class="header-anchor" href="#_1-4-2-修改元素属性" aria-hidden="true">#</a> 1.4.2 修改元素属性</h4><ol><li>语法 <code>DOM.属性 = 内容</code><ul><li>获取的是内置的属性值，元素本身自带的属性</li></ul></li><li>第二种得到元素属性的方法 <code>DOM.getAttribute(&#39;属性&#39;)</code><ul><li>可以获取自定义属性</li></ul></li><li>第二种更改元素属性值的方法 <code>DOM.setAttribute(&#39;属性&#39;,&#39;值&#39;)</code><ul><li>主要针对于自定义属性</li></ul></li><li>移除属性值 <code>DOM.removeAttribute(&#39;属性&#39;)</code></li><li>表单元素操纵 <ul><li>使用表单自己的属性改变里面的内容</li><li>改变表单值使用value属性</li><li>表单被禁用使用disabled属性</li></ul></li></ol><h4 id="_1-4-3-修改样式属性" tabindex="-1"><a class="header-anchor" href="#_1-4-3-修改样式属性" aria-hidden="true">#</a> 1.4.3 修改样式属性</h4><ol><li>element.style 行内样式操作 <ul><li>style里的属性采用驼峰命名法</li><li>产生的是行内样式，css权重比较高</li></ul></li><li>element.className 类名样式操作 <ul><li>将当前元素类名进行修改，是直接替换的</li><li>要添加新的类可以使用+=</li></ul></li></ol><h4 id="_1-4-4-h5自定义属性" tabindex="-1"><a class="header-anchor" href="#_1-4-4-h5自定义属性" aria-hidden="true">#</a> 1.4.4 H5自定义属性</h4><ol><li>规定自定义属性以data-开头并赋值</li><li>新增一种获取自定义属性方法 <code>DOM.dataset.data后面的属性名</code>或者 <code>DOM.dataset[data后面的属性名]</code></li><li>dataset是一个存放了所有以data开头自定义属性的集合</li><li>自定义属性中有多个-，获取的时候采取驼峰命名法</li></ol><h3 id="_1-5-节点操作" tabindex="-1"><a class="header-anchor" href="#_1-5-节点操作" aria-hidden="true">#</a> 1.5 节点操作</h3><ol><li>节点至少拥有nodeType节点类型、nodeName节点名称和nodeValue节点值这三个基本属性</li><li>nodeType <ul><li>元素节点为1</li><li>属性节点为2</li><li>文本节点为3（文本节点包含文字、空格、换行等）</li></ul></li></ol><h4 id="_1-5-1-节点层次" tabindex="-1"><a class="header-anchor" href="#_1-5-1-节点层次" aria-hidden="true">#</a> 1.5.1 节点层次</h4><ol><li>利用DOM树可以把节点划分为不同的层次关系</li><li>父级节点 <ul><li>语法 <code>DOM.parentNode</code></li><li>得到的是离元素最近的父级节点</li></ul></li><li>子节点 <ul><li>语法 <code>DOM.childNodes</code></li><li>得到的子节点集合，包含元素节点、文本节点等</li><li>要获得里面的元素节点需要专门处理</li><li>子元素节点语法 <code>DOM.children</code>，不是标准方法</li><li>获取第一个子节点 <code>DOM.firstChild</code></li><li>获取最后一个子节点 <code>DOM.lastChild</code></li><li>获取第一个子元素节点 <code>DOM.firstElementChild</code>IE9以上才支持</li><li>获取最后一个子元素节点 <code>DOM.lastElementChild</code>IE9以上才支持</li></ul></li><li>兄弟节点 <ul><li>语法 <code>DOM.nextSibling</code>，得到下一个兄弟节点，包括文本节点</li><li>语法 <code>DOM.previousSibling</code>，得到上一个兄弟节点，包括文本节点。找不到则返回null</li><li>语法 <code>DOM.nextElementSibling</code>，得到下一个元素兄弟节点，找不到则返回null，IE9以上才支持</li><li>语法 <code>DOM.previousElementSibling</code>，得到上一个元素兄弟节点，找不到则返回null，IE9以上才支持</li></ul></li></ol><h4 id="_1-5-2-创建节点" tabindex="-1"><a class="header-anchor" href="#_1-5-2-创建节点" aria-hidden="true">#</a> 1.5.2 创建节点</h4><ol><li><code>document.write(&#39;标签&#39;)</code><ul><li>文档执行完毕会导致页面全部重绘，会重新创建新的页面</li></ul></li><li><code>DOM.createElement(&#39;节点名&#39;)</code><ul><li>需要通过添加节点使用</li><li>创建新元素，效率高</li></ul></li><li><code>DOM.innerHTML = &#39;标签&#39;</code><ul><li>本质是拼接字符串，效率低</li><li>但如果使用数组拼接，效率最高</li></ul></li></ol><h4 id="_1-5-3-添加节点" tabindex="-1"><a class="header-anchor" href="#_1-5-3-添加节点" aria-hidden="true">#</a> 1.5.3 添加节点</h4><ol><li><code>DOM.appendChild(变量)</code>添加到父节点的子节点的末尾</li><li><code>DOM.insertBefore(变量,指定元素)</code>添加到父节点的指定子节点的前面</li></ol><h4 id="_1-5-4-删除节点" tabindex="-1"><a class="header-anchor" href="#_1-5-4-删除节点" aria-hidden="true">#</a> 1.5.4 删除节点</h4><ol><li><code>DOM.removeChild(子节点)</code>从DOM中删除子节点</li></ol><h4 id="_1-5-5-复制节点" tabindex="-1"><a class="header-anchor" href="#_1-5-5-复制节点" aria-hidden="true">#</a> 1.5.5 复制节点</h4><ol><li><code>DOM.cloneNode()</code>返回调用该方法节点的一个副本</li><li>需要通过添加节点使用</li><li>括号参数 <ul><li>空或者false，则是浅拷贝。只克隆复制节点本身，不克隆里面的子节点</li><li>true，则是深拷贝。隆复制节点本身和里面的子节点</li></ul></li></ol><h3 id="_1-6-高级事件" tabindex="-1"><a class="header-anchor" href="#_1-6-高级事件" aria-hidden="true">#</a> 1.6 高级事件</h3><h4 id="_1-6-1-注册事件" tabindex="-1"><a class="header-anchor" href="#_1-6-1-注册事件" aria-hidden="true">#</a> 1.6.1 注册事件</h4><h5 id="传统方式" tabindex="-1"><a class="header-anchor" href="#传统方式" aria-hidden="true">#</a> 传统方式</h5><ol><li>利用on开头的事件</li><li>特点：注册事件的唯一性</li><li>同一个元素同一个事件只能设置一个处理函数，最后注册的处理函数将会覆盖前面注册的处理函数</li></ol><h5 id="方法监听" tabindex="-1"><a class="header-anchor" href="#方法监听" aria-hidden="true">#</a> 方法监听</h5><ol><li>w3c标准 推荐方式</li><li><code>DOM.addEventListener(type,listener,[useCapture])</code>是一个方法</li><li>同一个元素同一个事件可以注册多个监听器</li><li>type：事件类型字符串，比如click、mouseover，注意不要带on</li><li>listener：事件处理函数，事件发生时，会调用该监听函数 <ul><li>如果是写调用函数的名字，不需要加()</li></ul></li><li>useCapture：可选参数，是一个布尔值，默认false</li></ol><h4 id="_1-6-2-删除事件" tabindex="-1"><a class="header-anchor" href="#_1-6-2-删除事件" aria-hidden="true">#</a> 1.6.2 删除事件</h4><h5 id="传统方式-1" tabindex="-1"><a class="header-anchor" href="#传统方式-1" aria-hidden="true">#</a> 传统方式</h5><ol><li><code>DOM.onclick = null;</code></li></ol><h5 id="方法监听-1" tabindex="-1"><a class="header-anchor" href="#方法监听-1" aria-hidden="true">#</a> 方法监听</h5><ol><li><code>DOM.removeEventListener(type,listener,[useCapture])</code></li></ol><h4 id="_1-6-3-dom事件流" tabindex="-1"><a class="header-anchor" href="#_1-6-3-dom事件流" aria-hidden="true">#</a> 1.6.3 DOM事件流</h4><ol><li>事件流描述的是从页面中接收事件的顺序</li><li>事件发生时会在元素节点之间按照特定的顺序传播，这个传播过程即DOM事件流</li><li>分成三个阶段：捕获阶段、当前目标阶段和冒泡阶段 <ul><li>捕获：由DOM最顶层节点开始，逐级向下传播到最具体的元素接收的过程</li><li>目标</li><li>冒泡：事件开始时由最具体的元素接收，然后逐层向上传播到DOM最顶层节点的过程</li></ul></li><li>JS代码只能执行捕获或者冒泡其中的一个阶段</li><li>onclick和attachEvent只能得到冒泡阶段</li><li>addEventListener(type,listener[ ,useCapture]) <ul><li>第三个参数如果是true，表示在事件捕获阶段调用事件处理程序</li><li>false表示在事件冒泡阶段调用事件处理</li></ul></li><li>有些事件是没有冒泡的，比如onblur、onfocus、onmouseenter、onmouseleave</li></ol><h4 id="_1-6-4-事件对象" tabindex="-1"><a class="header-anchor" href="#_1-6-4-事件对象" aria-hidden="true">#</a> 1.6.4 事件对象</h4><ol><li>event就是一个事件对象，写在侦听函数的小括号里，当作形参来看待</li><li>事件对象只有有了事件才会存在，是系统给我们自动创建的，不需要传递参数</li><li>事件对象是事件的一系列相关数据的集合</li><li>事件对象可以自己命名</li><li>事件对象也有兼容性问题，ie678要使用window.event</li><li>常见属性方法 <ul><li>e.target：返回触发事件的对象（标准） PS：this是绑定事件的对象，和这个有区别</li><li>e.scrElement：返回触发事件的对象（ie678）</li><li>e.type：返回事件的类型，不带on</li><li>e.cancelBubble：该属性阻止冒泡（非标准ie678）</li><li>e.returnValue：该属性阻止默认事件（非标准ie678）</li><li>e.preventDefault()：该方法阻止默认事件（标准）</li><li>e.stopPropagation()：阻止冒泡（标准）</li></ul></li></ol><h4 id="_1-6-5-事件委托" tabindex="-1"><a class="header-anchor" href="#_1-6-5-事件委托" aria-hidden="true">#</a> 1.6.5 事件委托</h4><ol><li>事件委托也称为事件代理，在jQuery里面称为事件委派</li><li>事件委托原理：不是每个自建店单独设置事件监听器，而是事件监听器设置在其父节点上，然后利用冒泡原理影响设置每个子节点</li><li>事件委托的作用：只操作一次DOM，提高了程序的性能</li></ol><h4 id="_1-6-6-鼠标事件对象" tabindex="-1"><a class="header-anchor" href="#_1-6-6-鼠标事件对象" aria-hidden="true">#</a> 1.6.6 鼠标事件对象</h4><ol><li>e.clientX：返回鼠标相对于浏览器窗口可视区的X坐标</li><li>e.clientY：返回鼠标相对于浏览器窗口可视区的Y坐标</li><li>e.pageX：返回鼠标相对于文档页面的X坐标（ie9+支持）</li><li>e.pageY：返回鼠标相对于文档页面的Y坐标（ie9+支持）</li><li>e.screenX：返回鼠标相对于电脑屏幕的X坐标</li><li>e.screenY：返回鼠标相对于电脑屏幕的Y坐标</li></ol><h4 id="_1-6-7-常用键盘事件" tabindex="-1"><a class="header-anchor" href="#_1-6-7-常用键盘事件" aria-hidden="true">#</a> 1.6.7 常用键盘事件</h4><ol><li>DOM.onkeyup：某个键盘按键被松开时触发，不区分大小写</li><li>DOM.onkeydown：某个键盘按键被按下时触发，不区分大小写</li><li>DOM.onkeypress：耨个键盘按键被按下时触发（不能识别功能键），区分大小写</li><li>三个事件的执行顺序，先执行down再执行press最后执行up</li></ol><h4 id="_1-6-8-键盘事件对象" tabindex="-1"><a class="header-anchor" href="#_1-6-8-键盘事件对象" aria-hidden="true">#</a> 1.6.8 键盘事件对象</h4><ol><li>e.keyCode：返回按键对应的ASCII码值，不区分大小写时是输出大写的ASCII码</li></ol><h2 id="_2-bom" tabindex="-1"><a class="header-anchor" href="#_2-bom" aria-hidden="true">#</a> 2 BOM</h2><h3 id="_2-1-bom相关概念" tabindex="-1"><a class="header-anchor" href="#_2-1-bom相关概念" aria-hidden="true">#</a> 2.1 BOM相关概念</h3><ol><li>BOM（Browser Object Model）浏览器对象模型，它提供了独立于内容而与浏览器进行交互的对象，其核心对象是window</li><li>BOM由一系列对象构成，并且每个对象都提供了很多方法与属性</li><li>BOM缺乏标准，JavaScript语法的标准化祖师是ECMA，DOM的标准化组织是W3C，BOM最初是Netscape浏览器标准的一部分</li></ol><h4 id="_2-1-1-bom的构成" tabindex="-1"><a class="header-anchor" href="#_2-1-1-bom的构成" aria-hidden="true">#</a> 2.1.1 BOM的构成</h4><ol><li>BOM比DOM更大，包含DOM</li><li>window： <ul><li>document</li><li>location</li><li>navigation</li><li>screen</li><li>history</li></ul></li><li>window对象是浏览器的顶级对象，具有双重角色 <ul><li>是JS访问浏览器窗口的一个接口</li><li>是一个全局对象，定义在全局作用域中的变量、函数都会变成window对象的属性和方法。调用的时候可以省略window</li></ul></li></ol><h3 id="_2-2-window对象常见事件" tabindex="-1"><a class="header-anchor" href="#_2-2-window对象常见事件" aria-hidden="true">#</a> 2.2 window对象常见事件</h3><h4 id="_2-2-1-窗口加载事件" tabindex="-1"><a class="header-anchor" href="#_2-2-1-窗口加载事件" aria-hidden="true">#</a> 2.2.1 窗口加载事件</h4><ol><li>语法 <code>window.onload = function(){}</code>或者 <code>window.addEventListener(&quot;load&quot;,function(){})</code></li><li>window.onload是窗口加载事件，当文档内容完全加载完成才会触发该事件</li><li>有了window.onload就可以把JS代码写到页面元素的上方</li><li>window.onload传统注册事件方式只能写一次，如果有多个会以最后一个为准</li><li>如果使用addEventListener没有个数限值</li><li>有一个类似的事件 <code>document.addEventListener(&#39;DOMContentLoaded&#39;,function(){})</code>，仅当DOM加载完成，不包括样式表，图片，flash等，ie9以上才支持</li></ol><h4 id="_2-2-2-调整窗口大小事件" tabindex="-1"><a class="header-anchor" href="#_2-2-2-调整窗口大小事件" aria-hidden="true">#</a> 2.2.2 调整窗口大小事件</h4><ol><li>语法 <code>window.onresize = function(){}</code>或者 <code>window.addEventListener(&quot;resize&quot;,function(){})</code></li><li>window.onresize是调整窗口大小加载事件</li><li>只要窗口大小发生像素变化，就会触发这个事件</li><li>经常利用这个事件完成响应式布局。window.innerWidth属性对应当前屏幕的宽度</li></ol><h3 id="_2-3-定时器" tabindex="-1"><a class="header-anchor" href="#_2-3-定时器" aria-hidden="true">#</a> 2.3 定时器</h3><h4 id="_2-3-1-两种定时器" tabindex="-1"><a class="header-anchor" href="#_2-3-1-两种定时器" aria-hidden="true">#</a> 2.3.1 两种定时器</h4><ol><li>setTimeout()</li><li>setInterval()</li></ol><h4 id="_2-3-2-settimeout" tabindex="-1"><a class="header-anchor" href="#_2-3-2-settimeout" aria-hidden="true">#</a> 2.3.2 setTimeout()</h4><ol><li>语法 <code>window.setTimeout(调用函数,[延迟的毫秒数])</code></li><li>用于设置一个定时器，该定时器在定时器到期后执行调用函数</li><li>延时时间单位是毫秒，单位不用写。整体可以省略，默认是0</li><li>调用函数可以直接写函数，也可以写函数名，还可以写 <code>函数名()</code>但不推荐</li><li>页面中会存在很多定时器，需要给定时器加标识符</li><li>setTimeout里的调用函数也称为回调函数callback。这个函数需要等待事件，时间到了才去调用这个函数</li></ol><h4 id="_2-3-3-停止settimeout-定时器" tabindex="-1"><a class="header-anchor" href="#_2-3-3-停止settimeout-定时器" aria-hidden="true">#</a> 2.3.3 停止setTimeout()定时器</h4><ol><li>语法 <code>window.clearTimeout(timeout ID)</code></li><li>clearTimeout()方法取消了先前通过调用setTimeout()建立的定时器</li><li>window可以省略</li><li>括号里面的是定时器的标识符</li></ol><h4 id="_2-3-4-setinterval" tabindex="-1"><a class="header-anchor" href="#_2-3-4-setinterval" aria-hidden="true">#</a> 2.3.4 setInterval()</h4><ol><li>语法 <code>window.setInterval(调用函数,[间隔的毫秒数])</code></li><li>setInterval()方法重复调用一个函数，每隔一段时间就去调用一次回调函数</li></ol><h4 id="_2-3-5-停止setinterval-定时器" tabindex="-1"><a class="header-anchor" href="#_2-3-5-停止setinterval-定时器" aria-hidden="true">#</a> 2.3.5 停止setInterval()定时器</h4><ol><li>语法 <code>window.clearInterval(interval ID)</code></li><li>与停止setTimeout一致</li></ol><h4 id="_2-3-6-this指向" tabindex="-1"><a class="header-anchor" href="#_2-3-6-this指向" aria-hidden="true">#</a> 2.3.6 this指向</h4><ol><li>函数定义的时候无法确认，函数被调用的时候才能确定this指向谁，一般指向调用它的对象</li><li>全局作用域或者普通函数中this指向全局对象window</li><li>定时器里面的this指向window</li><li>在方法中this指向方法</li><li>构造函数中this指向构造函数的实例</li></ol><h3 id="_2-4-js执行队列" tabindex="-1"><a class="header-anchor" href="#_2-4-js执行队列" aria-hidden="true">#</a> 2.4 JS执行队列</h3><h4 id="_2-4-1-js是单线程" tabindex="-1"><a class="header-anchor" href="#_2-4-1-js是单线程" aria-hidden="true">#</a> 2.4.1 JS是单线程</h4><ol><li>JavaScript语言的一大特点是单线程，就是同一个时间只能做一件事</li><li>是因为JavaScript是为了操作DOM，必须先添加再删除，所以必须是单线程</li><li>单线程意味着所有任务需要排队，带来的问题是JS执行时间过长，页面渲染不连贯，导致页面渲染加载阻塞的感觉</li></ol><h4 id="_2-4-2-同步和异步" tabindex="-1"><a class="header-anchor" href="#_2-4-2-同步和异步" aria-hidden="true">#</a> 2.4.2 同步和异步</h4><ol><li>为了解决JS执行过长渲染不连贯的问题，利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，JS出现同步和异步</li><li>同步：前一个任务结束后再执行后一个任务，程序的执行顺序与任务的排列顺序是一致的、同步的</li><li>异步：在做一件事的同时还可以处理其他的事情</li><li>JS把任务分成两种 <ul><li>同步任务：同步任务都在主线程上执行，形成一个执行栈</li><li>异步任务：JS的异步任务是通过回调函数实现的</li><li>常见的异步任务 <ul><li>普通事件，click、resize</li><li>资源加载，load、error</li><li>定时器，setInterval、setTimeout</li></ul></li><li>异步任务相关回调函数添加到任务队列中（任务队列也叫消息队列）</li></ul></li></ol><h4 id="_2-4-3-js执行机制" tabindex="-1"><a class="header-anchor" href="#_2-4-3-js执行机制" aria-hidden="true">#</a> 2.4.3 JS执行机制</h4><ol><li>先执行执行栈中的同步任务</li><li>遇到回调函数把异步任务放入任务队列中</li><li>一旦执行栈中的所有同步任务执行完毕，系统就会按次序速去任务队列中的异步任务，于是被读取的异步任务结束等待状态，进入执行栈，开始执行</li><li>事件循环(event loop)：由于主线程不断的重复获得任务、执行任务的机制</li></ol><h3 id="_2-5-location对象" tabindex="-1"><a class="header-anchor" href="#_2-5-location对象" aria-hidden="true">#</a> 2.5 location对象</h3><ol><li>window对象给我们提供了一个location属性用于获取或设置窗体的URL，并且可以用于解析URL</li><li>因为这个属性返回的是一个对象，所以将这个属性称为location对象</li></ol><h4 id="_2-5-1-url" tabindex="-1"><a class="header-anchor" href="#_2-5-1-url" aria-hidden="true">#</a> 2.5.1 URL</h4><ol><li>统一资源定位符是互联网上标准资源的地址</li><li>一般语法格式 <code>protocol://host[:port]/path/[?query]#fragment</code></li><li>protocol:通信协议 常用的http，ftp，maito等</li><li>host：主机(域名)</li><li>port：端口号，可选，省略时使用方案的默认端口</li><li>path：路径，由零活多个&#39;/&#39;符号隔开的字符串，一般用来表示主机上的一个目录或文件地址</li><li>query：参数，以键值对的相识，通过&amp;符号分隔开</li><li>fragment:片段，#后面内容常见于连接锚点</li></ol><h4 id="_2-5-2-location对象的属性" tabindex="-1"><a class="header-anchor" href="#_2-5-2-location对象的属性" aria-hidden="true">#</a> 2.5.2 location对象的属性</h4><p><img src="https://i.loli.net/2021/04/28/uHX4yLh3GMZF7qt.png" alt="location常见属性.png" loading="lazy"></p><h4 id="_2-5-3-location对象的方法" tabindex="-1"><a class="header-anchor" href="#_2-5-3-location对象的方法" aria-hidden="true">#</a> 2.5.3 location对象的方法</h4><p><img src="https://i.loli.net/2021/04/28/TJDAL6keQuSCXwy.png" alt="location常见方法.png" loading="lazy"></p><h3 id="_2-5-4-navigator对象" tabindex="-1"><a class="header-anchor" href="#_2-5-4-navigator对象" aria-hidden="true">#</a> 2.5.4 navigator对象</h3><ol><li>navigator对象包含浏览器的相关信息</li><li>navigator对象最常用的属性是userAgent，返回有客户机发送服务器的user-agent头部值</li></ol><h3 id="_2-5-5-history对象" tabindex="-1"><a class="header-anchor" href="#_2-5-5-history对象" aria-hidden="true">#</a> 2.5.5 history对象</h3><ol><li>window对象提供一个history对象，与浏览器历史记录进行交互。该对象包含用户（在浏览器窗口中）</li><li>back()：后退功能</li><li>forward()：前进功能</li><li>go(参数)：前进后退功能。参数是1前进1个页面，-1后退1个页面</li></ol><h2 id="_3-pc网页特效" tabindex="-1"><a class="header-anchor" href="#_3-pc网页特效" aria-hidden="true">#</a> 3 PC网页特效</h2><h3 id="_3-1-元素三大系列" tabindex="-1"><a class="header-anchor" href="#_3-1-元素三大系列" aria-hidden="true">#</a> 3.1 元素三大系列</h3><h4 id="_3-1-1-元素偏移量offset系列" tabindex="-1"><a class="header-anchor" href="#_3-1-1-元素偏移量offset系列" aria-hidden="true">#</a> 3.1.1 元素偏移量offset系列</h4><ol><li>使用offset系列相关属性可以动态地得到该元素的位置、大小</li><li>获得元素距离带有定位父元素的位置</li><li>获得元素自身的大小（宽度高度）</li><li>返回的数值不带单位</li></ol><h5 id="offsetleft与offsettop" tabindex="-1"><a class="header-anchor" href="#offsetleft与offsettop" aria-hidden="true">#</a> offsetLeft与offsetTop</h5><ol><li>各自返回元素相对于有定位父元素的上方、左边偏移量</li><li>如果没有定位的父元素，则以body为准</li></ol><h5 id="offsetwidth与offsetheight" tabindex="-1"><a class="header-anchor" href="#offsetwidth与offsetheight" aria-hidden="true">#</a> offsetWidth与offsetHeight</h5><ol><li>各自返回元素包括padding、边框、内容区的宽度、高度</li></ol><h5 id="offsetparent" tabindex="-1"><a class="header-anchor" href="#offsetparent" aria-hidden="true">#</a> offsetParent</h5><ol><li>返回该元素带有定位的父级元素</li><li>父级都没有定位则返回body</li></ol><h5 id="offset与style区别" tabindex="-1"><a class="header-anchor" href="#offset与style区别" aria-hidden="true">#</a> offset与style区别</h5><ol><li>offset <ul><li>可以得到任意样式表中的样式值</li><li>获得的数值没有段位</li><li>offsetWidth包含padding、border和width</li><li>只能读属性不能赋值</li><li>更合适获取元素大小位置</li></ul></li><li>style <ul><li>只能得到行内样式表中的样式值</li><li>获得带有单位的字符串</li><li>style.width不包含padding和border</li><li>可读写属性</li><li>更适合给元素赋值</li></ul></li></ol><h4 id="_3-1-2-元素可视区client系列" tabindex="-1"><a class="header-anchor" href="#_3-1-2-元素可视区client系列" aria-hidden="true">#</a> 3.1.2 元素可视区client系列</h4><ol><li>使用client系列的相关属性可以动态得到元素边框大小、元素大小等</li></ol><h5 id="clienttop与clientleft" tabindex="-1"><a class="header-anchor" href="#clienttop与clientleft" aria-hidden="true">#</a> clientTop与clientLeft</h5><ol><li>各自返回元素包括上边、左边边框大小</li></ol><h5 id="clientwidth与clienthight" tabindex="-1"><a class="header-anchor" href="#clientwidth与clienthight" aria-hidden="true">#</a> clientWidth与clientHight</h5><ol><li>各自返回元素包括padding、内容区的宽度、高度</li><li>与offset最大的区别就是不包含边框大小</li></ol><h4 id="_3-1-3-元素滚动scroll系列" tabindex="-1"><a class="header-anchor" href="#_3-1-3-元素滚动scroll系列" aria-hidden="true">#</a> 3.1.3 元素滚动scroll系列</h4><ol><li>使用scroll系列的相关属性可以动态地得到该元素的大小、滚动距离等</li><li>滚动条滚动会触发onscroll事件</li><li>页面的滚动距离使用 <code>window.pageXOffset</code>获得</li></ol><h5 id="scrolltop与scrollleft" tabindex="-1"><a class="header-anchor" href="#scrolltop与scrollleft" aria-hidden="true">#</a> scrollTop与scrollLeft</h5><ol><li>各自返回被卷去的上侧、左侧距离</li><li>返回数值不带单位</li></ol><h5 id="scrollwidth与scrollhight" tabindex="-1"><a class="header-anchor" href="#scrollwidth与scrollhight" aria-hidden="true">#</a> scrollWidth与scrollHight</h5><ol><li>各自返回自身实际宽度、高度，不含边框</li><li>返回数值不带单位</li><li>返回的是包含内容overflow的大小</li></ol><h4 id="_3-1-4-立即执行函数" tabindex="-1"><a class="header-anchor" href="#_3-1-4-立即执行函数" aria-hidden="true">#</a> 3.1.4 立即执行函数</h4><ol><li>不需要调用，立马能够自己执行的函数</li><li>语法1 <code>(function() {})()</code></li><li>语法2 <code>(function() {}())</code></li><li>立即执行函数最大的作用是独立创建了一个作用域</li><li>所有变量都是局部变量，不存在命名冲突</li></ol><h4 id="_3-1-5-moseenter和mouseover区别" tabindex="-1"><a class="header-anchor" href="#_3-1-5-moseenter和mouseover区别" aria-hidden="true">#</a> 3.1.5 moseenter和mouseover区别</h4><h5 id="mouseenter" tabindex="-1"><a class="header-anchor" href="#mouseenter" aria-hidden="true">#</a> mouseenter</h5><ol><li>当鼠标移动到元素上时会触发mouseenter事件</li><li>mouseenter只在经过自身盒子时触发</li><li>不会有冒泡的概念</li><li>搭配使用的是mouseleave，同样不会冒泡</li></ol><h5 id="mouseover" tabindex="-1"><a class="header-anchor" href="#mouseover" aria-hidden="true">#</a> mouseover</h5><ol><li>当鼠标移动到元素上时会触发mouseover事件</li><li>不仅经过自身盒子会触发，经过子盒子也会触发</li></ol><h3 id="_3-2-动画函数" tabindex="-1"><a class="header-anchor" href="#_3-2-动画函数" aria-hidden="true">#</a> 3.2 动画函数</h3><h4 id="_3-2-1-动画实现原理" tabindex="-1"><a class="header-anchor" href="#_3-2-1-动画实现原理" aria-hidden="true">#</a> 3.2.1 动画实现原理</h4><p>通过定时器setInterval()不断移动盒子位置</p><ol><li>获得盒子当前的位置</li><li>让盒子在当前位置上加移动距离</li><li>加一个结束定时器的条件</li><li>注意此元素需要添加定位，才能使用element.style.left</li></ol><h4 id="_3-2-2-动画函数简单封装" tabindex="-1"><a class="header-anchor" href="#_3-2-2-动画函数简单封装" aria-hidden="true">#</a> 3.2.2 动画函数简单封装</h4><ol><li>函数需要传递2个参数，动画对象和移动到的距离</li></ol><h4 id="_3-2-3-缓动动画" tabindex="-1"><a class="header-anchor" href="#_3-2-3-缓动动画" aria-hidden="true">#</a> 3.2.3 缓动动画</h4><ol><li>原理：让元素运动有所变化，最常见的是让速度慢慢停下</li><li>核心算法：每次移动步长=Math.ceil/floor((目标值-现在的位置)/10)</li></ol><h4 id="_3-2-4-动画函数添加回调函数" tabindex="-1"><a class="header-anchor" href="#_3-2-4-动画函数添加回调函数" aria-hidden="true">#</a> 3.2.4 动画函数添加回调函数</h4><ol><li>回调函数原理：函数作为一个参数。将这个函数作为参数传到另一个函数里面，当那个函数执行完之后，再执行传进去的这个函数，这个过程叫做回调</li><li>可以把函数当做一个参数输入另一个函数中</li></ol><h4 id="_3-2-5-动画函数封装" tabindex="-1"><a class="header-anchor" href="#_3-2-5-动画函数封装" aria-hidden="true">#</a> 3.2.5 动画函数封装</h4><ol><li>单独创建一个JS文件</li><li>把函数写在里面</li><li>在html中引入JS文件</li></ol>`,155),d=[o];function t(r,h){return l(),e("div",null,d)}const u=i(n,[["render",t],["__file","03Web Api.html.vue"]]);export{u as default};
