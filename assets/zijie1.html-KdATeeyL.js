import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as n,f as s}from"./app-0SoiKzJB.js";const o={},t=s(`<h1 id="字节一面" tabindex="-1"><a class="header-anchor" href="#字节一面" aria-hidden="true">#</a> 字节一面</h1><h2 id="_1-自我介绍" tabindex="-1"><a class="header-anchor" href="#_1-自我介绍" aria-hidden="true">#</a> 1 自我介绍</h2><h2 id="_2-青岛项目介绍" tabindex="-1"><a class="header-anchor" href="#_2-青岛项目介绍" aria-hidden="true">#</a> 2 青岛项目介绍</h2><p>具体内容、多少人参与项目、一共11个页面</p><h2 id="_3-登录过程" tabindex="-1"><a class="header-anchor" href="#_3-登录过程" aria-hidden="true">#</a> 3 登录过程</h2><ol><li><strong>用户输入凭证</strong> ：用户在登录页面输入用户名和密码。</li><li><strong>前端发送请求</strong> ：前端将用户凭证通过 HTTPS 请求发送到后端服务器。</li><li><strong>服务器验证凭证</strong> ：服务器接收请求后，验证用户的凭证是否正确（通常会查询数据库）。</li><li><strong>生成 Token</strong> ：验证通过后，服务器生成一个用于后续认证的 Token（如 JWT）。</li><li><strong>返回 Token</strong> ：服务器将生成的 Token 通过 HTTP 响应返回给客户端。</li><li><strong>存储 Token</strong> ：前端接收 Token 后，通常会将其存储在浏览器的 <code>localStorage</code>、<code>sessionStorage</code> 或者通过 <code>cookie</code> 方式存储。</li><li><strong>使用 Token 访问受保护资源</strong> ：在后续请求中，前端会将 Token 附加到请求头或 <code>cookie</code> 中发送到服务器，服务器验证 Token 的合法性后，允许访问受保护资源。</li></ol><h2 id="_4-token怎么传输的-是在哪里处理的-框架层吗" tabindex="-1"><a class="header-anchor" href="#_4-token怎么传输的-是在哪里处理的-框架层吗" aria-hidden="true">#</a> 4 token怎么传输的，是在哪里处理的，框架层吗</h2><ul><li><strong>传输方式</strong> ：Token 可以通过 <code>cookie</code>、HTTP 请求头（如 <code>Authorization</code>）等方式传输。</li><li><strong>处理位置</strong> ：在前端框架（如 React、Vue）的请求拦截器中，通常会统一处理 Token 的附加。后端在接收到请求后，会在中间件或控制器中处理 Token 的验证</li></ul><h2 id="_5-自学前端过程-是实验室推动还是先是自己兴趣触发" tabindex="-1"><a class="header-anchor" href="#_5-自学前端过程-是实验室推动还是先是自己兴趣触发" aria-hidden="true">#</a> 5 自学前端过程，是实验室推动还是先是自己兴趣触发</h2><h2 id="_6-说一下jwt" tabindex="-1"><a class="header-anchor" href="#_6-说一下jwt" aria-hidden="true">#</a> 6 说一下JWT</h2><p><strong>定义</strong> ：JWT 是一种开放标准，用于在各方之间以 JSON 格式传输信息。它是一种轻量级、安全的认证机制。只用存储在客户端</p><p><strong>结构</strong> ：JWT 包含三个部分：Header（头部），Payload（负载），Signature（签名）。</p><ul><li><strong>Header</strong> ：包含算法和类型信息。</li><li><strong>Payload</strong> ：包含声明（claims），即传递的数据。</li><li><strong>Signature</strong> ：用于验证消息的真实性和完整性。</li></ul><h2 id="_7-相对于cookie来做登录校验有什么好处" tabindex="-1"><a class="header-anchor" href="#_7-相对于cookie来做登录校验有什么好处" aria-hidden="true">#</a> 7 相对于cookie来做登录校验有什么好处</h2><ul><li><strong>无状态</strong> ：JWT 是无状态的，不需要在服务器端存储会话信息，因此更易于扩展。</li><li><strong>跨域支持</strong> ：JWT 可以通过 HTTP 请求头发送，更容易跨域使用，而不需要考虑跨域 cookie 的问题。</li><li><strong>安全性</strong> ：JWT 通过签名机制，确保数据的完整性和可信性，可以避免 CSRF 攻击。</li></ul><h2 id="_8-伪类和伪元素的区别-具体怎么用" tabindex="-1"><a class="header-anchor" href="#_8-伪类和伪元素的区别-具体怎么用" aria-hidden="true">#</a> 8 伪类和伪元素的区别，具体怎么用</h2><p><strong>伪类</strong> ：用于选择元素的某种特定状态，如 <code>:hover</code>、<code>:focus</code>、<code>:nth-child()</code> 等。</p><ul><li>示例：<code>a:hover { color: red; }</code> 会在用户鼠标悬停在链接上时改变其颜色。</li></ul><p><strong>伪元素</strong> ：用于创建和样式化文档中不存在的元素，如 <code>::before</code>、<code>::after</code>、<code>::first-line</code> 等。</p><ul><li>示例：<code>p::before { content: &#39;Prefix&#39;; }</code> 会在每个 <code>&lt;p&gt;</code> 元素的前面添加一个前缀</li></ul><h2 id="_9-怎么理解rem布局-什么场景下会使用-具体如何实现" tabindex="-1"><a class="header-anchor" href="#_9-怎么理解rem布局-什么场景下会使用-具体如何实现" aria-hidden="true">#</a> 9 怎么理解rem布局，什么场景下会使用，具体如何实现</h2><ul><li><strong>理解</strong> ：<code>rem</code> 是相对根元素（<code>&lt;html&gt;</code>）字体大小的单位，使用 <code>rem</code> 可以实现相对根元素的比例布局。</li><li><strong>使用场景</strong> ：在响应式设计中，使用 <code>rem</code> 可以让页面随着根元素的字体大小变化而自适应不同屏幕尺寸。</li><li><strong>实现</strong> ：通常会在 <code>&lt;html&gt;</code> 设置基准字体大小，如 <code>html { font-size: 16px; }</code>，或者把根节点字体设置为屏幕宽度的百分之多少，然后在元素中使用 <code>rem</code> 定义尺寸。</li></ul><h2 id="_10-bind、call、apply区别" tabindex="-1"><a class="header-anchor" href="#_10-bind、call、apply区别" aria-hidden="true">#</a> 10 bind、call、apply区别</h2><ul><li><strong><code>bind</code></strong> ：返回一个新函数，新的 <code>this</code> 绑定到指定对象。不会立即执行。</li><li><strong><code>call</code></strong> ：立即调用函数，<code>this</code> 绑定到指定对象，参数逐个传递。</li><li><strong><code>apply</code></strong> ：立即调用函数，<code>this</code> 绑定到指定对象，参数以数组形式传递。</li></ul><h2 id="_11-箭头函数的this指向" tabindex="-1"><a class="header-anchor" href="#_11-箭头函数的this指向" aria-hidden="true">#</a> 11 箭头函数的this指向</h2><p>指向上一级或window</p><h2 id="_12-箭头函数可以用其他方法改变this吗" tabindex="-1"><a class="header-anchor" href="#_12-箭头函数可以用其他方法改变this吗" aria-hidden="true">#</a> 12 箭头函数可以用其他方法改变this吗</h2><p>不能改变</p><h2 id="_13-如何用promise同时实现多个相互不依赖的请求、本地化的异步操作等" tabindex="-1"><a class="header-anchor" href="#_13-如何用promise同时实现多个相互不依赖的请求、本地化的异步操作等" aria-hidden="true">#</a> 13 如何用promise同时实现多个相互不依赖的请求、本地化的异步操作等</h2><ul><li><strong><code>Promise.all</code></strong> ：等待所有 Promise 都完成后返回结果数组，若有一个失败，则返回失败。</li><li><strong><code>Promise.any</code></strong> ：只要有一个 Promise 成功就返回这个结果，如果全部失败，返回一个 AggregateError。</li><li><strong><code>Promise.race</code></strong> ：只要有一个 Promise 完成或失败，返回该结果。</li><li><strong><code>Promise.allSettled</code></strong> ：等待所有 Promise 都完成后返回每个 Promise 的结果数组（包括成功和失败）。</li></ul><h2 id="_14-浏览器发送请求的方式有几种" tabindex="-1"><a class="header-anchor" href="#_14-浏览器发送请求的方式有几种" aria-hidden="true">#</a> 14 浏览器发送请求的方式有几种</h2><ul><li><strong><code>XMLHttpRequest</code></strong> ：早期的异步请求方式，支持复杂的配置和事件回调。</li><li><strong><code>Fetch API</code></strong> ：现代浏览器原生支持的异步请求方式，基于 Promise，更简洁易用。</li><li><strong><code>Axios</code></strong> ：基于 <code>XMLHttpRequest</code> 封装的库，提供了更友好的 API 和拦截器功能</li></ul><h2 id="_15-axios包是基于什么来做的" tabindex="-1"><a class="header-anchor" href="#_15-axios包是基于什么来做的" aria-hidden="true">#</a> 15 axios包是基于什么来做的</h2><p>XMLHttpRequest</p><h2 id="_16-发了一个请求-某一个接口回来之后告诉请求不需要再发了-如何中断这个请求" tabindex="-1"><a class="header-anchor" href="#_16-发了一个请求-某一个接口回来之后告诉请求不需要再发了-如何中断这个请求" aria-hidden="true">#</a> 16 发了一个请求，某一个接口回来之后告诉请求不需要再发了，如何中断这个请求</h2><p><strong>取消令牌</strong> ：使用 <code>axios.CancelToken</code> 可以创建一个取消令牌，发送请求时可以附带这个令牌，当需要中断请求时调用取消方法。</p><h2 id="_17-fetch如何发请求中断" tabindex="-1"><a class="header-anchor" href="#_17-fetch如何发请求中断" aria-hidden="true">#</a> 17 fetch如何发请求中断</h2><p><strong>AbortController</strong> ：使用 <code>AbortController</code> 可以创建一个中止控制器，将控制器的信号对象传递给 <code>fetch</code> 请求，当需要中止时调用 <code>abort</code> 方法。</p><h2 id="_18-比如发一个请求时间很长需要20s才返回-但给用户的时间为3s-否则就中断-用什么技术去实现" tabindex="-1"><a class="header-anchor" href="#_18-比如发一个请求时间很长需要20s才返回-但给用户的时间为3s-否则就中断-用什么技术去实现" aria-hidden="true">#</a> 18 比如发一个请求时间很长需要20s才返回，但给用户的时间为3s，否则就中断，用什么技术去实现</h2><ol><li>设置定时器，请求结果没有回来就报错</li><li>结合promise</li></ol><h2 id="_19-http缓存中强缓存如何理解-如何设置-协商缓存呢" tabindex="-1"><a class="header-anchor" href="#_19-http缓存中强缓存如何理解-如何设置-协商缓存呢" aria-hidden="true">#</a> 19 http缓存中强缓存如何理解，如何设置，协商缓存呢</h2><ul><li><strong>强缓存</strong> ：浏览器在请求资源时，会优先查看缓存中是否有有效期未过的资源（<code>Expires</code> 或 <code>Cache-Control</code>），若有则直接使用，不发起请求。</li><li><strong>协商缓存</strong> ：浏览器在请求资源时，会带上上次请求返回的验证标识（如 <code>Last-Modified</code> 或 <code>ETag</code>），服务器验证后决定是否返回 304 状态码以告知资源未修改，可以使用缓存。</li></ul><h2 id="_20-expires和cache-control的区别-为什么会存在两种版本-是为了解决什么问题" tabindex="-1"><a class="header-anchor" href="#_20-expires和cache-control的区别-为什么会存在两种版本-是为了解决什么问题" aria-hidden="true">#</a> 20 expires和cache-control的区别，为什么会存在两种版本，是为了解决什么问题</h2><ul><li><strong><code>Expires</code></strong> ：HTTP/1.0 的缓存机制，表示资源在指定时间前有效。缺点是依赖客户端时间，可能不准确。</li><li><strong><code>Cache-Control</code></strong> ：HTTP/1.1 的缓存机制，提供了更丰富的缓存控制选项，如 <code>max-age</code>、<code>no-cache</code>、<code>no-store</code> 等，解决了 <code>Expires</code> 的问题。</li></ul><h2 id="_21-协商缓存中etag存储的什么-协商缓存的具体流程" tabindex="-1"><a class="header-anchor" href="#_21-协商缓存中etag存储的什么-协商缓存的具体流程" aria-hidden="true">#</a> 21 协商缓存中etag存储的什么，协商缓存的具体流程</h2><p>etag存储文件的标识，传回的etag在和服务器端etag进行对比，若相同则返回304，客户端读取缓存，若不同则返回200和更新的数据</p><h2 id="_22-协商缓存etag和last-modified的区别" tabindex="-1"><a class="header-anchor" href="#_22-协商缓存etag和last-modified的区别" aria-hidden="true">#</a> 22 协商缓存ETag和Last-Modified的区别</h2><ul><li><strong><code>Last-Modified</code></strong> ：基于资源的最后修改时间来判断缓存是否有效，时间精度不高。</li><li><strong><code>ETag</code></strong> ：基于资源的唯一标识符（通常是哈希值）来判断缓存是否有效，精度更高。</li></ul><h2 id="_23-react中hooks的使用规范-只能在哪里使用" tabindex="-1"><a class="header-anchor" href="#_23-react中hooks的使用规范-只能在哪里使用" aria-hidden="true">#</a> 23 React中hooks的使用规范，只能在哪里使用</h2><p>只能在函数组件的顶层使用，不能在循环、条件语句或嵌套函数中使用。</p><h2 id="_24-为什么只能在函数组件顶层使用-原理是什么" tabindex="-1"><a class="header-anchor" href="#_24-为什么只能在函数组件顶层使用-原理是什么" aria-hidden="true">#</a> 24 为什么只能在函数组件顶层使用，原理是什么</h2><p>React 依赖于 Hooks 的调用顺序来正确管理状态，通过使用链表结构来存储和跟踪 Hooks，如果在条件语句中使用，会打乱顺序，导致状态管理错误。</p><h2 id="_25-如何理解react的fiber" tabindex="-1"><a class="header-anchor" href="#_25-如何理解react的fiber" aria-hidden="true">#</a> 25 如何理解react的fiber</h2><p>Fiber 是 React 16 中引入的协调引擎，它允许 React 中断渲染工作并优先处理更重要的更新，从而实现更流畅的用户体验。</p><ul><li>react16后，引入了 Fiber ，把渲染/更新过程拆分为一个个小块的任务，通过合理的调度机制来调控时间，指定任务执行的时机，从而降低页面卡顿的概率，提升页面交互体验。</li><li><strong>fiber tree（单向链表的树形结构）优势</strong> ：传统dom tree遍历子节点需要进行递归，会占用大量js调用栈。而是用fiber tree遍历链表，不用递归</li><li>好处：细粒度的任务调度能力=&gt;细化了任务的粒度=&gt;降低了任务阻塞的时长，对任务整体来说没有提速</li></ul><h2 id="_26-vue为什么没有用fiber-他的更新机制是什么" tabindex="-1"><a class="header-anchor" href="#_26-vue为什么没有用fiber-他的更新机制是什么" aria-hidden="true">#</a> 26 vue为什么没有用fiber，他的更新机制是什么</h2><ol><li>Vue 是基于 template 和 watcher 的组件级更新，把每个更新任务分割得足够小，不需要使用到 Fiber 架构，将任务进行更细粒度的拆分</li><li>React 是不管在哪里调用 setState，都是从根节点开始更新的，更新任务还是很大，需要使用到 Fiber 将大任务分割为多个小任务，可以中断和恢复，不阻塞主进程执行高优先级的任</li></ol><h2 id="_27-代码为什么需要构建" tabindex="-1"><a class="header-anchor" href="#_27-代码为什么需要构建" aria-hidden="true">#</a> 27 代码为什么需要构建</h2><ul><li><strong>优化性能</strong> ：通过代码构建可以合并、压缩、混淆代码，减少文件体积，优化加载速度。</li><li><strong>模块化管理</strong> ：代码构建工具支持模块化开发，自动处理依赖关系，并打包成适合生产环境的代码。</li><li><strong>跨浏览器兼容</strong> ：代码构建工具可以将 ES6+ 代码编译为兼容性更好的 ES5 代码，以适配不同浏览器。</li></ul><h2 id="_28-有哪几种模块化规范" tabindex="-1"><a class="header-anchor" href="#_28-有哪几种模块化规范" aria-hidden="true">#</a> 28 有哪几种模块化规范</h2><ul><li><strong>CommonJS</strong> ：主要用于 Node.js 环境，使用 <code>require</code> 引入模块和 <code>module.exports</code> 导出模块。</li><li><strong>ESModule</strong> ：JavaScript 的官方模块化规范，使用 <code>import</code> 引入模块和 <code>export</code> 导出模块，支持静态分析。</li><li><strong>AMD/RequireJS</strong> ：异步模块定义，主要用于浏览器端，模块加载采用异步方式。</li><li><strong>UMD</strong> ：通用模块定义，可以同时兼容 CommonJS、AMD 和全局变量模式。</li></ul><h2 id="_29-esmodule、commonjs有什么问题" tabindex="-1"><a class="header-anchor" href="#_29-esmodule、commonjs有什么问题" aria-hidden="true">#</a> 29 ESModule、CommonJS有什么问题</h2><p>ES Module是一种模块化规范，它是javaScript语言的官方模块化规范，它的主要特点是异步加载模块，模块输出的是一个值的引用，而不是拷贝。ES Module的优点是可以异步加载模块，支持静态分析，可以进行tree shaking等优化，缺点是老旧版本浏览器不兼容。</p><p>CommonJS是一种模块化规范，它是Node.js采用的模块化规范，它的主要特点是同步加载模块，模块输出的是一个值的拷贝，而不是引用。CommonJS的优点是简单易用，可以在服务器端和客户端使用，缺点是不能异步加载模块，因此在浏览器端使用时需要使用打包工具进行转换。</p><h2 id="_30-手撕" tabindex="-1"><a class="header-anchor" href="#_30-手撕" aria-hidden="true">#</a> 30 手撕</h2><p>递归实现1-100求和</p><p>题目：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解答：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>num1 <span class="token operator">&gt;</span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0</span>
  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> num1 <span class="token operator">+</span> <span class="token function">add</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> num2<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_31-反问" tabindex="-1"><a class="header-anchor" href="#_31-反问" aria-hidden="true">#</a> 31 反问</h2><p>技术栈</p><p>字节大部分用react+内部的类似于umi的框架，基于webpack、esbuild，前端nodejs，后端golang比较多</p>`,73),i=[t];function r(c,d){return a(),n("div",null,i)}const h=e(o,[["render",r],["__file","zijie1.html.vue"]]);export{h as default};
