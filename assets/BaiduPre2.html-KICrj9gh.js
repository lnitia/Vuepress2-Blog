import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as e,c as o,a as n,b as c,d as l,f as s}from"./app-0mkQjek1.js";const i={},u=s(`<h1 id="百度二面" tabindex="-1"><a class="header-anchor" href="#百度二面" aria-hidden="true">#</a> 百度二面</h1><h2 id="_1-为什么选择前端" tabindex="-1"><a class="header-anchor" href="#_1-为什么选择前端" aria-hidden="true">#</a> 1. 为什么选择前端</h2><h2 id="_2-讲讲你的毕业设计" tabindex="-1"><a class="header-anchor" href="#_2-讲讲你的毕业设计" aria-hidden="true">#</a> 2. 讲讲你的毕业设计</h2><h2 id="_3-本硕专业和编程有什么关系" tabindex="-1"><a class="header-anchor" href="#_3-本硕专业和编程有什么关系" aria-hidden="true">#</a> 3. 本硕专业和编程有什么关系</h2><h2 id="_4-怎么学的前端" tabindex="-1"><a class="header-anchor" href="#_4-怎么学的前端" aria-hidden="true">#</a> 4. 怎么学的前端</h2><h2 id="_5-看过什么书" tabindex="-1"><a class="header-anchor" href="#_5-看过什么书" aria-hidden="true">#</a> 5. 看过什么书</h2><h2 id="_6-研究方向主要研究啥" tabindex="-1"><a class="header-anchor" href="#_6-研究方向主要研究啥" aria-hidden="true">#</a> 6. 研究方向主要研究啥</h2><h2 id="_7-手撕-两数组合并排序-复杂度n" tabindex="-1"><a class="header-anchor" href="#_7-手撕-两数组合并排序-复杂度n" aria-hidden="true">#</a> 7. 手撕：两数组合并排序，复杂度n</h2><p>计数排序</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">countSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 计算出原始数组的最大最小值</span>
  <span class="token keyword">let</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
  <span class="token keyword">let</span> min <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      min <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 计算计数数组的容量</span>
  <span class="token keyword">const</span> countLen <span class="token operator">=</span> max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span>
  <span class="token keyword">let</span> countArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>countLen<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// 创建计数数组，并设置所有数的计数初始值为0</span>
  
  <span class="token comment">// 遍历初始数组，给对应下标(arr[j] - min)计数加1</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    countArr<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> min<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 结果队列</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token comment">// 遍历结果队列的指针</span>
  <span class="token keyword">let</span> resIndex <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> countLen<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果某数计数大于0，就循环取出值</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>countArr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 将此数放入结果队列中</span>
      res<span class="token punctuation">[</span>resIndex<span class="token punctuation">]</span> <span class="token operator">=</span> k <span class="token operator">+</span> min
      <span class="token comment">// 队列指针右移</span>
      resIndex<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token comment">// 计数减1</span>
      countArr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
<span class="token comment">//  使用console.time()和console.timeEnd()这一句语句，会输出中间程序执行的运行时间</span>
console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">544</span><span class="token punctuation">,</span><span class="token number">522</span><span class="token punctuation">,</span><span class="token number">522</span><span class="token punctuation">,</span><span class="token number">533</span><span class="token punctuation">,</span><span class="token number">511</span><span class="token punctuation">,</span><span class="token number">522</span><span class="token punctuation">,</span><span class="token number">551</span><span class="token punctuation">,</span><span class="token number">552</span><span class="token punctuation">,</span><span class="token number">553</span><span class="token punctuation">,</span><span class="token number">510</span><span class="token punctuation">,</span><span class="token number">557</span><span class="token punctuation">,</span><span class="token number">555</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">countSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;res:&#39;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 510, 511, 522, 522, 522, 533, 544, 551, 552, 553, 555, 557 ]</span>
console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// default: 4.135ms</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>桶排序</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">bucketSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> bucketNum <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">/</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> bucketArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>bucketNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>bucketNum<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        bucketArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">of</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">-</span>min<span class="token punctuation">)</span> <span class="token operator">/</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        bucketArr<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">of</span> bucketArr<span class="token punctuation">)</span><span class="token punctuation">{</span>
        i<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>bucketArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>bucketArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            arr<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> bucketArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">bucketSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-熟悉的数据结构" tabindex="-1"><a class="header-anchor" href="#_8-熟悉的数据结构" aria-hidden="true">#</a> 8. 熟悉的数据结构</h2><h2 id="_9-数组用什么数据结构存储" tabindex="-1"><a class="header-anchor" href="#_9-数组用什么数据结构存储" aria-hidden="true">#</a> 9. 数组用什么数据结构存储</h2><p><strong>数据结构的存储⽅式只有两种：数组（顺序存储）和链表（链式存储）</strong></p>`,15),r={href:"https://www.zhihu.com/tardis/zm/art/242509740?source_id=1005",target:"_blank",rel:"noopener noreferrer"},k=s('<h2 id="_10-项目里遇到的难点" tabindex="-1"><a class="header-anchor" href="#_10-项目里遇到的难点" aria-hidden="true">#</a> 10. 项目里遇到的难点</h2><h2 id="_11-canvas和svg和应用" tabindex="-1"><a class="header-anchor" href="#_11-canvas和svg和应用" aria-hidden="true">#</a> 11. canvas和svg和应用</h2><ol><li>canvas基于位图，依赖分辨率；svg基于矢量，不依赖分辨率</li><li>canvas由js绘制，svg由html标签绘制</li><li>canvas不支持事件处理，绘制后无法改变；svg支持，可通过获取html标签进行操作</li><li>canvas支持的颜色比svg多</li><li>canvas适用于大型游戏，场景变化多的；svg适合于需要放大缩小的，如地图</li></ol><h2 id="_12-怎么用canvas实现矢量图" tabindex="-1"><a class="header-anchor" href="#_12-怎么用canvas实现矢量图" aria-hidden="true">#</a> 12. 怎么用canvas实现矢量图</h2><ol><li>在canvas中通过绘制路径path方式使用矢量图（api绘制各个形状的路径+填充颜色）</li><li>使用svg矢量图作为canvas图像素材</li></ol><h2 id="_13-react和vue的相同与不同" tabindex="-1"><a class="header-anchor" href="#_13-react和vue的相同与不同" aria-hidden="true">#</a> 13. react和vue的相同与不同</h2><p>相同：1. 都是声明式编码；2. 都是组件式开发； 3. 都有生命周期函数； 4. 都是基于虚拟dom和diff算法； 5. 支持组件间通讯</p><p>不同：1. react单向数据流，vue双向绑定；2. 响应式原理不同；3. diff算法不同； 4. 写法不同，vue为template格式，react为jsx格式；</p><h2 id="_14-编程习惯更喜欢用哪个-为什么" tabindex="-1"><a class="header-anchor" href="#_14-编程习惯更喜欢用哪个-为什么" aria-hidden="true">#</a> 14. 编程习惯更喜欢用哪个，为什么</h2><ol><li>vue3&gt;vue2：组合式api让代码更加集中；响应式原理更加健壮（捕捉到对象的属性访问和修改操作）；性能优化（diff算法）</li><li>函数react&gt;类react：代码更加集中，增加的hook更加方便，router6之后官方推荐</li><li>react&gt;vue：vue封装很多api，指令，react相对更原生点，对js要求高，但是也更加灵活</li></ol><h2 id="_15-react出现代码逻辑分离怎么办" tabindex="-1"><a class="header-anchor" href="#_15-react出现代码逻辑分离怎么办" aria-hidden="true">#</a> 15. react出现代码逻辑分离怎么办</h2><ol><li>采用高阶函数或者render props进行公共逻辑抽离</li><li>采用函数组件而不是类组件</li></ol><h2 id="_17-自定义hook和自定义函数的区别" tabindex="-1"><a class="header-anchor" href="#_17-自定义hook和自定义函数的区别" aria-hidden="true">#</a> 17. 自定义hook和自定义函数的区别</h2><ol><li>自定义hook里可以使用hook，比如useState等，普通自定义函数不能</li><li>命名规范，自定义hook是useXXX，而普通函数没有限制</li><li>提取公共逻辑，代码复用，逻辑复用</li></ol>',14);function d(v,m){const a=t("ExternalLinkIcon");return e(),o("div",null,[u,n("p",null,[n("a",r,[c("数据结构之存储方式 (zhihu.com)"),l(a)])]),k])}const f=p(i,[["render",d],["__file","BaiduPre2.html.vue"]]);export{f as default};
