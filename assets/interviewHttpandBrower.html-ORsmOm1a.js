import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as t}from"./app-0SoiKzJB.js";const e={},p=t(`<h1 id="http、tcp、浏览器基础知识汇总" tabindex="-1"><a class="header-anchor" href="#http、tcp、浏览器基础知识汇总" aria-hidden="true">#</a> http、tcp、浏览器基础知识汇总</h1><h2 id="_1-http" tabindex="-1"><a class="header-anchor" href="#_1-http" aria-hidden="true">#</a> 1. HTTP</h2><p>HTTP（<strong>超⽂本传输协议</strong>）是⽤于从WWW服务器传输超⽂本到本地浏览器的传输协议。</p><p>HTTP客户端发起⼀个请求，建⽴⼀个到服务器指定端⼝（默认是80端⼝）的TCP（拓展三次握⼿四次挥⼿、七层架构）连接。</p><p>应用：获取旧数据，或者只想获取一次数据供应用程序使用。</p><h3 id="_1-1-http报文结构" tabindex="-1"><a class="header-anchor" href="#_1-1-http报文结构" aria-hidden="true">#</a> 1.1 <strong>HTTP报文结构</strong></h3><p>请求报文：请求行（GET /home HTTP/1.1）+请求头+空行+请求体</p><p>响应报文：响应行（HTTP/1.1 200 OK）+响应头+空行+响应体</p><h3 id="_1-2-http状态码" tabindex="-1"><a class="header-anchor" href="#_1-2-http状态码" aria-hidden="true">#</a> 1.2 HTTP状态码</h3><p>1xx：信息状态码，表示请求正在进行</p><p>2xx：请求成功200</p><p>3xx：客户端请求资源发生变动，需要用新的url请求，即重定向。301永久重定向，302临时重定向。</p><p>4xx：客户端发送的报文发生问题。400 bad request发送的报文有问题，403 forbidden 服务器禁止访问资源， 404 请求资源服务器找不到</p><p>5xx：服务器端出问题。500 服务器内部错误</p><h3 id="_1-3-http请求方式" tabindex="-1"><a class="header-anchor" href="#_1-3-http请求方式" aria-hidden="true">#</a> 1.3 HTTP请求方式</h3><p>head：获取资源元信息</p><p>option：查看服务器的性能，比如说服务器支持的请求方式</p><ul><li>非简单请求中，浏览器必须先使用<strong>OPTIONS请求进行一个预检请求</strong>（preflight request）来获取B服务<strong>是否允许跨域请求</strong>，服务进行确认之后，才会发起真正的HTTP请求。</li><li>在预检请求的返回中，<strong>服务器端也可以通知客户端，是否需要携带身份凭证</strong>（包括 Cookies 和 HTTP 认证相关数据）。</li></ul><p>connect：建立连接隧道，用于代理服务器</p><p>trace：追踪请求-响应的传输路径</p><p>get、post、put、delete</p><h3 id="_1-4-http处理大文件传输" tabindex="-1"><a class="header-anchor" href="#_1-4-http处理大文件传输" aria-hidden="true">#</a> 1.4 HTTP处理大文件传输</h3><ol><li><strong>范围请求(请求指定的部分)</strong> =&gt;实现视频快进，断点续传</li></ol><p>采取了 <strong>范围请求</strong> 的解决方案，允许客户端仅仅请求一个资源的一部分。</p><p><strong>请求头</strong>中加上字段<strong>Range：bytes=x-y</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 单段数据 </span>
<span class="token literal-property property">Range</span><span class="token operator">:</span> bytes<span class="token operator">=</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span> 
<span class="token comment">// 多段数据 </span>
<span class="token literal-property property">Range</span><span class="token operator">:</span> bytes<span class="token operator">=</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token operator">-</span><span class="token number">39</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>0-499表示从开始到第 499 个字节。</li><li>500- 表示从第 500 字节到文件终点。</li><li>-100表示文件的最后100个字节。</li></ul><ol start="2"><li><p><strong>数据压缩（缩小文件本身大小）</strong></p><p>文件格式压缩（无损（gif、png、webp）、有损（jpeg、webp））</p><p>端到端压缩（压缩算法gzip、br。浏览器发送 <code>Accept-Encoding</code> 首部，其中包含有它所支持的压缩算法，以及各自的优先级，服务器则从中选择一种，使用该算法对响应的消息主体进行压缩，并且发送 <code>Content-Encoding</code> 首部来告知浏览器它选择了哪一种算法）</p></li><li><p><strong>分块传输（把文件分成多个小块分批次传输）</strong></p><p>客户端请求带上<strong>Transfer-Encoding: chunked</strong>，服务器通过分块传输编码响应（每个分块包含两个部分，<strong>长度头和数据块</strong>，中间以回车换行分开）</p><ul><li>将需要上传的文件按照一定的分割规则，分割成相同大小的数据块；</li><li>初始化一个分片上传任务，返回本次分片上传唯一标识；</li><li>按照一定的策略（串行或并行）发送各个分片数据块；</li><li>发送完成后，服务端根据判断数据上传是否完整，如果完整，则进行数据块合成得到原始文件。</li></ul></li><li><p><strong>前端上传时对文件进行切片</strong></p><p>利用 <code> Blob.prototype.slice</code> 方法。文件的 slice 方法可以返回 <code>原文件的某个切片</code>。请求后端（服务端）时要带上<strong>分片序号和大小</strong></p><p>服务端创建conf文件用来记录分块位置，conf文件长度为总分片数，每上传一个分块即向conf文件中写入一个127，那么没上传的位置就是默认的0,已上传的就是Byte.MAX_VALUE 127（这步是实现断点续传和秒传的核心步骤）</p><p>服务器按照请求数据中给的分片序号和每片分块大小（分片大小是固定且一样的）算出开始位置，与读取到的文件片段数据，写入文件。</p><p>切片是否上传成功的判断可以在服务的处理也可以在前端保留已上传切片的信息。通过localStorage记录切片上传的信息或者每次在上传切片前向后台询问该切片是否已经上传。</p><p>文件的实时上传进度可以通过XMLHttpRequest的upload.onprogress去处理，也可以通过websocket去实时监听。</p><p>所有切片都上传成功时，发起合并请求，让所有的切片合并成一个大文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">createFileChunk</span><span class="token punctuation">(</span><span class="token parameter">file<span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token constant">SIZE</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token operator">+</span>     <span class="token keyword">const</span> fileChunkList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token operator">+</span>      <span class="token keyword">let</span> cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token operator">+</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">&lt;</span> file<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token operator">+</span>        fileChunkList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">index</span><span class="token operator">:</span> i<span class="token punctuation">,</span>
            <span class="token literal-property property">filename</span><span class="token operator">:</span> file<span class="token operator">?.</span>name<span class="token punctuation">,</span>
            <span class="token literal-property property">file</span><span class="token operator">:</span><span class="token function">sample</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">+</span>        cur <span class="token operator">+=</span> size<span class="token punctuation">;</span>
<span class="token operator">+</span>      <span class="token punctuation">}</span>
<span class="token operator">+</span>      <span class="token keyword">return</span> fileChunkList<span class="token punctuation">;</span>
<span class="token operator">+</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="_1-5-http表单数据提交" tabindex="-1"><a class="header-anchor" href="#_1-5-http表单数据提交" aria-hidden="true">#</a> 1.5 HTTP表单数据提交</h3><p>一般采用post请求，数据放在请求体中。</p><p><strong>编码类型content-type</strong></p><ol><li><strong>application/x-www-form-urlencoded</strong></li></ol><ul><li><p>其中的数据会被编码成以 &amp; 分隔的键值对</p></li><li><p>字符以URL编码方式编码。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 转换过程: {a: 1, b: 2} -&gt; a=1&amp;b=2 -&gt; 如下(最终形式)</span>
<span class="token string">&quot;a%3D1%26b%3D2&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol start="2"><li><strong>multipart/form-data（对于图片等文件的上传）</strong></li></ol><ul><li><p>每一个表单元素都是独立的资源表述。</p></li><li><p>请求头中的 Content-Type 字段会包含 boundary ，且 boundary 的值有浏览器默认指定。例: Content-Type: multipart/form-data;boundary=---- WebkitFormBoundaryRRJKeWfHPGrS4LKe 。</p></li><li><p>数据会分为多个部分，每两个部分之间通过分隔符来分隔，每部分表述均有 HTTP 头部描述子包体，如 Content-Type ，在最后的分隔符会加上 -- 表示结束。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Content<span class="token operator">-</span>Disposition<span class="token operator">:</span> form<span class="token operator">-</span>data<span class="token punctuation">;</span>name<span class="token operator">=</span><span class="token string">&quot;data1&quot;</span><span class="token punctuation">;</span>
Content<span class="token operator">-</span>Type<span class="token operator">:</span> text<span class="token operator">/</span>plain
data1
<span class="token operator">--</span><span class="token operator">--</span>WebkitFormBoundaryRRJKeWfHPGrS4LKe
Content<span class="token operator">-</span>Disposition<span class="token operator">:</span> form<span class="token operator">-</span>data<span class="token punctuation">;</span>name<span class="token operator">=</span><span class="token string">&quot;data2&quot;</span><span class="token punctuation">;</span>
Content<span class="token operator">-</span>Type<span class="token operator">:</span> text<span class="token operator">/</span>plain
data2
<span class="token operator">--</span><span class="token operator">--</span>WebkitFormBoundaryRRJKeWfHPGrS4LKe<span class="token operator">--</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_1-6-http代理" tabindex="-1"><a class="header-anchor" href="#_1-6-http代理" aria-hidden="true">#</a> 1.6 HTTP代理</h3><p>即代理服务器作用</p><ol><li>负载均衡：客户端的请求只会先到达代理服务器，代理服务器可以拿到这个请求之后，可以通过特定的算法分发给不同的源服务器，让各台源服务器的负载尽量平均。</li><li>保障安全：利用<strong>心跳机制</strong>监控后台的服务器，一旦发现故障机就将其踢出集群。对非法 IP 限流。</li><li>缓存代理：将内容缓存到代理服务器，使得客户端可以直接从代理服务器获得而不用到源服务器那里。</li></ol><p><strong>除了强缓存、协商缓存，为什么会有缓存代理？</strong></p><ul><li>现象：每次客户端缓存失效都要到源服务器获取，那给源服务器的压力是很大的。</li><li>解决方式：让代理服务器接管一部分的服务端HTTP缓存，客户端缓存过期后就近到代理缓存中获取，代理缓存过期了才请求源服务器</li></ul><h3 id="_1-7-http常见请求头和响应头" tabindex="-1"><a class="header-anchor" href="#_1-7-http常见请求头和响应头" aria-hidden="true">#</a> 1.7 HTTP常见请求头和响应头</h3><p><strong>请求头：</strong></p><ul><li>Accept： 浏览器支持的 MIME 媒体类型, 比如 text/html,application/json,image/webp,/ 等</li><li>Accept-Encoding: 声明浏览器支持的编码类型，gzip, deflate</li><li>Accept-Language: 客户端接受的语言格式,比如 zh-CN</li><li>Connection: keep-alive , 开启HTTP持久连接</li><li>Host：服务器的域名</li><li>Origin：告诉服务器请求从哪里发起的，仅包括协议和域名。 CORS跨域请求中可以看到response有对应的header，Access-Control-Allow-Origin</li><li>Referer：告诉服务器该网页是从哪个页面链接过来的，其用于所有类型的请求，并且包括：协议+域名+查询参数； <strong>（很多抢购服务会用这个做限制，必须通过某个入口进来才有效）</strong></li><li>User-Agent: 服务器通过这个请求头判断用户的软件的应用类型、<strong>操作系统</strong>、<strong>软件开发商以及版本号、浏览器内核信息</strong>等； 风控系统、反作弊系统、反爬虫系统等基本会采集这类信息做参考</li><li>Cookie: 表示服务端给客户端传的http请求状态,也是多个key=value形式组合，比如登录后的令牌等</li><li>Content-Type： HTTP请求提交的内容类型，一般只有<strong>post提交时才需要设置</strong>，比如文件上传，表单提交等</li></ul><p><strong>响应头：</strong></p><ul><li>Allow: 服务器支持哪些请求方法</li><li>Content-Length: 响应体的字节长度</li><li>Content-Type: 响应体的MIME类型</li><li>Content-Encoding: 设置数据使用的编码类型</li><li>Date: 设置消息发送的日期和时间</li><li>Expires: 设置响应体的过期时间,一个GMT时间，表示该缓存的有效时间</li><li>cache-control: Expires的作用一致，都是指明当前资源的有效期, 控制浏览器是否直接从浏览器缓存取数据还是重新发请求到服务器取数据,优先级高于Expires,控制粒度更细，如max-age=240，即4分钟</li><li>Location：表示客户应当到哪里去获取资源，一般同时设置状态代码为3xx</li><li>Server: 服务器名称</li><li>Transfer-Encoding：chunked 表示输出的内容长度不能确定，静态网页一般没，基本出现在动态网页里面</li><li>Access-Control-Allow-Origin: 定哪些站点可以参与跨站资源共享</li><li>access-control-allow-credentials: 告知浏览器是否可以将对请求的响应暴露给前端 JavaScript 代码。</li><li>access-control-allow-methods：服务器允许的请求方式</li></ul><h2 id="_2-url和跨域" tabindex="-1"><a class="header-anchor" href="#_2-url和跨域" aria-hidden="true">#</a> 2. URL和跨域</h2><h3 id="_2-1-url基础" tabindex="-1"><a class="header-anchor" href="#_2-1-url基础" aria-hidden="true">#</a> 2.1 URL基础</h3><p>URL：统一资源标识符</p><p>结构：协议名（http://）+主机名(www.baidu.com)+端口号（:80默认就不加）+请求路径（/home）+查询参数（？key=value）+资源定位瞄点（#fragment）</p><p>URL编码：URL只能使用ascii。因此引入编码机制，将所有非ascii码字符和界定符转为十六进制字节值，然后在前面加个%</p><h3 id="_2-2-跨域" tabindex="-1"><a class="header-anchor" href="#_2-2-跨域" aria-hidden="true">#</a> 2.2 跨域</h3><p>同源策略：浏览器遵循的，必须协议、主机、端口相同才同源，非同源，跨域请求的响应会被浏览器拦截</p><p>解决方案：</p><h4 id="_2-2-1-cors-跨域资源共享" tabindex="-1"><a class="header-anchor" href="#_2-2-1-cors-跨域资源共享" aria-hidden="true">#</a> 2.2.1 cors（跨域资源共享）</h4><ol><li>简单请求（get、post、head）</li></ol><ul><li><p>前端：withCredentials：true // 允许跨域发送cookie</p></li><li><p>后端：Access-control-allow-origin：前端的origin字段里的值 // 决定浏览器是否拦截这个响应；</p><p>Access-control-allow-credentials：true // 允许跨域发送cookie</p></li></ul><ol start="2"><li>非简单请求（预检请求options、cors请求）</li></ol><ul><li>预检请求：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">OPTIONS</span> <span class="token operator">/</span> <span class="token constant">HTTP</span><span class="token operator">/</span><span class="token number">1.1</span>
<span class="token literal-property property">Origin</span><span class="token operator">:</span> 当前地址
<span class="token literal-property property">Host</span><span class="token operator">:</span> xxx<span class="token punctuation">.</span>com
Access<span class="token operator">-</span>Control<span class="token operator">-</span>Request<span class="token operator">-</span>Method<span class="token operator">:</span> <span class="token constant">PUT</span> <span class="token comment">// 列出 CORS 请求用到哪个HTTP方法</span>
Access<span class="token operator">-</span>Control<span class="token operator">-</span>Request<span class="token operator">-</span>Headers<span class="token operator">:</span> <span class="token constant">X</span><span class="token operator">-</span>Custom<span class="token operator">-</span>Header <span class="token comment">// 指定 CORS 请求将要加上什么请求头</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在预检请求的响应返回后，如果请求<strong>不满足响应头的条件</strong>，则触发 XMLHttpRequest 的 onerror 方法， 当然后面真正的CORS请求也不会发出去了。</p><ul><li><p>cors请求：</p><p>它和简单请求的情况是 一样的。浏览器自动加上 Origin 字段，服务端响应头返回Access-Control-Allow-Origin。</p></li></ul><h4 id="_2-2-2-jsonp" tabindex="-1"><a class="header-anchor" href="#_2-2-2-jsonp" aria-hidden="true">#</a> 2.2.2 JSONP</h4><p>原理：通过 <code>&lt;script&gt;</code> 的src 填上目标地址从而发出 GET 请求，实现跨域请求并拿到响应。</p><p>JSONP 最大的优势在于<strong>兼容性好</strong>，IE 低版本不能使用 CORS 但可以使用 JSONP，缺点也 很明显，请求方法单一，<strong>只支持 GET 请求</strong>。</p><h4 id="_2-2-3-nginx-反向代理服务器" tabindex="-1"><a class="header-anchor" href="#_2-2-3-nginx-反向代理服务器" aria-hidden="true">#</a> 2.2.3 nginx（反向代理服务器）</h4><p>正向代理：帮助客户端访问客户端自己访问不到的服务器，然后将结果返回给客户端。client=&gt;proxy(vpn)=&gt;server(google)</p><p>反向代理：拿到客户端的请求，将请求转发给合适的其他服务器。帮其它的服务器拿到请求。client=&gt;proxy(nginx)=&gt;server(google)</p><p>原理：客户端（client.com）&lt;=&gt; nginx（client.com）&lt;=&gt; 服务器（server.com）</p><h4 id="_2-2-4-前端代理服务器" tabindex="-1"><a class="header-anchor" href="#_2-2-4-前端代理服务器" aria-hidden="true">#</a> 2.2.4 前端代理服务器</h4><p>proxy，仅在开发阶段起作用</p><h2 id="_3-get和post区别" tabindex="-1"><a class="header-anchor" href="#_3-get和post区别" aria-hidden="true">#</a> 3. get和post区别</h2><ol><li>用途：get一般用于向服务器请求获取数据，post是向服务端发送数据</li><li>数据：get数据在url上携带，post是放在body中</li><li>编码：get只能用url编码，post不限</li><li>底层：get发送一个tcp包，http header 和 data 一并发送出去，post发送2个tcp包，先发送header，再发送data。</li><li>书签历史：get可以被缓存，可以回退不受影响，作为书签，历史记录，post不能被缓存和书签历史记录，回退需要重新发送数据</li></ol><h2 id="_4-http1-0、1-1、2-0、3-0、https的区别" tabindex="-1"><a class="header-anchor" href="#_4-http1-0、1-1、2-0、3-0、https的区别" aria-hidden="true">#</a> 4. http1.0、1.1、2.0、3.0、https的区别</h2><ol><li><p>http1.0：规定浏览器和服务器保持短链接。服务器处理完成以后立即断开TCP连接。</p><p><strong>缺点：</strong> 不能复用连接，可能会阻塞。</p></li><li><p>http1.1：可长连接（增加Connection字段，通过设置<strong>Keep-Alive</strong>保持HTTP连接不断卡），增加缓存处理，请求管道化（“并行”传输），</p><p><strong>缺点：</strong> 服务器按照请求顺序依次返回结果，阻塞问题没有解决。</p></li><li><p>http2.0：</p><p><strong>多路复用实现真并行</strong>，在一个TCP上进行任意数量的HTTP请求。而这个强大的功能基于“二级制分帧”（应用层和传输层之间）的特性。<strong>头部压缩</strong>，使用encoder来减少需要传输的header大小。<strong>支持服务器推送资源</strong>，无需客户端需求。</p><p><strong>缺点：<strong>在出现</strong>丢包</strong>的情况下，整个TCP都要开始等待重传，导致后面的所有数据都被阻塞。</p></li><li><p>http3.0：<strong>QUIC协议（基于UDP）</strong>，<strong>多路复用，更好的移动端表现</strong>（quic通过id识别链接，tcp基于ip连接），<strong>向前纠正机制</strong>（每个数据包除了它本身的内容之外还包括了其他数据包的数据，因此少量的丢包可以通过其他包的冗余数据直接组装而无需重传。）</p></li><li><p>https：HTTP 的安全版，即 HTTP 下加入 <strong>SSL</strong> 层，对传输的<strong>数据进行加密</strong>。可<strong>认证用户和服务器</strong>确保数据发送正确。<strong>SEO（搜素引擎优化）更好</strong>。</p><p><strong>缺点：<strong>握手费时，缓存效率不如http，ssl证书需要绑定ip，使得</strong>ip不能绑定多个域名</strong>。</p></li></ol><h2 id="_5-tcp、udp的区别" tabindex="-1"><a class="header-anchor" href="#_5-tcp、udp的区别" aria-hidden="true">#</a> 5. tcp、udp的区别</h2><p>（1）<strong>TCP 可靠</strong>， <strong>面向连接</strong>，不会丢失数据因此适合<strong>大数据量的交换</strong>，且按序到达。<strong>UDP无需建立连接</strong>，尽最大努力交付，即<strong>不保证可靠</strong>交付。</p><p>（3）TCP 是面向字节流，UDP 面向报文，并且网络出现拥塞不会使得发送速率降低（因此会<strong>出现丢包</strong>，对实时的应用比如 IP 电话和视频会议等）。</p><p>（4）TCP 只能是 <strong>1 对 1 的</strong>，UDP 支持 1 对 1,<strong>1 对多。</strong></p><p>（5）TCP 的首部较大为 20 字节，而 UDP 只有 8 字节。</p><p>（6）TCP传输慢，UDP传输快，更安全。</p><p>（7）<strong>TCP适合对⽹络通信质量有要求，如浏览器、文件传输。UDP适合对⽹络通信质量要求不高，要求⽹络通讯速度尽量的快，如语音视频通话。</strong></p><h2 id="_6-tcp" tabindex="-1"><a class="header-anchor" href="#_6-tcp" aria-hidden="true">#</a> 6. tcp</h2><h3 id="_6-1-tcp与http" tabindex="-1"><a class="header-anchor" href="#_6-1-tcp与http" aria-hidden="true">#</a> 6.1 tcp与http</h3><p><strong>TCP是底层通讯协议</strong>，定义的是数据传输和连接⽅式的规范。</p><p><strong>HTTP是应⽤层协议</strong>，定义的是传输数据的内容的规范 （七层架构模型）</p><p><strong>tcp可靠传输原因: 收到请求响应确认, 超时重传, 拥塞控制, 数据校验(校验和), 数据分段</strong></p><p>HTTP协议中的数据是利⽤TCP协议传输的</p><h3 id="_6-2-tcp三次握手" tabindex="-1"><a class="header-anchor" href="#_6-2-tcp三次握手" aria-hidden="true">#</a> 6.2 tcp三次握手</h3><p>防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。</p><ul><li>第一次握手： 客户端向服务器端发送报文，证明客户端的发送能力正常</li><li>第二次握手：服务器端接收到报文并向客户端发送报文，证明服务器端的接收能力、发送能力正常</li><li>第三次握手：客户端向服务器发送报文，证明客户端的接收能力正常，连接建立成功</li></ul><p><img src="https://pic4.zhimg.com/80/v2-3e96d058cc79c8db7d7ecad90ced7507_720w.webp" alt="img" loading="lazy"></p><h3 id="_6-3-tcp四次挥手" tabindex="-1"><a class="header-anchor" href="#_6-3-tcp四次挥手" aria-hidden="true">#</a> 6.3 tcp四次挥手</h3><ul><li><p><strong>第一次挥手</strong> 客户端发出连接释放报文，并且停止发送数据。</p></li><li><p><strong>第二次挥手</strong> 服务器端接收到连接释放报文后，发出确认报文</p></li><li><p><strong>第三次挥手</strong> 客户端接收到服务器端的确认请求后，等待服务器发送连接释放报文，服务器将最后的数据发送完毕后，就向客户端发送连接释放报文</p></li><li><p><strong>第四次挥手</strong> 客户端收到服务器的连接释放报文后，必须发出确认，服务器端接收到确认报文后，TCP连接就断开了。</p><p><img src="https://pic2.zhimg.com/80/v2-75cc9591e92108c1ead0787a4066d49d_720w.webp" alt="img" loading="lazy"></p></li></ul><h3 id="_6-4-为什么是三次握手" tabindex="-1"><a class="header-anchor" href="#_6-4-为什么是三次握手" aria-hidden="true">#</a> 6.4 为什么是三次握手</h3><p>三次通信是理论上的<strong>最小值</strong>。在不可靠信道上可靠地传输信息。</p><p>发送两次（客户端发送请求，服务端接收到发送确认请求），1. 不能保证服务端发送的，客户端能不能接收到。2. 由于网络慢了，超时而又发了一个请求，导致最终服务端接受2次，建立了两次连接。</p><p>为什么传回SYN：告诉发送端，我接收到的信息确实就是你发送的信号</p><p>传了SYN,为啥还要传ACK：保证接收方到发送方的通道。</p><h3 id="_6-5-为什么是四次挥手" tabindex="-1"><a class="header-anchor" href="#_6-5-为什么是四次挥手" aria-hidden="true">#</a> 6.5 为什么是四次挥手</h3><p>其实就是：为什么在四次挥手的时候，服务端没有将SYN和ACK一起发送</p><p>tcp为全双工通信，客户端在结束它的发送后还能接收来自另一端数据的能力。同时服务端发送ack后还需要处理数据，待处理完才发送fin包。所以服务端的 ACK 和 FIN 一般都会分开发送。</p><p>三次：服务端没有数据处理也可以</p><h2 id="_7-websocket" tabindex="-1"><a class="header-anchor" href="#_7-websocket" aria-hidden="true">#</a> 7. WebSocket</h2><p>WebSocket 是 HTML5 中的协议，浏览器和服务器只需要完成一次tcp连接，两者之间就直接可以创建<strong>持久性的连接</strong>， 并进行<strong>双向数据传输</strong>。<strong>在单个TCP连接上进行全双工通信的协议。</strong></p><p>HTTP只能由客户端发给服务端，当服务端连续状态变化时，客户端只能通过轮询获取，服务端不能主动通知客户端。</p><p><strong>相同点：</strong> 都是基于TCP，都是可靠性传输协议，都是应用层协议</p><p><strong>联系：</strong> websocket在建立握手时，数据是通过http传输的，建立之后不再使用http协议，即用http建立通道，websocket通信。</p><p>应用：即时聊天通信、实时数据流的拉去推送、在线协同编辑、即时web应用程序。</p><h2 id="_8-浏览器输入地址后的事情" tabindex="-1"><a class="header-anchor" href="#_8-浏览器输入地址后的事情" aria-hidden="true">#</a> 8. 浏览器输入地址后的事情</h2><ol><li>构建请求</li><li>查找缓存，有，直接使用</li><li>dns解析域名</li><li>三次握手建立tcp连接</li><li>发送http请求（请求行、请求头、请求体）</li><li>服务器处理，返回资源（响应行、响应头、响应体），四次挥手结束连接（看connection字段是否是keep-alive）</li><li>客户端构建dom树、cssom树、样式计算、生成布局树并渲染</li></ol><h2 id="_9-缓存" tabindex="-1"><a class="header-anchor" href="#_9-缓存" aria-hidden="true">#</a> 9. 缓存</h2><p>通过c<strong>ache-control</strong>验证强缓存是否可用</p><ul><li><p>如果强缓存可用，直接使用</p></li><li><p>否则进入协商缓存，即发送 HTTP 请求，服务器通过**请求头中的If-Modified-Since（Last-Modified）或者 If-None-Match（Etag）**字段检查资源是否更新</p><ul><li>若资源更新，返回资源和200状态码</li><li>否则，返回304，告诉浏览器直接从缓存获取资源</li></ul></li></ul><h3 id="_9-1-强缓存" tabindex="-1"><a class="header-anchor" href="#_9-1-强缓存" aria-hidden="true">#</a> 9.1 强缓存</h3><p>无需发送http请求，通过判断响应头的过期时间expires/cache-control：max-age</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">Expires</span><span class="token operator">:</span> Wed<span class="token punctuation">,</span> <span class="token number">22</span> Nov <span class="token number">2019</span> <span class="token number">08</span><span class="token operator">:</span><span class="token number">41</span><span class="token operator">:</span><span class="token number">00</span> <span class="token constant">GMT</span>
Cache<span class="token operator">-</span>Control<span class="token operator">:</span>max<span class="token operator">-</span>age<span class="token operator">=</span><span class="token number">3600</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-2-协商缓存" tabindex="-1"><a class="header-anchor" href="#_9-2-协商缓存" aria-hidden="true">#</a> 9.2 协商缓存</h3><p>强缓存失效后，浏览器在请求头中携带相应的 <strong>缓存tag（Last-Modified 和 ETag）</strong> 来向服务器发请求，由服务器根据这个tag，来 决定是否使用缓存。</p><p><strong>Last-Modified：<strong>最后修改时间，服务器会在响应头中加上这个字段。服务器拿到</strong>请求头中的 If-Modified-Since</strong> 的字段后，其实会和这个服务器中 <strong>Last-Modified</strong> 对比。</p><p><strong>ETag：<strong>服务器给文件生成的唯一标识，只要里面的内容有改动，这个值就会变。服务器接收到请求头中的</strong>If-None-Match</strong>后，会跟服务器上该资源的<strong>ETag</strong>进行比对。</p><p><strong>对比：</strong></p><ol><li>精度：Etag&gt;Last-Modified。last-modified存在编辑资源但内容没变，缓存失效，且last-modified感知单位为1s，1s内的改变不会修改</li><li>性能：Last-Modified&gt;Etag。last只记载修改时间，而Etag需要根据文件内容生成哈希值</li><li>两者都可以时，优先Etag</li></ol><h3 id="_9-3-浏览器缓存位置" tabindex="-1"><a class="header-anchor" href="#_9-3-浏览器缓存位置" aria-hidden="true">#</a> 9.3 浏览器缓存位置</h3><ul><li>Service Worker 离线缓存</li><li>Memory Cache 内存缓存</li><li>Disk Cache 磁盘缓存</li><li>Push Cache 推送缓存，用得较少</li></ul><h2 id="_10-浏览器存储" tabindex="-1"><a class="header-anchor" href="#_10-浏览器存储" aria-hidden="true">#</a> 10. 浏览器存储</h2><h3 id="_10-1-cookie" tabindex="-1"><a class="header-anchor" href="#_10-1-cookie" aria-hidden="true">#</a> 10.1 Cookie</h3><p>功能：用于标识用户身份，并通过请求在客户端和服务端传送。储存sessionid。</p><p>大小：4kb</p><p>过期时间：有设置时，时间到过期，时间没到关闭浏览器也不会清除；没设置时间时，关闭浏览器过期</p><p>性能：无论需不需要，都会携带在请求头中，性能浪费</p><p>安全：容易遭受攻击，纯文本形式，易被截取，跨站请求攻击。httponly=false时可通过js获取</p><h3 id="_10-2-localstorage" tabindex="-1"><a class="header-anchor" href="#_10-2-localstorage" aria-hidden="true">#</a> 10.2 localStorage</h3><p>功能：本地持久化储存</p><p>大小：5m左右</p><p>过期时间：主动删除才过期</p><p>安全：只存在于客户端</p><p>应用：存储内容稳定的资源，如logo、base64的照片</p><h3 id="_10-3-sessionstorage" tabindex="-1"><a class="header-anchor" href="#_10-3-sessionstorage" aria-hidden="true">#</a> 10.3 sessionStorage</h3><p>功能：会话级存储</p><p>大小：5m左右</p><p>过期时间：浏览器窗口关闭时过期</p><p>安全：只存在于客户端</p><p>应用：表单信息维护、本地浏览记录</p><h3 id="_10-4-indexeddb" tabindex="-1"><a class="header-anchor" href="#_10-4-indexeddb" aria-hidden="true">#</a> 10.4 IndexedDB</h3><p>功能：运行在浏览器中的<strong>非关系型数据库</strong>，为大型数据的存储提供了接口。</p><p>大小：5m量级，理论没有上限</p><h2 id="_11-回流与重绘" tabindex="-1"><a class="header-anchor" href="#_11-回流与重绘" aria-hidden="true">#</a> 11. 回流与重绘</h2><h3 id="_11-1-回流" tabindex="-1"><a class="header-anchor" href="#_11-1-回流" aria-hidden="true">#</a> 11.1 回流</h3><p><strong>当Layout Tree中部分或全部元素的尺寸、结构、或某些属性发生改变时，浏览器重新渲染部分或全部文档的过程称为回流。</strong></p><p>触发：dom几何尺寸变化（尺寸变化、节点删减移动、读写offset、scroll、client属性、getBoundingClientRect）</p><p>过程：从渲染dom树开始重新走一遍，开销大。生成dom树=&gt;计算样式=&gt; 生成布局树=&gt;构建图层树=&gt;绘制列表</p><h3 id="_11-2-重绘" tabindex="-1"><a class="header-anchor" href="#_11-2-重绘" aria-hidden="true">#</a> 11.2 重绘</h3><p>触发：dom样式改变，不影响几何结构（<strong>color、background-color、visibility</strong>）</p><p>过程：计算样式=&gt;绘制列表。回流一定重绘，重绘不一定回流。</p><h2 id="_12-网络攻击" tabindex="-1"><a class="header-anchor" href="#_12-网络攻击" aria-hidden="true">#</a> 12. 网络攻击</h2><h3 id="_12-1-跨站脚本攻击xss" tabindex="-1"><a class="header-anchor" href="#_12-1-跨站脚本攻击xss" aria-hidden="true">#</a> 12.1 跨站脚本攻击XSS</h3><p>定义：浏览器被恶意注入攻击脚本，从而窃取cookie、监听用户行为、产生浮窗广告</p><p>解决：对用户输入进行转码过滤，使用httponly，对输出进行编码</p><h3 id="_12-2-跨站请求伪造csrf" tabindex="-1"><a class="header-anchor" href="#_12-2-跨站请求伪造csrf" aria-hidden="true">#</a> 12.2 跨站请求伪造CSRF</h3><p>定义：诱导用户点击链接，获取到用户登录状态，并恶意向服务器发送请求。</p><p>解决：使用token，验证来源站点referer、http头中自定义属性并验证</p><h2 id="_13-浏览器渲染原理" tabindex="-1"><a class="header-anchor" href="#_13-浏览器渲染原理" aria-hidden="true">#</a> 13. 浏览器渲染原理</h2><p>构建dom树，样式计算，布局阶段，分层，绘制，分块，栅格化，合成，回流，重绘</p><h3 id="_13-1-构建dom树-html-解析器" tabindex="-1"><a class="header-anchor" href="#_13-1-构建dom树-html-解析器" aria-hidden="true">#</a> 13.1 构建dom树（<strong>HTML 解析器</strong>）</h3><p><strong>将HTML内容转换为浏览器DOM树结构</strong>。<strong>HTML 文件字节流是无法直接被渲染引擎理解的</strong>，所以要将其转化为渲染引擎能够理解的内部结构，这个结构就是 DOM。</p><p>DOM 是保存在内存中树状结构，可以通过 JavaScript 来查询或修改其内容</p><ol><li>转换token（将字节流转换为 Token）</li><li><strong>将 Token 解析为 DOM 节点</strong>，<strong>并将 DOM 节点添加到 DOM 树中</strong>。</li></ol><p>HTML 解析器维护了一个 <strong>Token 栈结构</strong>，该 Token 栈主要用来计算<strong>节点之间的父子关系</strong>，在第一个阶段中生成的 Token 会被按照顺序压到这个栈中。</p><h3 id="_13-2-样式计算-计算出-dom-节点中每个元素的具体样式" tabindex="-1"><a class="header-anchor" href="#_13-2-样式计算-计算出-dom-节点中每个元素的具体样式" aria-hidden="true">#</a> 13.2 样式计算（计算出 DOM 节点中每个元素的具体样式）</h3><ul><li>格式化样式表（CSS文本=&gt;浏览器可以理解的结构CSSOM树）</li><li>标准化样式表（css属性值标准化，em=&gt;px）</li><li>计算每个DOM节点具体样式（根据继承规则、层叠规则）</li></ul><h3 id="_13-3-生成布局树和布局计算" tabindex="-1"><a class="header-anchor" href="#_13-3-生成布局树和布局计算" aria-hidden="true">#</a> 13.3 生成布局树和布局计算</h3><p>计算出 DOM 树中<strong>可见元素</strong>的<strong>几何位置</strong></p><p>DOM 树中所有不可见的节点都没有包含到布局树中</p><ul><li>遍历 DOM 树中的所有可见节点，并把这些节点加到布局树中</li><li>而不可见的节点会被布局树忽略掉，如 <code>head</code> 标签下面的全部内容，包含 <code>dispaly:none</code>元素也没有被包进布局树</li><li>根据布局树计算每个节点在屏幕的位置</li><li>Web 页面中元素的布局是相对的，在页面元素位置、大小发生变化，往往会导致其他节点联动，需要<strong>重新计算布局</strong>，这时候的布局过程一般被称为<strong>回流（Reflow）</strong></li></ul><h3 id="_13-4-分层" tabindex="-1"><a class="header-anchor" href="#_13-4-分层" aria-hidden="true">#</a> 13.4 分层</h3><p>对布局树分层生成图层（渲染层）树</p><p>为特定的节点生成专用的图层，以适应复杂的 3D 变换、页面滚动，或者使用 z-index 做 z 轴排序等。如果一个节点没有对应的层，那么这个节点就从属于父节点的图层。</p><p>浏览器自动创建新的渲染层的条件有两个，一个是<strong>满足层叠上下文</strong></p><h3 id="_13-5-绘制" tabindex="-1"><a class="header-anchor" href="#_13-5-绘制" aria-hidden="true">#</a> 13.5 绘制</h3><p>对每个渲染层进行绘制，本质上是一个像素填充的过程。这个过程也出现于回流或一些不影响布局的 CSS 修改引起的屏幕局部重画，这时候它被称为 <strong>重绘（Repaint）</strong></p><h3 id="_13-6-分块" tabindex="-1"><a class="header-anchor" href="#_13-6-分块" aria-hidden="true">#</a> 13.6 分块</h3><p><strong>将图层划分为图块</strong></p><p>然后合成线程会<strong>按照视口附近的图块来优先生成位图</strong></p><p>有的页面你使用滚动条要滚动好久才能滚动到底部，但是通过视口，用户只能看到页面的很小一部分，所以在这种情况下，要绘制出所有图层内容的话，就会产生太大的开销，而且也没有必要</p><h3 id="_13-7-栅格化-图块转换为位图" tabindex="-1"><a class="header-anchor" href="#_13-7-栅格化-图块转换为位图" aria-hidden="true">#</a> 13.7 栅格化（图块转换为位图）</h3><h3 id="_13-8-合成" tabindex="-1"><a class="header-anchor" href="#_13-8-合成" aria-hidden="true">#</a> 13.8 合成</h3><p>满足某些特殊条件的渲染层，会被浏览器自动提升为合成层。（video、canvas元素、position：fixed、animation、transition）</p><p>根元素 document 是渲染层，不是合成层</p><p>当通过渲染流水线通过GPU生成一张图片之后，会将图片存储到<strong>显卡的后缓冲区</strong>，一旦显卡把合成的图像写到后缓冲区，系统就会让后缓冲区和前缓冲区互换；此时显示器会从前缓冲区中获取最新图片。一般情况下显示器的刷新频率是 60HZ，也就是每秒更新 60 张图片。</p><h2 id="_14-分片并发上传与并发限制" tabindex="-1"><a class="header-anchor" href="#_14-分片并发上传与并发限制" aria-hidden="true">#</a> 14. 分片并发上传与并发限制</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Scheduler</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">limit</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>maxCount <span class="token operator">=</span> limit<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>runCounts <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">time<span class="token punctuation">,</span> order</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token function-variable function">promiseCreator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>promiseCreator<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">taskStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>queue <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span>length <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>runCounts <span class="token operator">&gt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>runCounts<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>queue
      <span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>runCounts<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> scheduler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scheduler</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">addTask</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">time<span class="token punctuation">,</span> order</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  scheduler<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">addTask</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">addTask</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">addTask</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">addTask</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token string">&quot;4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
scheduler<span class="token punctuation">.</span><span class="token function">taskStart</span><span class="token punctuation">(</span>）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_15-性能指标" tabindex="-1"><a class="header-anchor" href="#_15-性能指标" aria-hidden="true">#</a> 15. 性能指标</h2><p><a href="">https://juejin.cn/post/7107537105664327716</a></p><p>360、谷歌都有lighthouse进行测评，micro edge通过performance</p><ul><li><strong>首屏内容绘制（First Contentful Paint，FCP）</strong>：浏览器从响应用户输入网络地址，在页面首次绘制文本，图片（包括背景图）、非白色的 canvas 或者SVG （1.8s以内）</li><li><strong>速度指标（Speed Index，SI）</strong>： 衡量页面加载期间内容以视觉方式显示的速度。 通俗的讲，就是网页从有东西到完全显示内容的可见填充速度。</li><li><strong>可交互时间（Time to Interactive，TTI）</strong>：网页第一次完全达到可交互状态的时间点。</li><li><strong>最大内容绘制（Largest Contentful Paint，LCP)</strong>：根据页面首次开始加载的时间点来报告<strong>可视区域内</strong>可见的最大图像或者文本块完成渲染的相对时间。（2.5s以内）</li><li><strong>总阻塞时间（Total Blocking Time，TBT）</strong>：页面被阻塞响应用户交互的总时间。</li><li><strong>首次有效绘制（First Meaning Paint, FMP）</strong>：可视区“内容”最大的可见元素开始出现在屏幕上的时间点</li></ul><h2 id="_16-内存泄漏" tabindex="-1"><a class="header-anchor" href="#_16-内存泄漏" aria-hidden="true">#</a> 16. 内存泄漏</h2><p>Google Chrome浏览器提供了非常强大的JS调试工具，Heap Profiling便是其中一个。Heap Profiling可以记录当前的堆内存（heap）快照，并生成对象的描述文件，该描述文件给出了当时JS运行所用到的所有对象，以及这些对象所占用的内存大小、引用的层级关系等等。</p><p>或者performance的memory选项</p><p>造成原因：</p><ul><li>全局变量，只有当页面被关闭后才会被销毁。</li><li>未销毁的定时器和回调函数</li><li>滥用闭包</li><li>dom元素引用后未取消</li><li>Map数据类型的使用</li></ul>`,200),o=[p];function i(r,l){return s(),a("div",null,o)}const d=n(e,[["render",i],["__file","interviewHttpandBrower.html.vue"]]);export{d as default};
