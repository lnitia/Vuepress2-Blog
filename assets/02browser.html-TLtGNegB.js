const e=JSON.parse(`{"key":"v-776e3814","path":"/mymd/mianshi/mianshibaodian/02browser.html","title":"浏览器","lang":"zh-CN","frontmatter":{"icon":"list","date":"2024-03-10T00:00:00.000Z","category":["面试"],"order":2,"editLink":false,"article":false,"description":"浏览器 从输入URL到页面加载的全过程 首先在浏览器中输入URL 查找缓存：浏览器先查看浏览器缓存-系统缓存-路由缓存中是否有该地址页面，如果有则显示页面内容。如果没有则进行下一步。 浏览器缓存：浏览器会记录DNS一段时间，因此，只是第一个地方解析DNS请求； 操作系统缓存:如果在浏览器缓存中不包含这个记录，则会使系统调用操作系统， 获取操作系统的记录(保存最近的DNS查询缓存)； 路由器缓存：如果上述两个步骤均不能成功获取DNS记录，继续搜索路由器缓存； ISP缓存：若上述均失败，继续向ISP搜索。 DNS域名解析：浏览器向DNS服务器发起请求，解析该URL中的域名对应的IP地址。DNS服务器是基于UDP的，因此会用到UDP协议。 建立TCP连接：解析出IP地址后，根据IP地址和默认80端口，和服务器建立TCP连接 发起HTTP请求：浏览器发起读取文件的HTTP请求，，该请求报文作为TCP三次握手的第三次数据发送给服务器 服务器响应请求并返回结果：服务器对浏览器请求做出响应，并把对应的html文件发送给浏览器 关闭TCP连接：通过四次挥手释放TCP连接 浏览器渲染：客户端（浏览器）解析HTML内容并渲染出来，浏览器接收到数据包后的解析流程为： 构建DOM树：词法分析然后解析成DOM树（dom tree），是由dom元素及属性节点组成，树的根是document对象 构建CSS规则树：生成CSS规则树（CSS Rule Tree） 构建render树：Web浏览器将DOM和CSSOM结合，并构建出渲染树（render tree） 布局（Layout）：计算出每个节点在屏幕中的位置 绘制（Painting）：即遍历render树，并使用UI后端层绘制每个节点。 JS引擎解析过程：调用JS引擎执行JS代码（JS的解释阶段，预处理阶段，执行阶段生成执行上下文，VO，作用域链、回收机制等等） 创建window对象：window对象也叫全局执行环境，当页面产生时就被创建，所有的全局变量和函数都属于window的属性和方法，而DOM Tree也会映射在window的doucment对象上。当关闭网页或者关闭浏览器时，全局执行环境会被销毁。 加载文件：完成js引擎分析它的语法与词法是否合法，如果合法进入预编译 预编译：在预编译的过程中，浏览器会寻找全局变量声明，把它作为window的属性加入到window对象中，并给变量赋值为'undefined'；寻找全局函数声明，把它作为window的方法加入到window对象中，并将函数体赋值给他（匿名函数是不参与预编译的，因为它是变量）。而变量提升作为不合理的地方在ES6中已经解决了，函数提升还存在。 解释执行：执行到变量就赋值，如果变量没有被定义，也就没有被预编译直接赋值，在ES5非严格模式下这个变量会成为window的一个属性，也就是成为全局变量。string、int这样的值就是直接把值放在变量的存储空间里，object对象就是把指针指向变量的存储空间。函数执行，就将函数的环境推入一个环境的栈中，执行完成后再弹出，控制权交还给之前的环境。JS作用域其实就是这样的执行流机制实现的。","head":[["meta",{"property":"og:url","content":"http://xlinwork.online/mymd/mianshi/mianshibaodian/02browser.html"}],["meta",{"property":"og:site_name","content":"lnitia's blog"}],["meta",{"property":"og:title","content":"浏览器"}],["meta",{"property":"og:description","content":"浏览器 从输入URL到页面加载的全过程 首先在浏览器中输入URL 查找缓存：浏览器先查看浏览器缓存-系统缓存-路由缓存中是否有该地址页面，如果有则显示页面内容。如果没有则进行下一步。 浏览器缓存：浏览器会记录DNS一段时间，因此，只是第一个地方解析DNS请求； 操作系统缓存:如果在浏览器缓存中不包含这个记录，则会使系统调用操作系统， 获取操作系统的记录(保存最近的DNS查询缓存)； 路由器缓存：如果上述两个步骤均不能成功获取DNS记录，继续搜索路由器缓存； ISP缓存：若上述均失败，继续向ISP搜索。 DNS域名解析：浏览器向DNS服务器发起请求，解析该URL中的域名对应的IP地址。DNS服务器是基于UDP的，因此会用到UDP协议。 建立TCP连接：解析出IP地址后，根据IP地址和默认80端口，和服务器建立TCP连接 发起HTTP请求：浏览器发起读取文件的HTTP请求，，该请求报文作为TCP三次握手的第三次数据发送给服务器 服务器响应请求并返回结果：服务器对浏览器请求做出响应，并把对应的html文件发送给浏览器 关闭TCP连接：通过四次挥手释放TCP连接 浏览器渲染：客户端（浏览器）解析HTML内容并渲染出来，浏览器接收到数据包后的解析流程为： 构建DOM树：词法分析然后解析成DOM树（dom tree），是由dom元素及属性节点组成，树的根是document对象 构建CSS规则树：生成CSS规则树（CSS Rule Tree） 构建render树：Web浏览器将DOM和CSSOM结合，并构建出渲染树（render tree） 布局（Layout）：计算出每个节点在屏幕中的位置 绘制（Painting）：即遍历render树，并使用UI后端层绘制每个节点。 JS引擎解析过程：调用JS引擎执行JS代码（JS的解释阶段，预处理阶段，执行阶段生成执行上下文，VO，作用域链、回收机制等等） 创建window对象：window对象也叫全局执行环境，当页面产生时就被创建，所有的全局变量和函数都属于window的属性和方法，而DOM Tree也会映射在window的doucment对象上。当关闭网页或者关闭浏览器时，全局执行环境会被销毁。 加载文件：完成js引擎分析它的语法与词法是否合法，如果合法进入预编译 预编译：在预编译的过程中，浏览器会寻找全局变量声明，把它作为window的属性加入到window对象中，并给变量赋值为'undefined'；寻找全局函数声明，把它作为window的方法加入到window对象中，并将函数体赋值给他（匿名函数是不参与预编译的，因为它是变量）。而变量提升作为不合理的地方在ES6中已经解决了，函数提升还存在。 解释执行：执行到变量就赋值，如果变量没有被定义，也就没有被预编译直接赋值，在ES5非严格模式下这个变量会成为window的一个属性，也就是成为全局变量。string、int这样的值就是直接把值放在变量的存储空间里，object对象就是把指针指向变量的存储空间。函数执行，就将函数的环境推入一个环境的栈中，执行完成后再弹出，控制权交还给之前的环境。JS作用域其实就是这样的执行流机制实现的。"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-22T09:12:29.000Z"}],["meta",{"property":"article:author","content":"lnitia"}],["meta",{"property":"article:published_time","content":"2024-03-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-22T09:12:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"浏览器\\",\\"description\\":\\"浏览器 从输入URL到页面加载的全过程 首先在浏览器中输入URL 查找缓存：浏览器先查看浏览器缓存-系统缓存-路由缓存中是否有该地址页面，如果有则显示页面内容。如果没有则进行下一步。 浏览器缓存：浏览器会记录DNS一段时间，因此，只是第一个地方解析DNS请求； 操作系统缓存:如果在浏览器缓存中不包含这个记录，则会使系统调用操作系统， 获取操作系统的记录(保存最近的DNS查询缓存)； 路由器缓存：如果上述两个步骤均不能成功获取DNS记录，继续搜索路由器缓存； ISP缓存：若上述均失败，继续向ISP搜索。 DNS域名解析：浏览器向DNS服务器发起请求，解析该URL中的域名对应的IP地址。DNS服务器是基于UDP的，因此会用到UDP协议。 建立TCP连接：解析出IP地址后，根据IP地址和默认80端口，和服务器建立TCP连接 发起HTTP请求：浏览器发起读取文件的HTTP请求，，该请求报文作为TCP三次握手的第三次数据发送给服务器 服务器响应请求并返回结果：服务器对浏览器请求做出响应，并把对应的html文件发送给浏览器 关闭TCP连接：通过四次挥手释放TCP连接 浏览器渲染：客户端（浏览器）解析HTML内容并渲染出来，浏览器接收到数据包后的解析流程为： 构建DOM树：词法分析然后解析成DOM树（dom tree），是由dom元素及属性节点组成，树的根是document对象 构建CSS规则树：生成CSS规则树（CSS Rule Tree） 构建render树：Web浏览器将DOM和CSSOM结合，并构建出渲染树（render tree） 布局（Layout）：计算出每个节点在屏幕中的位置 绘制（Painting）：即遍历render树，并使用UI后端层绘制每个节点。 JS引擎解析过程：调用JS引擎执行JS代码（JS的解释阶段，预处理阶段，执行阶段生成执行上下文，VO，作用域链、回收机制等等） 创建window对象：window对象也叫全局执行环境，当页面产生时就被创建，所有的全局变量和函数都属于window的属性和方法，而DOM Tree也会映射在window的doucment对象上。当关闭网页或者关闭浏览器时，全局执行环境会被销毁。 加载文件：完成js引擎分析它的语法与词法是否合法，如果合法进入预编译 预编译：在预编译的过程中，浏览器会寻找全局变量声明，把它作为window的属性加入到window对象中，并给变量赋值为'undefined'；寻找全局函数声明，把它作为window的方法加入到window对象中，并将函数体赋值给他（匿名函数是不参与预编译的，因为它是变量）。而变量提升作为不合理的地方在ES6中已经解决了，函数提升还存在。 解释执行：执行到变量就赋值，如果变量没有被定义，也就没有被预编译直接赋值，在ES5非严格模式下这个变量会成为window的一个属性，也就是成为全局变量。string、int这样的值就是直接把值放在变量的存储空间里，object对象就是把指针指向变量的存储空间。函数执行，就将函数的环境推入一个环境的栈中，执行完成后再弹出，控制权交还给之前的环境。JS作用域其实就是这样的执行流机制实现的。\\"}"]]},"headers":[{"level":3,"title":"从输入URL到页面加载的全过程","slug":"从输入url到页面加载的全过程","link":"#从输入url到页面加载的全过程","children":[]},{"level":3,"title":"在浏览器中输入URL到显示页面经历哪些过程，涉及到哪些协议？","slug":"在浏览器中输入url到显示页面经历哪些过程-涉及到哪些协议","link":"#在浏览器中输入url到显示页面经历哪些过程-涉及到哪些协议","children":[]},{"level":3,"title":"浏览器的主要功能","slug":"浏览器的主要功能","link":"#浏览器的主要功能","children":[]},{"level":3,"title":"浏览器的工作原理","slug":"浏览器的工作原理","link":"#浏览器的工作原理","children":[]},{"level":3,"title":"浏览器的主要组成部分是什么？","slug":"浏览器的主要组成部分是什么","link":"#浏览器的主要组成部分是什么","children":[]},{"level":3,"title":"浏览器是如何渲染UI的？","slug":"浏览器是如何渲染ui的","link":"#浏览器是如何渲染ui的","children":[]},{"level":3,"title":"DOM Tree是如何构建的？","slug":"dom-tree是如何构建的","link":"#dom-tree是如何构建的","children":[]},{"level":3,"title":"浏览器重绘与重排的区别？","slug":"浏览器重绘与重排的区别","link":"#浏览器重绘与重排的区别","children":[]},{"level":3,"title":"如何触发重排和重绘？","slug":"如何触发重排和重绘","link":"#如何触发重排和重绘","children":[]},{"level":3,"title":"如何避免重绘或者重排？","slug":"如何避免重绘或者重排","link":"#如何避免重绘或者重排","children":[]},{"level":3,"title":"介绍下304过程","slug":"介绍下304过程","link":"#介绍下304过程","children":[]},{"level":3,"title":"浏览器的缓存机制 强制缓存 && 协商缓存","slug":"浏览器的缓存机制-强制缓存-协商缓存","link":"#浏览器的缓存机制-强制缓存-协商缓存","children":[]},{"level":3,"title":"Cookie、sessionStorage、localStorage 的区别","slug":"cookie、sessionstorage、localstorage-的区别","link":"#cookie、sessionstorage、localstorage-的区别","children":[]},{"level":3,"title":"说下进程、线程和协程","slug":"说下进程、线程和协程","link":"#说下进程、线程和协程","children":[]},{"level":3,"title":"进程间的通信方式","slug":"进程间的通信方式","link":"#进程间的通信方式","children":[]},{"level":3,"title":"浏览器样式兼容","slug":"浏览器样式兼容","link":"#浏览器样式兼容","children":[]},{"level":3,"title":"JS垃圾回收机制","slug":"js垃圾回收机制","link":"#js垃圾回收机制","children":[]}],"git":{"createdTime":1729588349000,"updatedTime":1729588349000,"contributors":[{"name":"lnitia","email":"1776568708@qq.com","commits":1}]},"readingTime":{"minutes":23.58,"words":7073},"filePathRelative":"mymd/mianshi/mianshibaodian/02browser.md","localizedDate":"2024年3月10日","excerpt":"<h1> 浏览器</h1>\\n<h3> 从输入URL到页面加载的全过程</h3>\\n<p></p>\\n<ol>\\n<li>\\n<p>首先在浏览器中输入URL</p>\\n</li>\\n<li>\\n<p>查找缓存：浏览器先查看浏览器缓存-系统缓存-路由缓存中是否有该地址页面，如果有则显示页面内容。如果没有则进行下一步。</p>\\n<ul>\\n<li>浏览器缓存：浏览器会记录DNS一段时间，因此，只是第一个地方解析DNS请求；</li>\\n<li>操作系统缓存:如果在浏览器缓存中不包含这个记录，则会使系统调用操作系统， 获取操作系统的记录(保存最近的DNS查询缓存)；</li>\\n<li>路由器缓存：如果上述两个步骤均不能成功获取DNS记录，继续搜索路由器缓存；</li>\\n<li>ISP缓存：若上述均失败，继续向ISP搜索。</li>\\n</ul>\\n</li>\\n<li>\\n<p>DNS域名解析：浏览器向DNS服务器发起请求，解析该URL中的域名对应的IP地址。<code>DNS服务器是基于UDP的，因此会用到UDP协议</code>。</p>\\n</li>\\n<li>\\n<p>建立TCP连接：解析出IP地址后，根据IP地址和默认80端口，和服务器建立TCP连接</p>\\n</li>\\n<li>\\n<p>发起HTTP请求：浏览器发起读取文件的HTTP请求，，该请求报文作为TCP三次握手的第三次数据发送给服务器</p>\\n</li>\\n<li>\\n<p>服务器响应请求并返回结果：服务器对浏览器请求做出响应，并把对应的html文件发送给浏览器</p>\\n</li>\\n<li>\\n<p>关闭TCP连接：通过四次挥手释放TCP连接</p>\\n</li>\\n<li>\\n<p>浏览器渲染：客户端（浏览器）解析HTML内容并渲染出来，浏览器接收到数据包后的解析流程为：</p>\\n<ul>\\n<li>构建DOM树：词法分析然后解析成DOM树（dom tree），是由dom元素及属性节点组成，树的根是document对象</li>\\n<li>构建CSS规则树：生成CSS规则树（CSS Rule Tree）</li>\\n<li>构建render树：Web浏览器将DOM和CSSOM结合，并构建出渲染树（render tree）</li>\\n<li>布局（Layout）：计算出每个节点在屏幕中的位置</li>\\n<li>绘制（Painting）：即遍历render树，并使用UI后端层绘制每个节点。</li>\\n</ul>\\n<p></p>\\n</li>\\n<li>\\n<p>JS引擎解析过程：调用JS引擎执行JS代码（JS的解释阶段，预处理阶段，执行阶段生成执行上下文，VO，作用域链、回收机制等等）</p>\\n<ul>\\n<li>创建window对象：window对象也叫全局执行环境，当页面产生时就被创建，所有的全局变量和函数都属于window的属性和方法，而DOM Tree也会映射在window的doucment对象上。当关闭网页或者关闭浏览器时，全局执行环境会被销毁。</li>\\n<li>加载文件：完成js引擎分析它的语法与词法是否合法，如果合法进入预编译</li>\\n<li>预编译：在预编译的过程中，浏览器会寻找全局变量声明，把它作为window的属性加入到window对象中，并给变量赋值为'undefined'；寻找全局函数声明，把它作为window的方法加入到window对象中，并将函数体赋值给他（匿名函数是不参与预编译的，因为它是变量）。而变量提升作为不合理的地方在ES6中已经解决了，函数提升还存在。</li>\\n<li>解释执行：执行到变量就赋值，如果变量没有被定义，也就没有被预编译直接赋值，在ES5非严格模式下这个变量会成为window的一个属性，也就是成为全局变量。string、int这样的值就是直接把值放在变量的存储空间里，object对象就是把指针指向变量的存储空间。函数执行，就将函数的环境推入一个环境的栈中，执行完成后再弹出，控制权交还给之前的环境。JS作用域其实就是这样的执行流机制实现的。</li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true}`);export{e as data};
