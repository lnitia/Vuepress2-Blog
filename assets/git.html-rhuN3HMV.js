import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as l,f as d}from"./app-0mkQjek1.js";const i="/assets/1722867749167-b95JFF4B.png",a={},r=d('<h1 id="git命令" tabindex="-1"><a class="header-anchor" href="#git命令" aria-hidden="true">#</a> Git命令</h1><p>工作区 - 暂存区 - 本地仓库 - 远程仓库</p><p>add\\commit\\push</p><p>pull\\clone\\checkout</p><p><img src="'+i+'" alt="1722867749167" loading="lazy"></p><p>branch-创建or列出or删除(-d)分支\\checkout-切换分支or放弃修改\\merge-合并分支\\rebase-改变基底，变成一条线</p><p>reset-回退版本(后面提交的版本会删除)\\revert-反做(修改之前版本不影响已提交版本)</p><p><strong>git clone、fetch</strong>、<strong>pull</strong>的区别：</p><ol><li>git clone：用于拷贝远程仓库到本地，复制下来是整个版本库</li><li>git fetch：相当于是从远程获取最新版本的代码到本地，不会自动合并</li><li>git pull：相当于是从远程获取最新版本并merge到本地，git pull = git fetch + git merge</li></ol><h3 id="创建仓库命令" tabindex="-1"><a class="header-anchor" href="#创建仓库命令" aria-hidden="true">#</a> 创建仓库命令</h3><table><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>git init</code></td><td style="text-align:left;">初始化仓库，在当前目录新建一个Git代码库，基本上是创建一个具有 <code>objects</code>，<code>refs/head</code>，<code>refs/tags</code>和模板文件的 <code>.git</code>目录。</td></tr><tr><td style="text-align:left;"><code>git clone</code>[url]</td><td style="text-align:left;">拷贝一份<strong>远程仓库</strong> ，也就是下载一个项目和它的整个代码历史。</td></tr></tbody></table><h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h3><table><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>git config --list</code></td><td style="text-align:left;">显示当前的<strong>Git配置</strong></td></tr><tr><td style="text-align:left;">git config -e [--global]</td><td style="text-align:left;">编辑Git配置文件。</td></tr><tr><td style="text-align:left;">git config [--global] user.name &quot;[name]&quot;``git config [--global] user.email &quot;[email address]&quot;</td><td style="text-align:left;">设置提交代码时的<strong>用户信息</strong></td></tr></tbody></table><h3 id="增加-删除文件" tabindex="-1"><a class="header-anchor" href="#增加-删除文件" aria-hidden="true">#</a> 增加 / 删除文件</h3><table><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>git add [file1] [file2] ...</code></td><td style="text-align:left;">添加<strong>指定文件</strong>到暂存区</td></tr><tr><td style="text-align:left;">git add [dir]</td><td style="text-align:left;">添加<strong>指定目录</strong>到暂存区，包括子目录</td></tr><tr><td style="text-align:left;">git add .</td><td style="text-align:left;">添加当前目录的<strong>所有文件</strong>到暂存区</td></tr><tr><td style="text-align:left;">git add -p</td><td style="text-align:left;">添加每个变化前，都会要求确认`` 对于同一个文件的多处变化，可以实现<strong>分次提交</strong></td></tr><tr><td style="text-align:left;">git rm [file1] [file2] ...</td><td style="text-align:left;"><strong>删除</strong>工作区文件，并且将这次删除放入暂存区</td></tr><tr><td style="text-align:left;">git rm --cached [file]</td><td style="text-align:left;">停止追踪指定文件，但该文件会保留在工作区</td></tr><tr><td style="text-align:left;">git mv [file-original] [file-renamed]</td><td style="text-align:left;"><strong>改名</strong>文件，并且将这个改名放入暂存区</td></tr></tbody></table><h3 id="代码提交" tabindex="-1"><a class="header-anchor" href="#代码提交" aria-hidden="true">#</a> 代码提交</h3><table><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>git commit -m [message]</code></td><td style="text-align:left;">提交暂存区到仓库区</td></tr><tr><td style="text-align:left;">git commit [file1] [file2] ... -m [message]</td><td style="text-align:left;">提交暂存区的<strong>指定文件</strong>到仓库区</td></tr><tr><td style="text-align:left;">git commit -a</td><td style="text-align:left;">提交工作区<strong>自上次commit之后</strong>的变化，直接到仓库区</td></tr><tr><td style="text-align:left;">git commit -v</td><td style="text-align:left;">提交时显示<strong>所有diff信息</strong></td></tr><tr><td style="text-align:left;">git commit --amend -m [message]</td><td style="text-align:left;">使用一次新的commit，替代上一次提交``如果代码没有任何新变化，则用来改写上一次commit的提交信息</td></tr><tr><td style="text-align:left;">git commit --amend [file1] [file2] ...</td><td style="text-align:left;"><strong>重做上一次commit</strong> ，并包括指定文件的新变化</td></tr></tbody></table><h3 id="分支" tabindex="-1"><a class="header-anchor" href="#分支" aria-hidden="true">#</a> 分支</h3><table><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">git branch</td><td style="text-align:left;">列出所有<strong>本地分支</strong></td></tr><tr><td style="text-align:left;">git branch -r</td><td style="text-align:left;">列出所有<strong>远程分支</strong></td></tr><tr><td style="text-align:left;">git branch -a</td><td style="text-align:left;">列出所有本地分支和<strong>远程分支</strong></td></tr><tr><td style="text-align:left;">git branch [branch-name]</td><td style="text-align:left;">新建一个分支，但依然停留在当前分支</td></tr><tr><td style="text-align:left;">git checkout -b [branch]</td><td style="text-align:left;">新建一个分支，并切换到该分支</td></tr><tr><td style="text-align:left;">git branch [branch] [commit]</td><td style="text-align:left;">新建一个分支，指向指定commit</td></tr><tr><td style="text-align:left;">git branch --track [branch] [remote-branch]</td><td style="text-align:left;">新建一个分支，与指定的远程分支建立追踪关系</td></tr><tr><td style="text-align:left;">git checkout [branch-name]</td><td style="text-align:left;">切换到指定分支，并更新工作区</td></tr><tr><td style="text-align:left;">git checkout -</td><td style="text-align:left;"><strong>切换</strong>到上一个分支</td></tr><tr><td style="text-align:left;">git branch --set-upstream [branch] [remote-branch]</td><td style="text-align:left;">建立追踪关系，在现有分支与指定的远程分支之间</td></tr><tr><td style="text-align:left;">git merge [branch]</td><td style="text-align:left;"><strong>合并</strong>指定分支到当前分支</td></tr><tr><td style="text-align:left;">git cherry-pick [commit]</td><td style="text-align:left;">选择一个commit，合并进当前分支</td></tr><tr><td style="text-align:left;">git branch -d [branch-name]</td><td style="text-align:left;"><strong>删除分支</strong></td></tr><tr><td style="text-align:left;">git push origin --delete [branch-name]<code>或</code>git branch -dr [remote/branch]</td><td style="text-align:left;"><strong>删除远程分支</strong></td></tr></tbody></table><h3 id="标签" tabindex="-1"><a class="header-anchor" href="#标签" aria-hidden="true">#</a> 标签</h3><table><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">git tag</td><td style="text-align:left;">列出所有tag</td></tr><tr><td style="text-align:left;">git tag [tag]</td><td style="text-align:left;">新建一个tag在当前commit</td></tr><tr><td style="text-align:left;">git tag [tag] [commit]</td><td style="text-align:left;">新建一个tag在指定commit</td></tr><tr><td style="text-align:left;">git tag -d [tag]</td><td style="text-align:left;">删除<strong>本地tag</strong></td></tr><tr><td style="text-align:left;">git push origin :refs/tags/[tagName]</td><td style="text-align:left;">删除<strong>远程tag</strong></td></tr><tr><td style="text-align:left;">git show [tag]</td><td style="text-align:left;">查看tag信息</td></tr><tr><td style="text-align:left;">git push [remote] [tag]</td><td style="text-align:left;">提交<strong>指定tag</strong></td></tr><tr><td style="text-align:left;">git push [remote] --tags</td><td style="text-align:left;">提交<strong>所有tag</strong></td></tr><tr><td style="text-align:left;">git checkout -b [branch] [tag]</td><td style="text-align:left;">新建一个分支，指向某个tag</td></tr></tbody></table><h3 id="查看信息和历史" tabindex="-1"><a class="header-anchor" href="#查看信息和历史" aria-hidden="true">#</a> 查看信息和历史</h3><table><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">git status</td><td style="text-align:left;">显示有变更的文件</td></tr><tr><td style="text-align:left;">git log</td><td style="text-align:left;">显示当前分支的版本历史</td></tr><tr><td style="text-align:left;">git log --stat</td><td style="text-align:left;">显示commit历史，以及每次commit发生变更的文件</td></tr><tr><td style="text-align:left;">git log -S [keyword]</td><td style="text-align:left;">搜索提交历史，根据关键词</td></tr><tr><td style="text-align:left;">git log [tag] HEAD --pretty=format:%s</td><td style="text-align:left;">显示某个commit之后的所有变动，每个commit占据一行</td></tr><tr><td style="text-align:left;">git log [tag] HEAD --grep feature</td><td style="text-align:left;">显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</td></tr><tr><td style="text-align:left;">git log --follow [file]<code>或</code>git whatchanged [file]</td><td style="text-align:left;">显示某个文件的版本历史，包括文件改名</td></tr><tr><td style="text-align:left;">git log -p [file]</td><td style="text-align:left;">显示指定文件相关的每一次diff</td></tr><tr><td style="text-align:left;">git log -5 --pretty --oneline</td><td style="text-align:left;">显示过去5次提交</td></tr><tr><td style="text-align:left;">git shortlog -sn</td><td style="text-align:left;">显示所有提交过的用户，按提交次数排序</td></tr><tr><td style="text-align:left;">git blame [file]</td><td style="text-align:left;">显示指定文件是什么人在什么时间修改过</td></tr><tr><td style="text-align:left;">git diff</td><td style="text-align:left;">显示<strong>暂存区和工作区</strong>的差异</td></tr><tr><td style="text-align:left;">git diff --cached [file]</td><td style="text-align:left;">显示<strong>暂存区和上一个commit</strong>的差异</td></tr><tr><td style="text-align:left;">git diff HEAD</td><td style="text-align:left;">显示<strong>工作区与当前分支最新commit之间</strong>的差异</td></tr><tr><td style="text-align:left;">git diff [first-branch]...[second-branch]</td><td style="text-align:left;">显示<strong>两次提交之间</strong>的差异</td></tr><tr><td style="text-align:left;">git diff --shortstat &quot;@{0 day ago}&quot;</td><td style="text-align:left;"><strong>显示今天你写了多少行代码</strong></td></tr><tr><td style="text-align:left;">git show [commit]</td><td style="text-align:left;">显示某次提交的元数据和内容变化</td></tr><tr><td style="text-align:left;">git show --name-only [commit]</td><td style="text-align:left;">显示某次提交发生变化的文件</td></tr><tr><td style="text-align:left;">git show [commit]:[filename]</td><td style="text-align:left;">显示某次提交时，某个文件的内容</td></tr><tr><td style="text-align:left;">git reflog</td><td style="text-align:left;">显示当前分支的最近几次提交</td></tr></tbody></table><h3 id="远程同步" tabindex="-1"><a class="header-anchor" href="#远程同步" aria-hidden="true">#</a> 远程同步</h3><table><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">git fetch [remote]</td><td style="text-align:left;">下载远程仓库的所有变动（<strong>远程新增或删除分支都能显示</strong> ）</td></tr><tr><td style="text-align:left;">git remote -v</td><td style="text-align:left;">显示<strong>所有远程仓库</strong></td></tr><tr><td style="text-align:left;">git config [--global] user.name &quot;[name]&quot;``git config [--global] user.email &quot;[email address]&quot;</td><td style="text-align:left;">设置提交代码时的用户信息</td></tr><tr><td style="text-align:left;">git remote show [remote]</td><td style="text-align:left;">显示某个远程仓库的信息</td></tr><tr><td style="text-align:left;">git remote add [shortname] [url]</td><td style="text-align:left;">增加一个新的远程仓库，并命名</td></tr><tr><td style="text-align:left;">git pull [remote] [branch]</td><td style="text-align:left;">取回远程仓库的变化，并与本地分支合并</td></tr><tr><td style="text-align:left;">git push [remote] [branch]</td><td style="text-align:left;">上传本地指定分支到远程仓库</td></tr><tr><td style="text-align:left;">git push [remote] --force</td><td style="text-align:left;">强行推送当前分支到远程仓库，即使有冲突</td></tr><tr><td style="text-align:left;">git push [remote] --all</td><td style="text-align:left;">推送所有分支到远程仓库</td></tr></tbody></table><h3 id="撤销" tabindex="-1"><a class="header-anchor" href="#撤销" aria-hidden="true">#</a> 撤销</h3><table><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>git checkout [file]</code></td><td style="text-align:left;">恢复暂存区的指定文件到工作区</td></tr><tr><td style="text-align:left;">git checkout [commit] [file]</td><td style="text-align:left;">恢复某个commit的指定文件到暂存区和工作区</td></tr><tr><td style="text-align:left;">git checkout .</td><td style="text-align:left;">恢复暂存区的所有文件到工作区</td></tr><tr><td style="text-align:left;">git reset [file]</td><td style="text-align:left;">重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</td></tr><tr><td style="text-align:left;">git reset --hard</td><td style="text-align:left;">重置暂存区与工作区，与上一次commit保持一致</td></tr><tr><td style="text-align:left;">git reset [commit]</td><td style="text-align:left;">重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</td></tr><tr><td style="text-align:left;">git reset --hard [commit]</td><td style="text-align:left;">重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</td></tr><tr><td style="text-align:left;">git reset --keep [commit]</td><td style="text-align:left;">重置当前HEAD为指定commit，但保持暂存区和工作区不变</td></tr><tr><td style="text-align:left;">git revert [commit]</td><td style="text-align:left;">新建一个commit，用来撤销指定commit``后者的所有变化都将被前者抵消，并且应用到当前分支</td></tr><tr><td style="text-align:left;">git stash</td><td style="text-align:left;">暂时将未提交的变化移除，稍后再移入</td></tr><tr><td style="text-align:left;">git stash pop</td><td style="text-align:left;">暂时将未提交的变化移除，稍后再移入</td></tr></tbody></table><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h3><table><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">git archive</td><td style="text-align:left;">生成一个可供发布的压缩包</td></tr><tr><td style="text-align:left;">git repack</td><td style="text-align:left;">打包未归档文件</td></tr><tr><td style="text-align:left;">git count-objects</td><td style="text-align:left;">计算解包的对象数量</td></tr><tr><td style="text-align:left;">git help <code>或</code>git --help</td><td style="text-align:left;"><strong>Git帮助</strong> ，查看git相关命令，如果想看某个特定命令的具体细节，可使用git [命令] --help,如 <strong>git commit --help</strong> 表示查看提交相关命令的帮助</td></tr></tbody></table>',29),g=[r];function n(s,o){return e(),l("div",null,g)}const x=t(a,[["render",n],["__file","git.html.vue"]]);export{x as default};
