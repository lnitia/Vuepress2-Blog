import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as s,f as t}from"./app-0SoiKzJB.js";const e="/assets/1721808365693-h2bQdZns.png",p="/assets/1721808389258-GL76-MXl.png",o={},c=t('<h1 id="阿里飞猪一面" tabindex="-1"><a class="header-anchor" href="#阿里飞猪一面" aria-hidden="true">#</a> 阿里飞猪一面</h1><h2 id="阿里飞猪实习一面-笔试" tabindex="-1"><a class="header-anchor" href="#阿里飞猪实习一面-笔试" aria-hidden="true">#</a> 阿里飞猪实习一面+笔试</h2><p>飞猪旅行交通相关方面，技术栈偏react node，主要是移动端，h5，小程序，中后台</p><h3 id="_1-自我介绍" tabindex="-1"><a class="header-anchor" href="#_1-自我介绍" aria-hidden="true">#</a> 1. 自我介绍</h3><h3 id="_2-为什么选择前端岗位" tabindex="-1"><a class="header-anchor" href="#_2-为什么选择前端岗位" aria-hidden="true">#</a> 2. 为什么选择前端岗位</h3><h3 id="_3-get方法长度限制的原因" tabindex="-1"><a class="header-anchor" href="#_3-get方法长度限制的原因" aria-hidden="true">#</a> 3. get方法长度限制的原因</h3><p>http请求本身对get请求数据长度没有限制，url限制取决于浏览器和web服务器设置的。</p><h3 id="_4-get和post请求的区别" tabindex="-1"><a class="header-anchor" href="#_4-get和post请求的区别" aria-hidden="true">#</a> 4. get和post请求的区别</h3><p>用途：get一般为获取数据，post发送数据</p><p>数据：get数据放在url上，post放在请求体中</p><p>编码：get为url编码，post不限</p><p>底层：get发送一个tcp包，header和数据一起发送，post发送2个tcp包，先header后数据</p><p>书签历史：get可做书签，有历史记录，可回退，post不可做书签，历史记录，回退需重新提交数据</p><h3 id="_5-http状态码" tabindex="-1"><a class="header-anchor" href="#_5-http状态码" aria-hidden="true">#</a> 5. http状态码</h3><p>1xx（状态进行码）</p><p>2xx（请求成功码）：200请求成功</p><p>3xx（重定向状态码）：301客户端资源永久转移到其他url</p><p>4xx（客户端错误状态码）：404资源不存在，403服务器禁止访问</p><p>5xx（服务器错误码）：500服务器内部错误</p><h3 id="_6-网络osi模型" tabindex="-1"><a class="header-anchor" href="#_6-网络osi模型" aria-hidden="true">#</a> 6. 网络osi模型</h3><p><strong>osi</strong>：应用层-表示层-会话层-传输层-网络层-数据链路层-物理层</p><p><strong>tcp</strong>：</p><p>应用层(http,dns,ftp)：dns解析</p><p>传输层(tcp,udp)：寻址端口</p><p>网络层(ip,igmp)：路由选择、拥塞控制</p><p>网络接口层（数据链路层-物理层）：流量控制、差错控制、链路管理（可靠性）</p><p><img src="'+e+`" alt="1721808365693" loading="lazy"></p><h3 id="_7-块级元素和行内元素的区别" tabindex="-1"><a class="header-anchor" href="#_7-块级元素和行内元素的区别" aria-hidden="true">#</a> 7. 块级元素和行内元素的区别</h3><p>块级元素：独占一行、可设置宽高上下边距，未设置则为父元素宽度</p><p>行内元素：不独占一行，自身内容决定空间</p><p>块级元素：div，p，section，nav，ul，li，img， form</p><p>行内元素：a label input em q strong span</p><h3 id="_8-浏览器乱码原因" tabindex="-1"><a class="header-anchor" href="#_8-浏览器乱码原因" aria-hidden="true">#</a> 8. 浏览器乱码原因</h3><p>主要原因：编码不一致。比如源代码和里面的中文字编码不一致，页面编码和服务器传来的程序编码不一致</p><p>解决方法：使用软件编辑代码，数据库和页面编码不一致要转码，浏览器设置编码类型等</p><h3 id="_9-浏览器持久化缓存-cookie-webstorage-indexdb" tabindex="-1"><a class="header-anchor" href="#_9-浏览器持久化缓存-cookie-webstorage-indexdb" aria-hidden="true">#</a> 9. 浏览器持久化缓存（cookie，webStorage，indexDB）</h3><p>cookie：用于存储用户信息标识，放在请求中，在客户端与服务端传递。</p><p>webStorage：浏览器本地存储</p><p>indexDB：浏览器非关系数据库</p><p>区别：</p><p>存储量：cookie-4k，webStorage-5M（字符串），indexDB-更大（更多类型）</p><p>过期时间：cookie有过期时间，到了才过期，没过期时间，关闭窗口才过期；sessionStorage关闭窗口过期；localStorage不主动删除不过期；indexDB不主动删除不过期</p><p>安全性：cookie不安全，不设置httponly容易受到跨站请求伪造；但对于容易受到跨站脚本攻击的网站，用webstorage也不安全。</p><p>补充：localForage——智能存储方案，封装indexDB的异步操作api。优雅降级indexedDB -&gt; WebSQL -&gt; localStorage</p><h3 id="_10-在页面上实现圆形点击区" tabindex="-1"><a class="header-anchor" href="#_10-在页面上实现圆形点击区" aria-hidden="true">#</a> 10. 在页面上实现圆形点击区</h3><ol><li><p>css法</p><p>border-radius:50%</p></li><li><p>map法</p><p>img标签中用usemap映射map标签里的area标签，area标签中将shape属性设置为circle</p></li></ol><h3 id="_11-css实现圆形" tabindex="-1"><a class="header-anchor" href="#_11-css实现圆形" aria-hidden="true">#</a> 11. css实现圆形</h3><p>border-radius:50%</p><h3 id="_12-画0-5px的线" tabindex="-1"><a class="header-anchor" href="#_12-画0-5px的线" aria-hidden="true">#</a> 12. 画0.5px的线</h3><ol><li>meta viewport中将scale属性设为0.5px</li><li>采用border-image</li><li>css中transform：scaleY(0.5)</li></ol><h3 id="_13-bfc理解" tabindex="-1"><a class="header-anchor" href="#_13-bfc理解" aria-hidden="true">#</a> 13. BFC理解</h3><p>BFC: 块级格式化上下文。保证bfc里的元素与外部元素互不影响</p><p>可解决外边距塌陷、清除浮动等问题</p><p>形成BFC的方法有：overflow: hidden；position: absolute/fixed；float: 非none；display: flex</p><h3 id="_14-事件委托和事件代理" tabindex="-1"><a class="header-anchor" href="#_14-事件委托和事件代理" aria-hidden="true">#</a> 14. 事件委托和事件代理</h3><p>事件委托/代理：基于事件冒泡，父元素统一处理点击子元素时触发的事件</p><h3 id="_15-e-target和e-currenttarget属性区别" tabindex="-1"><a class="header-anchor" href="#_15-e-target和e-currenttarget属性区别" aria-hidden="true">#</a> 15. e.target和e.currentTarget属性区别</h3><p>target：被点击的元素li （触发事件的元素）</p><p>currentTarget：执行当前函数所绑定的元素ul （绑定事件的元素）</p><p>parentTarget：被点击的元素的父元素</p><h3 id="_16-use-strict作用" tabindex="-1"><a class="header-anchor" href="#_16-use-strict作用" aria-hidden="true">#</a> 16. use strict作用</h3><p>严格模式：规范js语法，未定义的变量不能用</p><h3 id="_17-数组遍历方法和跳出方法" tabindex="-1"><a class="header-anchor" href="#_17-数组遍历方法和跳出方法" aria-hidden="true">#</a> 17. 数组遍历方法和跳出方法</h3><ol><li>for循环+break</li><li>foreach+try...catch：找到目标值，抛出错误</li><li>.every+return false</li></ol><h3 id="_18-js设计模式-单例模式、观察者模式、订阅模式" tabindex="-1"><a class="header-anchor" href="#_18-js设计模式-单例模式、观察者模式、订阅模式" aria-hidden="true">#</a> 18. js设计模式（单例模式、观察者模式、订阅模式）</h3><p>单例模式：一个类只能new一个实例</p><p>观察者模式：观察者（订阅和取消订阅）和被观察者（维护观察者列表和分发消息）=》被观察者直接将观察者加入到自己的列表，触发就是遍历列表执行观察者相应的方法</p><p>订阅模式：订阅者-订阅中心-被订阅者，由订阅中心来管理订阅和发送</p><h3 id="_19-react事件与原生html事件的区别" tabindex="-1"><a class="header-anchor" href="#_19-react事件与原生html事件的区别" aria-hidden="true">#</a> 19. react事件与原生html事件的区别</h3><p>命名方式：原生是全小写，react是驼峰式</p><p>接受参数：原生是字符串，react是函数</p><p>默认事件阻止：原生可以通过 <code>e.preventDefault()</code>和 <code>return false</code> 来阻止默认事件；react通过 <code>e.preventDefault()</code>阻止默认事件</p><h3 id="_20-jsx编译后什么样" tabindex="-1"><a class="header-anchor" href="#_20-jsx编译后什么样" aria-hidden="true">#</a> 20. jsx编译后什么样</h3><p>元素=&gt;React.createElement(&#39;元素名&#39;，null，元素里的内容)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">FnComp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token constant">A</span> Function Component<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token comment">// 被编译为</span>
  <span class="token keyword">return</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;A Function Component&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ClassComp</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span><span class="token constant">A</span> Class Component<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>FnComp<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token keyword">return</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;h1&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;A Class Component&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>FnComp<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_21-react父子通信和隔代通信" tabindex="-1"><a class="header-anchor" href="#_21-react父子通信和隔代通信" aria-hidden="true">#</a> 21. react父子通信和隔代通信</h3><p>1.父传子props，ref</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// props</span>
<span class="token number">1.</span> 在子组件标签上定义 <span class="token operator">&lt;</span>Son num<span class="token operator">=</span><span class="token punctuation">{</span>num<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Son<span class="token operator">&gt;</span>
<span class="token number">2.</span> 在子组件内部的函数式参数上写上实参props，直接调用 props<span class="token punctuation">.</span>num
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.子传父：父组件中定义一个函数,然后传到子组件后进行调用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>父组件<span class="token operator">&lt;</span>Son num<span class="token operator">=</span><span class="token punctuation">{</span>num<span class="token punctuation">}</span> fn<span class="token operator">=</span><span class="token punctuation">{</span>fn<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Son<span class="token operator">&gt;</span> <span class="token comment">//将函数传入子组件</span>
子组件<span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>fn<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span> <span class="token comment">//子组件内调用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>3.兄弟组件=&gt;状态提升</p><p>4.跨组件context和redux</p><p>（1）createContext=&gt;Provider和Consumer</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 复用性变差</span>
<span class="token keyword">const</span> MyContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span>Provider<span class="token punctuation">,</span>Consumer<span class="token punctuation">}</span> <span class="token operator">=</span> MyContext
发送：<span class="token operator">&lt;</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>username<span class="token punctuation">,</span>age<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token constant">B</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">&gt;</span>
接受<span class="token operator">&lt;</span>Consumer<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token punctuation">.</span>username<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,年龄是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Consumer<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）redux</p><h3 id="_22-虚拟dom理解" tabindex="-1"><a class="header-anchor" href="#_22-虚拟dom理解" aria-hidden="true">#</a> 22. 虚拟dom理解</h3><p>用 JavaScript 对象结构表示 DOM 树的结构；将查找dom元素变为查找js属性。记录新旧两数的差异，再应用到真正的dom树上</p><h3 id="_23-原生操作dom的优缺点" tabindex="-1"><a class="header-anchor" href="#_23-原生操作dom的优缺点" aria-hidden="true">#</a> 23. 原生操作dom的优缺点</h3><p>优点可能是更加灵活，毕竟更偏近底层，相对于框架着重普适性，原生dom操作更适合一些难实现的逻辑。</p><p>缺点就是影响性能。操作dom一定会导致回流重绘，影响性能</p><h3 id="_24-commonjs和es6模块加载原理" tabindex="-1"><a class="header-anchor" href="#_24-commonjs和es6模块加载原理" aria-hidden="true">#</a> 24. commonJS和ES6模块加载原理</h3><p>commonJs：导出module.export;导入require</p><p>ES6：导出export；导入import</p><p>commonJS为<strong>值的拷贝</strong>，模块内的变化不影响输出的值；es6是<strong>值的引用</strong>，动态的，会影响输出的值</p><p>commonJS是<strong>运行时加载</strong>，输入时会加载整个模块（生成一个对象），es6是<strong>编译时加载</strong>，可加载指定输出值</p><h3 id="_25-存在循环环状依赖-哪种更好" tabindex="-1"><a class="header-anchor" href="#_25-存在循环环状依赖-哪种更好" aria-hidden="true">#</a> 25. 存在循环环状依赖，哪种更好</h3><p>两者都是：一旦某个模块被循环加载，就只输出该模块已经执行的部分，没有执行的部分不输出。</p><p>但是：commonJS是运行时加载，ES6是编译时加载</p><p>循环引用要解决的无非是两个问题，保证不进入死循环以及输出什么值。</p><ul><li>CommonJS借助模块缓存，遇到require函数会先检查是否有缓存，已经有的则不会进入执行，在模块缓存中还记录着导出的变量的拷贝值；</li><li>ES Module借助模块地图，已经进入过的模块标注为获取中，遇到import语句会去检查这个地图，已经标注为获取中的则不会进入，地图中的每一个节点是一个模块记录，上面有导出变量的内存地址，导入时会做一个连接——即指向同一块内存。</li></ul><h3 id="_26-webpack工作流程" tabindex="-1"><a class="header-anchor" href="#_26-webpack工作流程" aria-hidden="true">#</a> 26. webpack工作流程</h3><p>webpack将js和非js语言打包为浏览器可以执行的语言。</p><p>流程：webpack脚手架启动=&gt;载入核心模块，创建编译对象=&gt;使用编译对象编译项目=&gt;从入口文件entry<strong>解析模块依赖</strong>=&gt;将每个模块将给loader处理=&gt;合并loader处理结果，输出为dist文件夹</p><h3 id="_27-loader和plugin的作用与原理与区别" tabindex="-1"><a class="header-anchor" href="#_27-loader和plugin的作用与原理与区别" aria-hidden="true">#</a> 27. loader和plugin的作用与原理与区别</h3><p>loader：模块转换器，使<strong>webpack可以加载解析非js代码</strong>，如css-loader（加载css），vue-loader（加载vue），sass-loader（sass=&gt;css），style-loader（css注入js中），url-loader等</p><p>plugin：webpack构建流程中<strong>注入扩展逻辑</strong>，如HtmlWebpackPlugin，CleanWebpackPlugin（自动清理输出文件夹），PurgeCSSPlugin（删除没有引用到的选择器及其样式），CompressionPlugin（传输压缩，gzip），HotModuleReplacementPlugin（热更新）</p><p>区别：loader本质为函数，对接受的非js内容进行转换，plugin是插件，扩展webpack功能，通过webpack提供的api改变输出结果</p><h3 id="_28-热更新实现原理" tabindex="-1"><a class="header-anchor" href="#_28-热更新实现原理" aria-hidden="true">#</a> 28. 热更新实现原理</h3><p>刷新我们一般分为两种：</p><ul><li>一种是页面刷新，不保留页面状态，就是简单粗暴，直接 <code>window.location.reload()</code>。</li><li>另一种是基于 <code>WDS (Webpack-dev-server)</code>的模块热替换，只需要<strong>局部刷新页面上</strong>发生变化的模块，同时可以<strong>保留当前的页面状态</strong>，比如复选框的选中状态、输入框的输入等。</li></ul><p><strong>原理</strong>：webpack通过watch可以监测代码的变化；webpack-dev-middleware可以调用webpack暴露的API检测代码变化，并且告诉webpack将代码保存到内存中；webpack-dev-middleware通过sockjs和webpack-dev-server/client建立webSocket长连接，将webpack打包阶段的各个状态告知浏览器端，最重要的是新模块的hash值。webpack-dev-server/client通过webpack/hot/dev-server中的HMR去请求新的更新模块，HMR主要借助JSONP。先拿到hash的json文件，然后根据hash拼接出更新的文件js，然后HotModulePlugin对比新旧模块和模块依赖完成更新。</p><p>总结：webpack检测代码变化=&gt;中间件通过sockjs与webpack-dev-server/client建立websocket连接，并告诉浏览器打包的各阶段状态，特别是新模块hash值=&gt;webpack-dev-server/client通过热模块替换请求新模块=&gt;热模块插件进行新旧模块对比并更新</p><p><strong>简洁</strong>：webpack-dev-server搭配HotModuleReplacementPlugin 实现热更新。webpack开发服务器与客户端建立websocket连接，传递打包信息特别是新模块hash值。热模块替换插件进行新旧模块对比更新。</p><h3 id="_29-babel的作用" tabindex="-1"><a class="header-anchor" href="#_29-babel的作用" aria-hidden="true">#</a> 29. babel的作用</h3><p>高版本js转化为低版本js语言。</p><p>高版本js（解析）=&gt;高版本AST（转换）=&gt;低版本A（生成）=&gt;低版本js</p><h3 id="_30-ssr的概念" tabindex="-1"><a class="header-anchor" href="#_30-ssr的概念" aria-hidden="true">#</a> 30. SSR的概念</h3><p>SSR：服务端发送页面代码给前端渲染。<code>Node.js</code> 使用 <code>ejs</code> 模板引擎输出一个界面这就是服务端渲染。每次访问一个路由都是请求后台服务，重新加载文件渲染界面。</p><p>优点：更好的首屏渲染，更好的SEO</p><p>缺点：服务端压力大，开发不方便</p><h3 id="_31-怎么做到ssr同构渲染" tabindex="-1"><a class="header-anchor" href="#_31-怎么做到ssr同构渲染" aria-hidden="true">#</a> 31. 怎么做到ssr同构渲染</h3><p><strong>同构：</strong> 采用一套代码，构建双端（server 和 client）逻辑，最大限度的重用代码，不用维护两套代码。</p><p>路由同构，数据同构，渲染同构</p><p>客户端：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>ReactDom<span class="token punctuation">.</span><span class="token function">hydrate</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Home<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ReactDom.render(&lt;Home/&gt;,document.getElementById(&quot;root&quot;));</span>
<span class="token comment">// 与 render() 相同，但它用于在 ReactDOMServer 渲染的容器中对 HTML 的内容进行 hydrate 操作。 会尝试在已有标记上绑定事件监听器。会保留该节点且只进行事件处理绑定</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务端：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">&#39;public&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 开启一个静态资源服务，监听 public 目录，还记得客户端的打包文件就放到了 public 目录了把，这里通过监听，我们就可以 localhost:3000/index.js 访问该静态资源</span>
<span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token function">renderToString</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Home <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 把 React 组件通过 renderToString 方法生成 HTML</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">    &lt;!doctype html&gt;    &lt;html lang=&quot;en&quot;&gt;      &lt;head&gt;          &lt;meta charset=&quot;UTF-8&quot;&gt;          &lt;meta name=&quot;viewport&quot;                content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;          &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;          &lt;title&gt;React SSR&lt;/title&gt;      &lt;/head&gt;      &lt;body&gt;        &lt;div id=&quot;root&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>content<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/div&gt;        &lt;script src=&quot;/index.js&quot;&gt;&lt;/script&gt;        &lt;/body&gt;    &lt;/html&gt;  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 当用户访问 localhost:3000 时便会返回 res.send 中的 HTML 内容，该 HTML 中把 React 生成的 HTML 片段也插入进去一同返回给用户了，这样就实现了服务端渲染。</span>
<span class="token comment">// 通过 &lt;script src=&quot;/index.js&quot;&gt;&lt;/script&gt; 这段脚本加载了客户端打包后的 React 代码，这样就实现了客户端渲染，因此一个简单同构项目就这样实现了。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_32-git-fetch和pull的区别" tabindex="-1"><a class="header-anchor" href="#_32-git-fetch和pull的区别" aria-hidden="true">#</a> 32. git fetch和pull的区别</h3><p>git fetch: 远程仓库=&gt;本地仓库，若需放到工作目录需git merge</p><p>git pull: 远程仓库=&gt;工作目录</p><h3 id="_33-git-merge和rebase的区别" tabindex="-1"><a class="header-anchor" href="#_33-git-merge和rebase的区别" aria-hidden="true">#</a> 33. git merge和rebase的区别</h3><p>git merge：次分支末端直接连接到主分支末端（分支一多，合并后的线很复杂）</p><p>git rebase：以次分支和主分支公共节点为界，次分支之后的commit直接合并到公共节点后，再在后面接主分支公共节点后的commit。注意后面的commit只是修改的内容一样，但commit号都变了。好处是只保留一条线，简洁</p><p><img src="`+p+`" alt="1721808389258" loading="lazy"></p><h3 id="_34-git-revert和reset" tabindex="-1"><a class="header-anchor" href="#_34-git-revert和reset" aria-hidden="true">#</a> 34. git revert和reset</h3><p>git revert：提交一个新的回退commit，来取消最新的一次commit（记录仍在）</p><p>git reset：直接撤销最新的commit（记录也没了）</p><h3 id="_35-单元测试相关" tabindex="-1"><a class="header-anchor" href="#_35-单元测试相关" aria-hidden="true">#</a> 35. 单元测试相关</h3><p>从前端角度来看，单元测试就是对一个函数、一个组件、一个类做的测试.</p><p>测试框架<strong>Jest</strong></p><p>测试文件名与要测试的文件名相同，后缀为 <code>.test.js</code>，放在<strong>test</strong>文件夹中</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// package.json</span>
<span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;jest&quot;</span><span class="token punctuation">,</span>
 <span class="token punctuation">}</span>

<span class="token comment">// main.js</span>
<span class="token keyword">function</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> a <span class="token operator">!=</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&#39;参数必须为数值型&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span>a
    <span class="token keyword">return</span> a
<span class="token punctuation">}</span>

<span class="token comment">// main.test.js</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;abs&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toThrow</span><span class="token punctuation">(</span>TypeError<span class="token punctuation">)</span> <span class="token comment">// 类型错误</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行npm run test开始测试</p><h3 id="_36-项目中的技术难点" tabindex="-1"><a class="header-anchor" href="#_36-项目中的技术难点" aria-hidden="true">#</a> 36. 项目中的技术难点</h3><p>第一个项目使用java原生开发的移动端，需要自己编写铁路舒适度评价指标的算法（傅里叶变换，sperling指标算法，a计权算法）</p><p>第二个项目比较简单，主要是第一次全栈，摸索花时间，在实现草稿箱功能、完成图片上传的前后端功能花的事件相对多</p><p>第三个项目难点有三个：1.三维模型加载慢 2.轨道预览图可视化 3.视频流上的鼠标交互</p><h3 id="_37-怎么学的前端" tabindex="-1"><a class="header-anchor" href="#_37-怎么学的前端" aria-hidden="true">#</a> 37. 怎么学的前端</h3><ol><li>理论学习：视频（狂胜说、动力节点、黑马程序员），书（JavaScript高级程序设计、）</li><li>实战：练习git，css，html的网站，项目（大屏，仿写网易云程序，静态个人博客）</li><li>平时：逛git网站，平时零碎时间逛逛csdn、稀土掘金社区</li><li>请教</li></ol><h3 id="_38-有什么想问的" tabindex="-1"><a class="header-anchor" href="#_38-有什么想问的" aria-hidden="true">#</a> 38. 有什么想问的</h3><ol><li>对方的技术栈</li><li>自己有什么改进的地方</li><li>后续面试着重什么方面的考察</li></ol><h2 id="_39-笔试" tabindex="-1"><a class="header-anchor" href="#_39-笔试" aria-hidden="true">#</a> 39. 笔试</h2><p>笔试两道题比较简单</p><p>1.纯js实现数组扁平化</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">flatDeep</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			result <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">flatDeep</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">flatDeep</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>实现节流</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">trofn</span><span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> timer
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">tro</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>timer<span class="token punctuation">)</span><span class="token punctuation">{</span>
            timer <span class="token operator">=</span> <span class="token function">setTimeInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                timer <span class="token operator">=</span> <span class="token keyword">null</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>wait<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,157),i=[c];function l(r,u){return a(),s("div",null,i)}const h=n(o,[["render",l],["__file","FlyPigPre1.html.vue"]]);export{h as default};
