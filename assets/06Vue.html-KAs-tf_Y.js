const e=JSON.parse(`{"key":"v-5b4c2e1a","path":"/mymd/mianshi/mianshibaodian/06Vue.html","title":"Vue 面试专题","lang":"zh-CN","frontmatter":{"icon":"list","date":"2024-03-10T00:00:00.000Z","category":["面试"],"order":6,"editLink":false,"article":false,"description":"Vue 面试专题 「Vue2+Vue3」 的 62 个知识点 简述MVVM 什么是MVVM？ 视图模型双向绑定，是 Model-View-ViewModel的缩写，也就是把 MVC中的 Controller演变成 ViewModel。Model层代表数据模型，View代表UI组件，ViewModel是 View和 Model层的桥梁，数据会绑定到 viewModel层并自动将数据渲染到页面中，视图变化的时候会通知 viewModel层更新数据。以前是操作DOM结构更新视图，现在是 数据驱动视图。","head":[["meta",{"property":"og:url","content":"http://xlinwork.online/mymd/mianshi/mianshibaodian/06Vue.html"}],["meta",{"property":"og:site_name","content":"lnitia's blog"}],["meta",{"property":"og:title","content":"Vue 面试专题"}],["meta",{"property":"og:description","content":"Vue 面试专题 「Vue2+Vue3」 的 62 个知识点 简述MVVM 什么是MVVM？ 视图模型双向绑定，是 Model-View-ViewModel的缩写，也就是把 MVC中的 Controller演变成 ViewModel。Model层代表数据模型，View代表UI组件，ViewModel是 View和 Model层的桥梁，数据会绑定到 viewModel层并自动将数据渲染到页面中，视图变化的时候会通知 viewModel层更新数据。以前是操作DOM结构更新视图，现在是 数据驱动视图。"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-22T09:12:29.000Z"}],["meta",{"property":"article:author","content":"lnitia"}],["meta",{"property":"article:published_time","content":"2024-03-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-22T09:12:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Vue 面试专题\\",\\"description\\":\\"Vue 面试专题 「Vue2+Vue3」 的 62 个知识点 简述MVVM 什么是MVVM？ 视图模型双向绑定，是 Model-View-ViewModel的缩写，也就是把 MVC中的 Controller演变成 ViewModel。Model层代表数据模型，View代表UI组件，ViewModel是 View和 Model层的桥梁，数据会绑定到 viewModel层并自动将数据渲染到页面中，视图变化的时候会通知 viewModel层更新数据。以前是操作DOM结构更新视图，现在是 数据驱动视图。\\"}"]]},"headers":[{"level":3,"title":"简述MVVM","slug":"简述mvvm","link":"#简述mvvm","children":[]},{"level":3,"title":"Vue底层实现原理","slug":"vue底层实现原理","link":"#vue底层实现原理","children":[]},{"level":3,"title":"谈谈对vue生命周期的理解？","slug":"谈谈对vue生命周期的理解","link":"#谈谈对vue生命周期的理解","children":[]},{"level":3,"title":"computed与watch","slug":"computed与watch","link":"#computed与watch","children":[]},{"level":3,"title":"React/Vue 项目中 key 的作用","slug":"react-vue-项目中-key-的作用","link":"#react-vue-项目中-key-的作用","children":[]},{"level":3,"title":"vue组件的通信方式","slug":"vue组件的通信方式","link":"#vue组件的通信方式","children":[]},{"level":3,"title":"$emit 后面的两个参数是什么","slug":"emit-后面的两个参数是什么","link":"#emit-后面的两个参数是什么","children":[]},{"level":3,"title":"nextTick的实现","slug":"nexttick的实现","link":"#nexttick的实现","children":[]},{"level":3,"title":"nextTick的实现原理是什么？","slug":"nexttick的实现原理是什么","link":"#nexttick的实现原理是什么","children":[]},{"level":3,"title":"使用过插槽么？用的是具名插槽还是匿名插槽或作用域插槽","slug":"使用过插槽么-用的是具名插槽还是匿名插槽或作用域插槽","link":"#使用过插槽么-用的是具名插槽还是匿名插槽或作用域插槽","children":[]},{"level":3,"title":"keep-alive的实现","slug":"keep-alive的实现","link":"#keep-alive的实现","children":[]},{"level":3,"title":"keep-alive 的属性","slug":"keep-alive-的属性","link":"#keep-alive-的属性","children":[]},{"level":3,"title":"mixin","slug":"mixin","link":"#mixin","children":[]},{"level":3,"title":"vue 如何实现模拟 v-model 指令","slug":"vue-如何实现模拟-v-model-指令","link":"#vue-如何实现模拟-v-model-指令","children":[]},{"level":3,"title":"如何实现 v-model,说下思路","slug":"如何实现-v-model-说下思路","link":"#如何实现-v-model-说下思路","children":[]},{"level":3,"title":"Vue Router 相关","slug":"vue-router-相关","link":"#vue-router-相关","children":[]},{"level":3,"title":"Vuex的理解及使用场景","slug":"vuex的理解及使用场景","link":"#vuex的理解及使用场景","children":[]}],"git":{"createdTime":1729588349000,"updatedTime":1729588349000,"contributors":[{"name":"lnitia","email":"1776568708@qq.com","commits":1}]},"readingTime":{"minutes":13.63,"words":4088},"filePathRelative":"mymd/mianshi/mianshibaodian/06Vue.md","localizedDate":"2024年3月10日","excerpt":"<h1> Vue 面试专题</h1>\\n<p><a href=\\"https://mp.weixin.qq.com/s/CAYPxaDrKChSgO1PMUGcAg\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">「Vue2+Vue3」 的 62 个知识点 </a></p>\\n<h3> 简述MVVM</h3>\\n<p><strong>什么是MVVM？</strong></p>\\n<p><code>视图模型双向绑定</code>，是 <code>Model-View-ViewModel</code>的缩写，也就是把 <code>MVC</code>中的 <code>Controller</code>演变成 <code>ViewModel。Model</code>层代表数据模型，<code>View</code>代表UI组件，<code>ViewModel</code>是 <code>View</code>和 <code>Model</code>层的桥梁，数据会绑定到 <code>viewModel</code>层并自动将数据渲染到页面中，视图变化的时候会通知 <code>viewModel</code>层更新数据。以前是操作DOM结构更新视图，现在是 <code>数据驱动视图</code>。</p>","autoDesc":true}`);export{e as data};
