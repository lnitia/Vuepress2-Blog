import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as n,o as s,c,a as i,b as a,d as r,f as e}from"./app-0mkQjek1.js";const d={},o=e('<h1 id="unity-ui控件" tabindex="-1"><a class="header-anchor" href="#unity-ui控件" aria-hidden="true">#</a> Unity UI控件</h1><h2 id="canvas" tabindex="-1"><a class="header-anchor" href="#canvas" aria-hidden="true">#</a> canvas</h2><ul><li>画布 (Canvas) 是应该容纳所有 UI 元素的区域。画布是一种带有画布组件的游戏对象，所有 UI 元素都必须是此类画布的子项</li><li>画布中的 UI 元素按照它们在 Hierarchy 中显示的顺序绘制（即排列在上面的先绘制，排列在下面的会挡住之前绘制的内容）</li></ul><h4 id="render-mode-渲染模式" tabindex="-1"><a class="header-anchor" href="#render-mode-渲染模式" aria-hidden="true">#</a> render mode（渲染模式）</h4><p>Screen Space - Overlay：此渲染模式将 UI 元素放置于在场景之上渲染的屏幕上。调整屏幕大小或更改分辨率，则画布将自动更改大小来适应</p><p>Screen Space - Camera：在此模式下，画布放置在指定摄像机前面的给定距离处，UI 元素由此摄像机渲染，摄像机设置会影响 UI 的外观</p><p>World Space：将 UI 视为场景中的平面对象进行渲染（MRTK canvas只支持使用这种模式，并且会在运行时自动分配event camera，不能提前添加）</p><p><img src="https://cdn.jsdelivr.net/gh/lnitia/MyPictures@main/blogpictures/20240127145639.png" alt="" loading="lazy"></p><h3 id="canvas-scaler-画布缩放器" tabindex="-1"><a class="header-anchor" href="#canvas-scaler-画布缩放器" aria-hidden="true">#</a> canvas scaler（画布缩放器）</h3><ul><li>Dynamic Pixels Per Unit：用于 UI 中动态创建的位图（如文本）的每单位像素量</li><li>Reference Pixels Per Unit：如果精灵（sprite）具有此“Pixels Per Unit”设置，则精灵中的每个像素将覆盖世界中的一个单位。如果“Reference Pixels Per Unit”设置为 1，则精灵中的“Pixels Per Unit”设置将按原样使用</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lnitia/MyPictures@main/blogpictures/20240127145652.png" alt="" loading="lazy"></p><h3 id="canvas-renderer-画布渲染器" tabindex="-1"><a class="header-anchor" href="#canvas-renderer-画布渲染器" aria-hidden="true">#</a> canvas renderer（画布渲染器）</h3><p>用于渲染画布中包含的图形 UI 对象</p><p><img src="https://cdn.jsdelivr.net/gh/lnitia/MyPictures@main/blogpictures/20240127145707.png" alt="img" loading="lazy"></p><h3 id="canvasutility-script" tabindex="-1"><a class="header-anchor" href="#canvasutility-script" aria-hidden="true">#</a> canvasutility（script）</h3><p>使canvas在MRTK中使用的帮助类</p><h3 id="graphic-raycaster" tabindex="-1"><a class="header-anchor" href="#graphic-raycaster" aria-hidden="true">#</a> Graphic Raycaster</h3><p>挂在 Canvas 下用来检测 UI 输入事件的射线发射器</p><ul><li>ignore reversed graphic：忽略逆转图形，即只在正面时生效，背面时不生效</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lnitia/MyPictures@main/blogpictures/20240127145809.png" alt="img" loading="lazy"></p><h2 id="可视组件" tabindex="-1"><a class="header-anchor" href="#可视组件" aria-hidden="true">#</a> 可视组件</h2><h3 id="text-文本" tabindex="-1"><a class="header-anchor" href="#text-文本" aria-hidden="true">#</a> text（文本）</h3><h3 id="image-图像" tabindex="-1"><a class="header-anchor" href="#image-图像" aria-hidden="true">#</a> image（图像）</h3><ul><li><p>Source Image：表示要显示的图像的纹理（必须作为精灵(sprite)导入→在图片的texture type中更改）</p></li><li><p>image type：</p><ul><li><p>simple：原图拉伸</p><p>preserve aspect：长宽比固定</p></li><li><p>sliced：九宫格模式，即只有九宫格中间部分会被拉伸，边框不拉伸（设置九宫格：图片的sprite editor）</p><p>fill center：是否显示九宫格中间部分</p></li><li><p>tiled：平铺，不拉伸</p></li><li><p>filed：填充，相比simple多一个动画显示效果</p></li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lnitia/MyPictures@main/blogpictures/20240127150152.png" alt="img" loading="lazy"></p><h3 id="rect-mask-2d-fast-script-遮罩控件" tabindex="-1"><a class="header-anchor" href="#rect-mask-2d-fast-script-遮罩控件" aria-hidden="true">#</a> rect mask 2D fast（script）（遮罩控件）</h3><p>与mask类似</p><p><img src="https://cdn.jsdelivr.net/gh/lnitia/MyPictures@main/blogpictures/20240127150209.png" alt="img" loading="lazy"></p><h2 id="交互组件" tabindex="-1"><a class="header-anchor" href="#交互组件" aria-hidden="true">#</a> 交互组件</h2><h3 id="均有基类" tabindex="-1"><a class="header-anchor" href="#均有基类" aria-hidden="true">#</a> 均有基类</h3><h4 id="interactible" tabindex="-1"><a class="header-anchor" href="#interactible" aria-hidden="true">#</a> interactible</h4><p>是否接受输入，若为false，则transition也禁用</p><h4 id="transition-过渡" tabindex="-1"><a class="header-anchor" href="#transition-过渡" aria-hidden="true">#</a> transition（过渡）</h4><ul><li><p>none：无过渡效果</p></li><li><p>color tint：根据当前状态更改颜色</p><ul><li>Target Graphic：用于交互组件的图形</li><li>Normal Color：控件的正常颜色</li><li>Highlighted Color：控件突出显示时的颜色</li><li>Pressed Color：控件按下时的颜色</li><li>Disabled Color：控件禁用时的颜色</li><li>Color Multiplier：将每个过渡的着色颜色乘以其值。由此可以创建大于 1 的颜色，从而使基色小于白色（或小于完整 Alpha）的图形元素上的颜色（或 Alpha 通道）变亮</li><li>Fade Duration：从一个状态淡入淡出到另一个状态所需的时间（以秒为单位）</li></ul></li><li><p>sprite swap：根据当前状态显示不同精灵</p></li><li><p>animation：动画</p></li></ul><h4 id="navigation-导航" tabindex="-1"><a class="header-anchor" href="#navigation-导航" aria-hidden="true">#</a> navigation（导航）</h4><ul><li>None：无导航</li><li>Horizontal：水平导航</li><li>Vertical：垂直导航</li><li>Automatic：自动导航</li><li>Explicit：在此模式下，可显式指定不同箭头键将控件导航到的位置</li><li>Visualize：直观显示在场景窗口中设置的导航</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lnitia/MyPictures@main/blogpictures/20240127150511.png" alt="" loading="lazy"></p><h3 id="scrollbar-滚动条" tabindex="-1"><a class="header-anchor" href="#scrollbar-滚动条" aria-hidden="true">#</a> scrollbar（滚动条）</h3><p>属性：</p><ul><li>Handle Rect：用于控件滑动“控制柄”部分的图形</li><li>Direction：拖动控制柄时滚动条值增加的方向。选项包括 Left To Right、Right To Left、Bottom To Top 和 Top To Bottom</li><li>Value：滚动条的初始位置值，范围为 0.0 到 1.0</li><li>Size：控制柄在滚动条内的比例大小，范围为 0.0 到 1.0</li><li>Number Of Steps：滚动条允许的不同滚动位置的数量</li></ul><p>事件：</p><ul><li>on value changed：当用户拖动控制柄时响应，滚动条的当前值可作为 float 参数传递给事件函数</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lnitia/MyPictures@main/blogpictures/20240127150544.png" alt="" loading="lazy"></p><h3 id="scroll-rect-滚动矩形" tabindex="-1"><a class="header-anchor" href="#scroll-rect-滚动矩形" aria-hidden="true">#</a> Scroll Rect（滚动矩形）</h3><p>属性：</p><ul><li><p>Content：这是对需要滚动的 UI 元素（例如大型图像）的矩形变换的引用</p></li><li><p>Horizontal：启用水平滚动</p></li><li><p>Vertical：启用垂直滚动</p></li><li><p>Movement Type：Unrestricted、Elastic 或 Clamped。使用 Elastic 或 Clamped 可强制内容保持在滚动矩形的边界内。Elastic 模式在内容到达滚动矩形边缘时弹回内容</p><p>Elasticity：弹性模式中使用的反弹量</p></li><li><p>Inertia：如果设置 Inertia，则拖动指针再松开时内容将继续移动。如果未设置 Inertia，则只有进行拖动时内容才移动Deceleration Rate：设置 Inertia 的情况下，减速率 (Deceleration Rate) 决定了内容停止移动的速度。速率为 0 将立即停止移动。值为 1 表示移动永不减速</p></li><li><p>Scroll Sensitivity：对滚轮和触控板滚动事件的敏感性</p></li><li><p>Viewport：对作为内容矩形变换父项的视口矩形变换的引用</p></li><li><p>Horizontal Scrollbar：对水平滚动条元素的引用（可选）</p></li><li><p>Vertical Scrollbar：对垂直滚动条元素的引用（可选）</p><p>Visibility：滚动条是否应在不需要时自动隐藏以及（可选）是否还展开视口</p><p>Spacing：滚动条与视口之间的空间</p></li></ul><p>事件：</p><ul><li>On Value Changed：滚动矩形的滚动位置发生变化时调用，可将当前滚动位置作为 Vector2 类型动态参数发送</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lnitia/MyPictures@main/blogpictures/20240127150802.png" alt="" loading="lazy"></p><h2 id="布局" tabindex="-1"><a class="header-anchor" href="#布局" aria-hidden="true">#</a> 布局</h2><h4 id="rect-transform-矩形变换" tabindex="-1"><a class="header-anchor" href="#rect-transform-矩形变换" aria-hidden="true">#</a> rect transform（矩形变换）</h4>',51),h={href:"https://docs.unity.cn/cn/2020.3/Manual/UIBasicLayout.html",target:"_blank",rel:"noopener noreferrer"},p=e('<ul><li>Pos (X, Y, Z)：矩形轴心点相对于锚点的位置。轴心点是矩形旋转所围绕的位置</li><li>Width/Height：矩形的宽度和高度</li><li>Left, Top, Right, Bottom：矩形边缘相对于锚点的位置。可视为由锚点定义的矩形内的填充。当锚点分离时将取代 Pos 和 Width/Height 显示。要访问这些选项，请单击 RectTransform 组件左上方的 Anchor Presets 方框</li><li>Anchors：矩形左下角和右上角的锚点 Min：矩形左下角的锚点，定义为父矩形大小的一个比例。0,0 相当于锚定到父项的左下角，而 1,1 相当于锚定到父项的右上角 Max：矩形右上角的锚点，定义为父矩形大小的一个比例。0,0 相当于锚定到父项的左下角，而 1,1 相当于锚定到父项的右上角</li><li>Pivot：矩形旋转围绕的轴心点的位置，定义为矩形本身大小的一个比例。0,0 相当于左下角，而 1,1 相当于右上角</li><li>Rotation：对象围绕其轴心点沿 X、Y 和 Z 轴的旋转角度（以度为单位）</li><li>Scale：在 X、Y 和 Z 维度中应用于对象的缩放因子</li><li>Blueprint Mode：编辑 RectTransform，就好像它们没有旋转和缩放一样。这也会启用贴靠</li><li>Raw Edit Mode：启用此属性后，编辑轴心和锚点值不会反向调整矩形的位置和大小来使矩形保持在同一个位置</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lnitia/MyPictures@main/blogpictures/20240127150946.png" alt="" loading="lazy"></p><h3 id="content-size-fitter-内容大小适配器" tabindex="-1"><a class="header-anchor" href="#content-size-fitter-内容大小适配器" aria-hidden="true">#</a> Content Size Fitter（内容大小适配器）</h3><ul><li><p>Horizontal Fit：如何控制宽度 Unconstrained：不根据布局元素伸展宽度</p><p>Min Size：根据布局元素的最小宽度来伸展宽度</p><p>Preferred Size：根据布局元素的偏好宽度来伸展宽度</p></li><li><p>Vertical Fit：如何控制高度</p><p>Unconstrained：不根据布局元素伸展高度</p><p>Min Size：根据布局元素的最小高度来伸展高度</p><p>Preferred Size：根据布局元素的偏好高度来伸展高度</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lnitia/MyPictures@main/blogpictures/20240127151234.png" alt="" loading="lazy"></p><h3 id="grid-layout-group-网格布局组" tabindex="-1"><a class="header-anchor" href="#grid-layout-group-网格布局组" aria-hidden="true">#</a> Grid Layout Group（网格布局组）</h3><ul><li>Padding：布局组边缘内的填充</li><li>Cell Size：要用于组内每个布局元素的大小</li><li>Spacing：布局元素之间的间距</li><li>Start Corner：第一个元素所在的角</li><li>Start Axis：沿哪个主轴放置元素。Horizontal 将在填充整行后才开始新行。Vertical 将在填充整列后才开始新列</li><li>Child Alignment：用于布局元素的对齐方式（如果这些元素未填满可用空间）</li><li>Constraint：将网格约束为固定数量的行或列以便支持自动布局系统</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lnitia/MyPictures@main/blogpictures/20240127151311.png" alt="" loading="lazy"></p><h3 id="vertical-layout-group-垂直布局组" tabindex="-1"><a class="header-anchor" href="#vertical-layout-group-垂直布局组" aria-hidden="true">#</a> Vertical Layout Group（垂直布局组）</h3><ul><li>padding：布局组边缘内的填充</li><li>Spacing：布局元素之间的间距</li><li>Child Alignment：子布局元素的对齐方式</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lnitia/MyPictures@main/blogpictures/20240127151338.png" alt="" loading="lazy"></p><h2 id="ui组合使用" tabindex="-1"><a class="header-anchor" href="#ui组合使用" aria-hidden="true">#</a> UI组合使用</h2><h3 id="canvas父物体控件" tabindex="-1"><a class="header-anchor" href="#canvas父物体控件" aria-hidden="true">#</a> canvas父物体控件</h3><p><img src="https://cdn.jsdelivr.net/gh/lnitia/MyPictures@main/blogpictures/20240127151416.png" alt="" loading="lazy"></p><h3 id="键盘输入子物体控件" tabindex="-1"><a class="header-anchor" href="#键盘输入子物体控件" aria-hidden="true">#</a> 键盘输入子物体控件</h3><p><img src="https://cdn.jsdelivr.net/gh/lnitia/MyPictures@main/blogpictures/20240127151424.png" alt="" loading="lazy"></p><h3 id="hololens2点击按钮控件" tabindex="-1"><a class="header-anchor" href="#hololens2点击按钮控件" aria-hidden="true">#</a> HoloLens2点击按钮控件</h3><p><img src="https://cdn.jsdelivr.net/gh/lnitia/MyPictures@main/blogpictures/20240127151432.png" alt="" loading="lazy"></p><p>PhysicalPressEventRouter作用：将PressableButton的事件路由到Interactable，允许通过物理触摸调用Interactable的OnPointerClicked方法</p><h3 id="scroll-view-滚动视窗-scroll-rect-scrollbar" tabindex="-1"><a class="header-anchor" href="#scroll-view-滚动视窗-scroll-rect-scrollbar" aria-hidden="true">#</a> scroll view（滚动视窗）：scroll rect + scrollbar</h3><p>滚动视窗中的重要元素包括视窗viewport、滚动内容content以及可选的一个或两个滚动条scrollbar</p><ul><li>根游戏对象scroll view具有滚动矩形scroll rect组件</li><li>视窗viewport具有遮罩mask组件。视窗可以是根游戏对象，也可以是作为根的子项的单独游戏对象。如果使用自动隐藏的滚动条，则视窗viewport必须是子项。需要在滚动矩形scroll rect的 Viewport 属性中引用视窗矩形变换即viewport的rect transform</li><li>所有滚动内容必须是作为视窗viewport子项的单个内容游戏对象content的子项。需要在滚动矩形scroll rect的 Content 属性中引用内容矩形变换即content的rect transform</li><li>滚动条scrollbar（如果使用）是根游戏对象的子项</li></ul><p>下图显示了视口是滚动视图根节点的子项的设置。使用 GameObject &gt; UI &gt; Scroll View 菜单选项时，默认情况下会采用此设置</p><p><img src="https://cdn.jsdelivr.net/gh/lnitia/MyPictures@main/blogpictures/20240127151503.png" alt="" loading="lazy"></p><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><h3 id="字体" tabindex="-1"><a class="header-anchor" href="#字体" aria-hidden="true">#</a> 字体</h3>',26),u={href:"https://www.fonts.net.cn/",target:"_blank",rel:"noopener noreferrer"},g=e('<p>character set：字库（缺少的字在字库中添加后更新即可）</p><p><img src="https://cdn.jsdelivr.net/gh/lnitia/MyPictures@main/blogpictures/20240127151530.png" alt="" loading="lazy"></p><h3 id="hololens按钮" tabindex="-1"><a class="header-anchor" href="#hololens按钮" aria-hidden="true">#</a> hololens按钮</h3><h4 id="更改图标icon" tabindex="-1"><a class="header-anchor" href="#更改图标icon" aria-hidden="true">#</a> 更改图标icon</h4><ol><li>创建IconSet：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/lnitia/MyPictures@main/blogpictures/20240127151607.png" alt="" loading="lazy"></p><ol start="2"><li>在IconSet中添加图标图片</li></ol>',7);function m(b,f){const l=n("ExternalLinkIcon");return s(),c("div",null,[o,i("p",null,[i("a",h,[a("https://docs.unity.cn/cn/2020.3/Manual/UIBasicLayout.html"),r(l)])]),p,i("p",null,[a("source font file：字体（可在C:\\Windows\\Fonts中选择 or "),i("a",u,[a("下载"),r(l)]),a("）")]),g])}const x=t(d,[["render",m],["__file","04ugui.html.vue"]]);export{x as default};
